{"version":3,"sources":["PathFindingVisualizer/Node/Node.jsx","Algorithm/pathfindingAlgorithms.js","PathFindingVisualizer/PathFindingVisualizer.jsx","SortingVisualizer/Pile/Pile.jsx","Algorithm/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","AIVisualizer/Perceptron/Perceptron.js","AIVisualizer/Perceptron/PtronVisualizer.jsx","AIVisualizer/PongVisualizer/PongAgent.js","AIVisualizer/PongVisualizer/PongVisualizer.jsx","AIVisualizer/ConnectFourVisualizer/MinimaxAgent.js","AIVisualizer/ConnectFourVisualizer/ConnectFour.jsx","AIVisualizer/NNSnakeVisualizer/SnakeNode/SnakeNode.jsx","AIVisualizer/NNSnakeVisualizer/NNSnakeVisualizer.jsx","AIVisualizer/AIVisualizer.jsx","Visualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","row","col","isFinish","isStart","onMouseDown","onMouseEnter","onMouseUp","isWall","extraClassName","id","className","Component","dijkstra","grid","start","finish","visitedInOrder","distance","unvisited","allNodes","length","sort","a","b","closest","shift","Infinity","isVisited","push","updateUnvisitedNeighbors","DFS","node","pop","concat","getUNeighbors","BFS","neighbors","reN","index","neighbor","previousNode","AStar","heuristic","cur","updateUnvisitedNeighborsStar","manhattanDistance","ar","ac","br","bc","Math","abs","re","randomInt","min","max","floor","random","randomSelect","path","getNeighbors","visited","points","height","width","pRe","validate","slice","connected","unconnected","forEach","nr","nc","ir","ic","c","u","connect","makeWall","isW","newNode","PathFindingVisualizer","state","FR","FC","mouseIsPressed","changingStart","changingFinish","visualized","rendering","numRow","numCol","SR","SC","speed","delays","currentAlgorithm","algorithms","pathfindingAlgorithms","visualizePathfinding","bind","clearVisualizer","setAlgorithm","getFunctions","algoId","setState","initializeGrid","clearWall","currentRow","element","document","getElementById","createNode","updateGridWithWall","clearVisitedAndPath","newFinish","newStart","setVisualizerRendering","g","shortedPath","unshift","getShortestPath","i","setTimeout","n","console","log","map","rowId","key","nodeId","handleMouseDown","handleMouseEnter","handleMouseUp","class","style","marginTop","type","disabled","data-toggle","aria-haspopup","aria-expanded","marginRight","aria-labelledby","onClick","setSpeed","j","splice","rn","primMaze","marginLeft","Pile","val","isChanging","finished","isPivot","size","colorSetIndex","changingColors","offSet","normalColors","color","lineOff","indicatorLength","background","position","display","x1","y1","x2","y2","stroke","strokeWidth","swap","piles","tempVal","selectionSort","statesInOrder","minId","temp","changing","bubbleSort","newN","insertionSort","mergeSort","mergeSortHelper","end","mid","k","pilesC","merge","quickSort","quickSortHelper","pivot","partition","SortingVisualizer","numPiles","maxPile","changingPiles","pileDelayTimes","DelayTimesSizeBased","getRandomInt","descriptions","unsortedPiles","sortingAlgorithms","randomizePiles","visualizeSorting","initializePiles","s","sizes","pile","pileId","dummy","indexOf","setSize","range","Perceptron","weights","Array","inputs","desired","error","feedforward","sum","activate","PtronVisualizer","training","count","ptron","xOff","yOff","M","B","resetVisualizer","startVisualizer","x","as","ae","bs","be","y","answer","f","input","output","initialize","getWeights","xx1","yy1","xx2","yy2","train","guess","fill","textComponet","aM","aB","eM","eB","text","fontFamily","fontSize","circles","point","pointId","radius","opacity","all","name","ref","layer","ax","ay","bx","by","sqrt","PongAgent","discount","epsilon","alpha","featureList","action","dots","minDis","d","px","vx","vy","terminal","getMove","features","minDisToDot","result","getFeatures","feature","nextState","reward","diff","getValue","getQ","p","curActions","actions","getPolicy","reAction","maxQ","PongVisualizer","r","ballSpeed","panelx","panely","panelSpeed","ballInitialized","framecount","score","pressedLeft","pressedRight","humanMode","gameCount","agent","notStarted","setReleased","setPressed","componentDidMount","addEventListener","evt","keyCode","ox","ovx","ovy","storedWeights","movePanel","goMouseEnter","onMouseLeave","w1","w2","w3","getState","getAction","curScore","curGameCount","updateBall","updateDots","updatePanel","update","NaN","dot","dotId","MinimaxAgent","depth","humanPlayer","aiPiece","humanPiece","board","getActions","maxVal","maxValAction","boardCopy","minimax","tryMove","colId","newCol","reverse","four","tar","count1","countN","count2","sc","three","pow","threes_one","threes_two","scoreFour2","d2","numDuplicate","d1","arr","Set","ele","hash","has","add","isMax","beta","checkWinner","getScore","Piece","Col","handleClick","handleEnter","handleLeave","pieces","ConnectFour","currentPlayer","aiPlayer","lastBoards","colors","winner","minimaxAgent","reset","player","move","AITakeMove","buttons","setStartingPlayer","undo","setDepth","cols","loadingImg","src","zIndex","textAlign","checkFour","SnakeNode","NNSnakeVisualizer","numRows","numCols","snake","direction","dr","dc","foodPos","foodScore","randomRow","randomCol","nextFood","line","showSnake","food","updateSnake","lastNode","checkFoodEaten","randomFood","num","AIVisualizer","visualizeAI","getAIFunctions","newScript","run","url","script","createElement","body","appendChild","renderObj","Visualizer","mode","goFunction","resetFunction","sortingClicked","pathClicked","AIClicked","aicount","changeRenderingState","go","setAlgo","interval","springConfig","stiffness","adjustingSpeed","href","data-target","invisibleOrNot","algorithm","role","data-dismiss","App","charset","content","rel","integrity","crossorigin","basename","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.69fbc1a6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n    render() {\r\n        const {\r\n            row,\r\n            col,\r\n            isFinish,\r\n            isStart,\r\n            onMouseDown,\r\n            onMouseEnter,\r\n            onMouseUp,\r\n            isWall,\r\n        } = this.props;\r\n        const extraClassName = isFinish\r\n            ? 'node-finish'\r\n            : isStart\r\n                ? 'node-start'\r\n                : isWall\r\n                    ? 'node-wall'\r\n                    : '';\r\n        return (\r\n            <div\r\n                id={`node-${row}-${col}`}\r\n                className={`node ${extraClassName}`}\r\n                onMouseDown={() => onMouseDown(row, col)}\r\n                onMouseEnter={() => onMouseEnter(row, col)}\r\n                onMouseUp={() => onMouseUp()}>\r\n            </div>\r\n        );\r\n    }\r\n}","import { createPortal } from \"react-dom\";\r\n\r\nfunction dijkstra(grid, start, finish) {\r\n    const visitedInOrder = [];\r\n    start.distance = 0;\r\n    const unvisited = allNodes(grid);\r\n    while (unvisited.length) {\r\n        sortNodes(unvisited);\r\n        const closest = unvisited.shift();\r\n        if (closest === finish) {\r\n            return visitedInOrder;\r\n        }\r\n        if (closest.isWall) continue;\r\n        if (closest.distance === Infinity) return visitedInOrder;\r\n        closest.isVisited = true;\r\n        visitedInOrder.push(closest);\r\n\r\n        updateUnvisitedNeighbors(closest, grid);\r\n    }\r\n    return visitedInOrder;\r\n}\r\n\r\nfunction DFS(grid, start, finish) {\r\n    const visitedInOrder = [];\r\n    let unvisited = [];\r\n    unvisited.push(start);\r\n    let count = 0;\r\n    while (unvisited.length) {\r\n        const node = unvisited.pop();\r\n        if (node === finish) {\r\n            return visitedInOrder;\r\n        }\r\n        if (node.isWall) continue;\r\n        node.isVisited = true;\r\n        visitedInOrder.push(node);\r\n\r\n        unvisited = unvisited.concat(getUNeighbors(node, grid));\r\n        count++;\r\n    }\r\n\r\n    return visitedInOrder;\r\n}\r\n\r\nfunction BFS(grid, start, finish) {\r\n    /*\r\n    let nodes = [];\r\n    start.distance = 0;\r\n    nodes.push(start);\r\n    console.log(nodes, start);\r\n    const visitedInOrder = [];\r\n    let count = 0;\r\n    let visited = [];\r\n    while (nodes.length && count < 1000) {\r\n        const cur = nodes.shift();\r\n        const { row: row, col: col } = cur;\r\n        visited.push({ row: row, col: col });\r\n        if (cur.isFinish) return visitedInOrder;\r\n        if (cur.isWall) continue;\r\n\r\n        visitedInOrder.push(cur);\r\n        const neighbors = getUnvisitedNeighbors(cur, grid, visited);\r\n        console.log(visitedInOrder, neighbors.length, count);\r\n        console.log(visited.slice());\r\n        nodes = nodes.concat(neighbors);\r\n        count += 1;\r\n    }\r\n    return visitedInOrder;*/\r\n    const visitedInOrder = [];\r\n    let unvisited = [];\r\n    unvisited.push(start);\r\n    let count = 0;\r\n    while (unvisited.length) {\r\n        const node = unvisited.shift();\r\n        if (node === finish) {\r\n            return visitedInOrder;\r\n        }\r\n        if (node.isWall) continue;\r\n        node.isVisited = true;\r\n        visitedInOrder.push(node);\r\n\r\n        unvisited = unvisited.concat(getUNeighbors(node, grid));\r\n        count++;\r\n    }\r\n\r\n    return visitedInOrder;\r\n}\r\n\r\nfunction visitedTest(visited, ele) {\r\n    const { row: row, col: col } = ele;\r\n    for (let i = 0; i < visited.length; i++) {\r\n        const { row: r, col: c } = visited[i];\r\n        if (r === row && c == col) return true;\r\n\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction getUNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const reN = [];\r\n    const { row, col } = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n\r\n    for (let index = 0; index < neighbors.length; index++) {\r\n        const neighbor = neighbors[index];\r\n        if (!neighbor.isVisited) {\r\n            neighbor.previousNode = node;\r\n            neighbor.isVisited = true;\r\n            reN.push(neighbor);\r\n        }\r\n    }\r\n    return reN;\r\n\r\n}\r\n\r\nfunction AStar(grid, start, finish) {\r\n    const visitedInOrder = [];\r\n    start.distance = 0;\r\n    start.heuristic = 0;\r\n    const unvisited = allNodes(grid);\r\n    while (unvisited.length) {\r\n        sortNodesStar(unvisited);\r\n        const cur = unvisited.shift();\r\n        if (cur === finish) {\r\n            return visitedInOrder;\r\n        }\r\n        if (cur.isWall) continue;\r\n        if (cur.distance + cur.heuristic === Infinity) return visitedInOrder;\r\n        cur.isVisited = true;\r\n        visitedInOrder.push(cur);\r\n\r\n        updateUnvisitedNeighborsStar(cur, grid, finish);\r\n    }\r\n    return visitedInOrder;\r\n}\r\n\r\nfunction updateUnvisitedNeighborsStar(cur, grid, finish) {\r\n    const neighbors = [];\r\n    const { row, col } = cur;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    for (const neighbor of neighbors) {\r\n        if (!neighbor.isVisited) {\r\n            neighbor.distance = cur.distance + 1;\r\n            neighbor.heuristic = manhattanDistance(neighbor, finish);\r\n            neighbor.previousNode = cur;\r\n        }\r\n    }\r\n}\r\n\r\nfunction manhattanDistance(a, b) {\r\n    let { row: ar, col: ac } = a;\r\n    let { row: br, col: bc } = b;\r\n    return Math.abs(ar - br) + Math.abs(ac - bc);\r\n}\r\n\r\nfunction allNodes(grid) {\r\n    const re = [];\r\n    for (const row of grid) {\r\n        for (const node of row) {\r\n            re.push(node);\r\n        }\r\n    }\r\n    return re;\r\n}\r\n\r\nfunction sortNodesStar(nodes) {\r\n    nodes.sort((a, b) => (a.distance + a.heuristic) - (b.distance + b.heuristic));\r\n}\r\n\r\n\r\nfunction sortNodes(nodes) {\r\n    nodes.sort((a, b) => a.distance - b.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(closest, grid) {\r\n    const neighbors = [];\r\n    const { row, col } = closest;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    for (const neighbor of neighbors) {\r\n        if (!neighbor.isVisited) {\r\n            neighbor.distance = closest.distance + 1;\r\n            neighbor.previousNode = closest;\r\n        }\r\n    }\r\n}\r\n\r\nfunction getShortestPath(finish) {\r\n    const path = [];\r\n    let cur = finish;\r\n    while (cur !== null) {\r\n        path.unshift(cur);\r\n        cur = cur.previousNode;\r\n    }\r\n    return path;\r\n}\r\n\r\nfunction randomInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction deepCopy(maze) {\r\n    let cMaze = [];\r\n    for (let row = 0; row < maze.length; row++) {\r\n        cMaze.push(maze[row].slice());\r\n    }\r\n    return cMaze;\r\n}\r\n\r\nfunction primMaze(grid) {\r\n    let sr = 7, sc = 17; // set a starting point for generating maze\r\n    let height = grid.length, width = grid[0].length;\r\n    for (let i = 0; i < height; i++) {\r\n        for (let j = 0; j < width; j++) {\r\n            makeWall(grid, i, j, false);\r\n        }\r\n\r\n    }\r\n    for (let i = 0; i < height; i++) {\r\n        for (let j = i % 2 + 1; j < width; j += i % 2 + 1) {\r\n            makeWall(grid, i, j, true);\r\n        }\r\n    }\r\n    for (let i = 0; i < height; i++) {\r\n        makeWall(grid, i, 0, true);\r\n    }\r\n    let visited = [];\r\n    let path = [{ row: sr, col: sc }];\r\n    let count = 0;\r\n    while (path.length > 0) {\r\n        const index = randomSelect(path);\r\n        const node = path[index];\r\n        path.splice(index, 1);\r\n        visited = visited.concat([node]);\r\n        const { c: connected, u: unconnected } = getNeighbors(grid, visited, node);\r\n        if (connected.length > 0) {\r\n            let rn = randomSelect(connected);\r\n            connect(grid, node, connected[rn]);\r\n            connected.splice(rn);\r\n        }\r\n        path = path.concat(unconnected);\r\n\r\n        count++;\r\n    }\r\n}\r\n\r\nfunction randomSelect(path) {\r\n    return randomInt(0, path.length - 1);\r\n}\r\n\r\nfunction validate(grid, points) {\r\n    let height = grid.length, width = grid[0].length;\r\n    let pRe = [];\r\n    for (let index = 0; index < points.length; index++) {\r\n        let { row, col } = points[index];\r\n        if ((0 <= row && row < height && 0 <= col && col < width)) {\r\n            pRe.push(points[index]);\r\n        }\r\n    }\r\n    return pRe;\r\n\r\n}\r\n\r\nfunction isVisited(visited, node) {\r\n    let { row: nr, col: nc } = node;\r\n    for (let index = 0; index < visited.length; index++) {\r\n        let { row: ir, col: ic } = visited[index];\r\n        if (nr === ir && nc === ic) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction getNeighbors(grid, visited, node) {\r\n    let { row, col } = node;\r\n    let neighbors = [{ row: row + 2, col: col }, { row: row - 2, col: col }, { row: row, col: col + 2 }, { row: row, col: col - 2 }];\r\n    neighbors = validate(grid, neighbors.slice());\r\n    let connected = [];\r\n    let unconnected = [];\r\n    neighbors.forEach(neighbor => {\r\n        if (isVisited(visited, neighbor)) {\r\n            connected.push(neighbor);\r\n        }\r\n        else {\r\n            unconnected.push(neighbor);\r\n        }\r\n    });\r\n    return { c: connected, u: unconnected };\r\n}\r\n\r\nfunction connect(grid, a, b) {\r\n    let { row: ar, col: ac } = a;\r\n    let { row: br, col: bc } = b;\r\n    let row = (ar + br) / 2;\r\n    let col = (ac + bc) / 2;\r\n    makeWall(grid, row, col, false);\r\n}\r\n\r\nfunction recursiveDivisionMaze(grid) {\r\n    let height = grid.length, width = grid[0].length;\r\n\r\n    recursiveDivision(grid, width, height, 0, 0, 0);\r\n\r\n}\r\n\r\n\r\nfunction makeWall(grid, row, col, isW) {\r\n    const node = grid[row][col];\r\n    const newNode = {\r\n        ...node,\r\n        isWall: isW,\r\n    }\r\n    grid[row][col] = newNode;\r\n}\r\n\r\nfunction buildWall(grid, width, height, xo, yo, wallId, horizontal) {\r\n    if (horizontal) {\r\n        for (let i = xo + 1; i < width - 1; i++) {\r\n            makeWall(grid, wallId, i, true);\r\n        }\r\n    }\r\n    else {\r\n        for (let i = yo + 1; i < height - 1; i++) {\r\n            makeWall(grid, i, wallId, true);\r\n        }\r\n    }\r\n}\r\n\r\nfunction recursiveDivision(grid, width, height, xo, yo, count) {\r\n    if (width - xo < 2 || height - yo < 2) {\r\n        return;\r\n    }\r\n    let horizontal = randomInt(0, 1) == 0;\r\n    let wallId = randomInt(horizontal ? yo : xo, horizontal ? height - 1 : width - 1);\r\n    buildWall(grid, width, height, xo, yo, wallId, horizontal);\r\n\r\n    let pathId = randomInt(!horizontal ? yo : xo, !horizontal ? height - 1 : width - 1);\r\n\r\n    if (horizontal) {\r\n        makeWall(grid, wallId, pathId, false);\r\n        recursiveDivision(grid, width, wallId - 1, xo, yo, count + 1);\r\n        recursiveDivision(grid, width, height, xo, wallId, count + 1);\r\n    }\r\n    else {\r\n        makeWall(grid, pathId, wallId, false);\r\n        recursiveDivision(grid, wallId - 1, height, xo, yo, count + 1);\r\n        recursiveDivision(grid, width, height, wallId, yo, count + 1);\r\n    }\r\n}\r\n\r\nexport { dijkstra, BFS, DFS, AStar, getShortestPath, recursiveDivisionMaze, primMaze };","import React, { Component } from 'react';\r\nimport Node from './Node/Node';\r\nimport { dijkstra, BFS, DFS, AStar, getShortestPath, recursiveDivisionMaze, primMaze } from '../Algorithm/pathfindingAlgorithms';\r\nimport './PathFindingVisualizer.css';\r\n\r\nexport default class PathFindingVisualizer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            grid: [],\r\n            FR: 7,\r\n            FC: 31,\r\n            mouseIsPressed: false,\r\n            changingStart: false,\r\n            changingFinish: false,\r\n            visualized: false,\r\n            rendering: false,\r\n            numRow: 17,\r\n            numCol: 37,\r\n            SR: 7,\r\n            SC: 5,\r\n            speed: 'median',\r\n            delays: {'slow': 17, 'median': 7, 'fast': 3},\r\n            currentAlgorithm: -1,\r\n            algorithms: ['BFS', 'Dijkstra', 'A Star', 'DFS'],\r\n            pathfindingAlgorithms: [BFS, dijkstra, AStar, DFS]\r\n        };\r\n        this.visualizePathfinding = this.visualizePathfinding.bind(this);\r\n        this.clearVisualizer = this.clearVisualizer.bind(this);\r\n        this.setAlgorithm = this.setAlgorithm.bind(this);\r\n        this.props.getFunctions(this.visualizePathfinding, this.clearVisualizer, this.setAlgorithm, this.state.algorithms);\r\n    }\r\n\r\n    setAlgorithm(algoId) {\r\n        this.setState({ currentAlgorithm: algoId });\r\n    }\r\n\r\n    isRendering() {\r\n        return this.state.rendering;\r\n    }\r\n\r\n    componentDidMount() {\r\n        const grid = this.initializeGrid(false);\r\n        this.setState({\r\n            grid: grid,\r\n            currentAlgorithm: -1\r\n        })\r\n        this.state.grid = grid;\r\n    }\r\n\r\n    initializeGrid(clearWall) {\r\n        const grid = [];\r\n        for (let row = 0; row < this.state.numRow; row++) {\r\n            const currentRow = [];\r\n            for (let col = 0; col < this.state.numCol; col++) {\r\n                let isW = false;\r\n                const element = document.getElementById(`node-${row}-${col}`);\r\n                if (element && (element.className === 'node node-path' || element.className === 'node node-visited')) {\r\n                    element.className = 'node';\r\n                }\r\n                if (!clearWall && element && element.className === 'node node-wall') {\r\n                    isW = true;\r\n                }\r\n                currentRow.push(this.createNode(row, col, isW));\r\n            }\r\n            grid.push(currentRow);\r\n        }\r\n        return grid;\r\n    }\r\n\r\n    createNode(row, col, isW) {\r\n        return {\r\n            col,\r\n            row,\r\n            isStart: row === this.state.SR && col === this.state.SC,\r\n            isFinish: row === this.state.FR && col === this.state.FC,\r\n            distance: Infinity,\r\n            heuristic: Infinity,\r\n            isVisited: false,\r\n            isWall: isW,\r\n            previousNode: null,\r\n        };\r\n    }\r\n\r\n    handleMouseDown(row, col) {\r\n        if (row === this.state.SR && col === this.state.SC) {\r\n            this.setState({ changingStart: true });\r\n        }\r\n        else if (row === this.state.FR && col === this.state.FC) {\r\n            this.setState({ changingFinish: true });\r\n        }\r\n        else if (!this.state.rendering) {\r\n            this.updateGridWithWall(this.state.grid, row, col);\r\n            this.setState({ mouseIsPressed: true });\r\n            this.clearVisitedAndPath();\r\n        }\r\n    }\r\n\r\n    handleMouseEnter(row, col) {\r\n        if (this.state.mouseIsPressed) {\r\n            this.updateGridWithWall(this.state.grid, row, col);\r\n            this.setState({ mouseIsPressed: true });\r\n        }\r\n\r\n        else if (this.state.changingStart && !(row === this.state.FR && col === this.state.FC)) {\r\n            const start = document.getElementById(`node-${this.state.SR}-${this.state.SC}`);\r\n            if (start) {\r\n                start.className = 'node';\r\n                start.isStart = false;\r\n                this.state.grid[this.state.SR][this.state.SC].isStart = false;\r\n            }\r\n            const newStart = document.getElementById(`node-${row}-${col}`);\r\n            if (newStart) {\r\n                newStart.isStart = true;\r\n                newStart.className = 'node node-start';\r\n                this.state.grid[row][col].isStart = true;\r\n            }\r\n            this.setState({ SR: row, SC: col });\r\n            this.clearVisitedAndPath();\r\n\r\n        }\r\n        else if (this.state.changingFinish && !(row === this.state.SR && col === this.state.SC)) {\r\n            const finish = document.getElementById(`node-${this.state.FR}-${this.state.FC}`);\r\n            if (finish) {\r\n                finish.className = 'node';\r\n                finish.isFinish = false;\r\n                this.state.grid[this.state.FR][this.state.FC].isFinish = false;\r\n            }\r\n            const newFinish = document.getElementById(`node-${row}-${col}`);\r\n            if (newFinish) {\r\n                newFinish.isFinish = true;\r\n                newFinish.className = 'node node-finish';\r\n                this.state.grid[row][col].isFinish = true;\r\n            }\r\n            this.setState({ FR: row, FC: col });\r\n            this.clearVisitedAndPath();\r\n        }\r\n\r\n    }\r\n\r\n    handleMouseUp() {\r\n        this.setState({\r\n            changingStart: false,\r\n            changingFinish: false,\r\n            mouseIsPressed: false\r\n        });\r\n    }\r\n\r\n    updateGridWithWall(grid, row, col) {\r\n        const node = grid[row][col];\r\n        const newNode = {\r\n            ...node,\r\n            isWall: !node.isWall\r\n        }\r\n        grid[row][col] = newNode;\r\n    }\r\n\r\n    visualizePathfinding() {\r\n        if (this.state.currentAlgorithm == -1) return;\r\n        if (this.state.rendering) return;\r\n\r\n        this.setState({ visualized: true, rendering: true });\r\n        this.props.setVisualizerRendering(true);\r\n        let g = this.initializeGrid(false);\r\n        this.setState({\r\n            grid: g\r\n        });\r\n        this.state.grid = g;\r\n        const grid = this.state.grid;\r\n        const start = grid[this.state.SR][this.state.SC];\r\n        const finish = grid[this.state.FR][this.state.FC];\r\n        const visitedInOrder = this.state.pathfindingAlgorithms[this.state.currentAlgorithm](grid, start, finish);\r\n        const shortedPath = getShortestPath(finish);\r\n        for (let i = 0; i < visitedInOrder.length; i++) {\r\n            setTimeout(() => {\r\n                const node = visitedInOrder[i];\r\n                if (!node.isStart && !node.isFinish)\r\n                    document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\r\n            }, this.state.delays[this.state.speed] * i);\r\n        }\r\n\r\n        for (let i = 0; i < shortedPath.length; i++) {\r\n            setTimeout(() => {\r\n                const node = shortedPath[i];\r\n                if (!node.isStart && !node.isFinish)\r\n                    document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-path';\r\n            }, this.state.delays[this.state.speed] * visitedInOrder.length + 50 * i);\r\n\r\n        }\r\n        setTimeout(() => {\r\n            this.setState({ rendering: false });\r\n            this.props.setVisualizerRendering(false);\r\n        }, this.state.delays[this.state.speed] * visitedInOrder.length + 50 * shortedPath.length);\r\n\r\n    }\r\n\r\n    clearVisualizer() {\r\n        if (!this.state.rendering)\r\n            this.setState({ grid: this.initializeGrid(true), visualized: false });\r\n\r\n    }\r\n\r\n    clearVisitedAndPath(){\r\n        for(let row = 0; row < this.state.numRow; row++){\r\n            for(let col = 0; col < this.state.numCol; col++){\r\n                let n = document.getElementById(`node-${row}-${col}`);\r\n                console.log(n);\r\n                if(n && (n.className == 'node node-visited' || n.className == 'node node-path')){\r\n                    n.className = 'node';\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    setSpeed(speed){\r\n        this.setState({speed: speed});\r\n    }\r\n\r\n    render() {\r\n\r\n        const grid = this.state.grid;\r\n\r\n        return (\r\n            <>\r\n                <div className=\"grid\">\r\n                    {grid.map((row, rowId) => {\r\n                        return (\r\n                            <div key={rowId}>\r\n                                {row.map((node, nodeId) => {\r\n                                    const { row, col, isFinish, isStart, isWall } = node;\r\n                                    return (\r\n                                        <Node\r\n                                            key={nodeId}\r\n                                            row={row}\r\n                                            col={col}\r\n                                            isStart={isStart}\r\n                                            isFinish={isFinish}\r\n                                            isWall={isWall}\r\n                                            mouseIsPressed={this.state.mouseIsPressed}\r\n                                            onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                                            onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\r\n                                            onMouseUp={() => this.handleMouseUp()}\r\n                                        ></Node>\r\n                                    )\r\n                                })\r\n                                }\r\n                            </div>\r\n                        );\r\n                    })\r\n                    }\r\n                </div>\r\n                <div class={\"dropdown\"} style={{marginTop: \"10px\"}}>\r\n                        <button class=\"btn btn-outline-dark dropdown-toggle\" type=\"button\" disabled={this.state.rendering} id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" style={{marginRight:\"5px\", height: \"30px\", width: \"150px\" }}>\r\n                            <p style={{ \"margin-top\": \"-5px\" }}>{`Speed: ${this.state.speed}`}</p>\r\n                        </button>\r\n                        <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n                            <li>\r\n                                <button type=\"button\" class=\"btn btn-light navbtn\" style={{height: \"30px\"}} onClick={() => this.setSpeed('slow')}><p style={{ \"margin-top\": \"-5px\" }}>{`slow`}</p></button>\r\n                                <button type=\"button\" class=\"btn btn-light navbtn\" style={{height: \"30px\"}} onClick={() => this.setSpeed('median')}><p style={{ \"margin-top\": \"-5px\" }}>{`median`}</p></button>\r\n                                <button type=\"button\" class=\"btn btn-light navbtn\" style={{height: \"30px\"}} onClick={() => this.setSpeed('fast')}><p style={{ \"margin-top\": \"-5px\" }}>{`fast`}</p></button>\r\n                            </li>\r\n                        </div>\r\n                        <button\r\n                        onClick={() => { \r\n                            primMaze(this.state.grid);\r\n                            this.setState({ finish: false});\r\n                            this.clearVisitedAndPath();\r\n                        }}\r\n                        type=\"button\" class=\"btn btn-outline-dark\"\r\n                        style={{marginLeft: \"5px\", \"height\": \"30px\"}}\r\n                        disabled={this.state.rendering}>\r\n                        <p style={{ \"margin-top\": \"-6px\" }}>generate maze</p>\r\n                        \r\n                    </button>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './Pile.css';\r\n\r\nexport default class Pile extends Component {\r\n    render() {\r\n        \r\n        const {\r\n            val,\r\n            isChanging,\r\n            isPivot,\r\n            finished,\r\n            index,\r\n            size,\r\n            colorSetIndex,\r\n            changingColors = [`rgb(228, 230, 120)`, `rgb(155, 147, 229)`, `rgb(248, 250, 140)`],\r\n            offSet = {'small': 20, 'median': 0, 'large': 0},\r\n            normalColors = [`rgb(200,${(1 - val / 45) * 255 + 50 + offSet[size]}, 255)`, `rgb(250,200, ${(1 - val / 80) * 255 + offSet[size]})`, `rgb( ${(1 - val / 80) * 255 + offSet[size]},200,250)`],\r\n        } = this.props;\r\n\r\n        let extraClassName = '';\r\n        if (isChanging) {\r\n            extraClassName = '-changing';\r\n        }\r\n        if (finished) {\r\n            extraClassName = '-finished';\r\n        }\r\n        let color = extraClassName === '-changing' ? changingColors[colorSetIndex] : normalColors[colorSetIndex];\r\n        if(!this.props.finished && this.props.isPivot) color = 'rgb(240, 190, 149)';\r\n        let lineOff = -20 * this.props.index;\r\n        let heights = {'small': 14, 'median': 10, 'large': 8};\r\n        let indicatorLength = {'small': 420, 'median': 620, 'large': 820};\r\n        return (\r\n            <>\r\n                <div\r\n                    className={'pile' + extraClassName}\r\n                    style={{ height: `${val * heights[this.props.size]}px`, background: color }}\r\n\r\n                >\r\n                    <p className='value'>{val}</p>\r\n                    {!this.props.finished && this.props.isPivot && <svg height=\"100\" width={indicatorLength[size]+100} style={{position:\"absolute\", display:\"flex\", marginTop: \"-31px\", marginLeft: `${lineOff}px`}}>\r\n  <line x1=\"0\" y1=\"0\" x2={indicatorLength[size]} y2=\"0\" style={{stroke:\"grey\", strokeWidth:\"3px\"}}></line>\r\n</svg>}\r\n                </div>\r\n                \r\n            </>\r\n\r\n        );\r\n    }\r\n\r\n}","function swap(piles, a, b) {\r\n    const tempVal = piles[a];\r\n    piles[a] = piles[b];\r\n    piles[b] = tempVal;\r\n}\r\n\r\nfunction selectionSort(piles) {\r\n\r\n    let statesInOrder = [];\r\n    for (let i = 0; i < piles.length - 1; i++) {\r\n        let minId = i;\r\n        for (let j = i + 1; j < piles.length; j++) {\r\n            if (piles[j] < piles[minId]) {\r\n                minId = j;\r\n            }\r\n            const temp = { piles: piles.slice(), changing: [j] };\r\n            statesInOrder.push(temp);\r\n\r\n        }\r\n        swap(piles, minId, i);\r\n        const temp = { piles: piles.slice(), changing: [minId, i] };\r\n        statesInOrder.push(temp);\r\n    }\r\n    return statesInOrder;\r\n}\r\n\r\nfunction bubbleSort(piles) {\r\n    let statesInOrder = [];\r\n    let n = piles.length;\r\n    while (n > 1) {\r\n        let newN = 0;\r\n        for (let i = 1; i < n; i++) {\r\n            if (piles[i - 1] > piles[i]) {\r\n                swap(piles, i - 1, i);\r\n                newN = i;\r\n                const temp = { piles: piles.slice(), changing: [i] };\r\n                statesInOrder.push(temp);\r\n            }\r\n        }\r\n        n = newN;\r\n    }\r\n    return statesInOrder;\r\n}\r\n\r\nfunction insertionSort(piles) {\r\n    let statesInOrder = [];\r\n    for (let i = 1; i < piles.length; i++) {\r\n        for (let j = i; j > 0 && piles[j - 1] > piles[j]; j--) {\r\n            swap(piles, j, j - 1);\r\n            const temp = { piles: piles.slice(), changing: [j - 1] };\r\n            statesInOrder.push(temp);\r\n        }\r\n    }\r\n    console.log(statesInOrder);\r\n    return statesInOrder;\r\n}\r\n\r\nfunction mergeSort(piles) {\r\n    let statesInOrder = [];\r\n    mergeSortHelper(piles, 0, piles.length - 1, statesInOrder);\r\n    return statesInOrder;\r\n}\r\n\r\nfunction mergeSortHelper(piles, start, end, statesInOrder) {\r\n    if (start === end) return;\r\n    const mid = Math.floor((start + end) / 2);\r\n    mergeSortHelper(piles, start, mid, statesInOrder);\r\n    mergeSortHelper(piles, mid + 1, end, statesInOrder);\r\n    merge(piles, start, mid, end, statesInOrder);\r\n}\r\n\r\nfunction merge(piles, start, mid, end, statesInOrder) {\r\n    let k = start, i = start, j = mid + 1;\r\n    let pilesC = piles.slice();\r\n    while (i <= mid && j <= end) {\r\n        //let changing = [i, j, k];\r\n        if (pilesC[i] <= pilesC[j]) {\r\n            piles[k++] = pilesC[i++];\r\n        }\r\n        else {\r\n            piles[k++] = pilesC[j++];\r\n        }\r\n        const temp = { piles: piles.slice(), changing: [i, j, k] };\r\n        statesInOrder.push(temp);\r\n\r\n    }\r\n    while (i <= mid) {\r\n        piles[k++] = pilesC[i++];\r\n        const temp = { piles: piles.slice(), changing: [i, k] };\r\n        statesInOrder.push(temp);\r\n    }\r\n    while (j <= end) {\r\n        piles[k++] = pilesC[j++];\r\n        const temp = { piles: piles.slice(), changing: [j, k] };\r\n        statesInOrder.push(temp);\r\n    }\r\n}\r\n\r\n\r\nfunction quickSort(piles) {\r\n    let statesInOrder = [];\r\n    quickSortHelper(piles, 0, piles.length - 1, statesInOrder);\r\n    return statesInOrder;\r\n}\r\n\r\nfunction quickSortHelper(piles, start, end, statesInOrder) {\r\n    if (start < end) {\r\n        let pivot = partition(piles, start, end, statesInOrder);\r\n        quickSortHelper(piles, start, pivot - 1, statesInOrder);\r\n        quickSortHelper(piles, pivot + 1, end, statesInOrder);\r\n    }\r\n}\r\n\r\nfunction partition(piles, start, end, statesInOrder) {\r\n    let pivot = piles[end];\r\n    let i = start - 1;\r\n    for (let j = start; j <= end - 1; j++) {\r\n        if (piles[j] < pivot) {\r\n            i++;\r\n            swap(piles, i, j);\r\n            const temp = { piles: piles.slice(), changing: [i, j], pivot: pivot};\r\n            if(pivot != piles.length+4) statesInOrder.push(temp);\r\n        }\r\n    }\r\n    swap(piles, i + 1, end);\r\n    const temp = { piles: piles.slice(), changing: [i + 1, end], pivot: pivot};\r\n    if(pivot != piles.length+4) statesInOrder.push(temp);\r\n    return i + 1;\r\n}\r\n\r\nexport { selectionSort, bubbleSort, insertionSort, mergeSort, quickSort };","import React, { Component } from 'react';\r\nimport './SortingVisualizer.css';\r\nimport Pile from './Pile/Pile';\r\nimport { selectionSort, bubbleSort, insertionSort, mergeSort, quickSort } from '../Algorithm/sortingAlgorithms';\r\n\r\nexport default class SortingVisualizer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            piles: [],\r\n            numPiles: 30,\r\n            finished: false,\r\n            maxPile: 80,\r\n            changingPiles: [],\r\n            pileDelayTimes: [30, 40, 40, 80, 80],\r\n            DelayTimesSizeBased: {'fast': [15, 20, 20, 40, 40], 'median': [30, 40, 40, 80, 80], 'slow': [60, 80, 80, 160, 160]},\r\n            colorSetIndex: getRandomInt(0, 3),\r\n            currentAlgorithm: -1,\r\n            descriptions: ['Selection Sort: repeatedly find the minimum element from the unsorted part and append it to the sorted part.', \r\n                           'Bubble Sort: repeatedly swap the adjacent elements if they are in wrong order.',\r\n                           'Insertion Sort: repeatedly place value from the unsorted part at the correct position in the sorted part(by finding the closest left-side element that is smaller than it).',\r\n                           'Merge Sort: divide the array into two halves, sort them recursively using merge sort, and then merge the two halves.',\r\n                           'Quick Sort: choose an element as pivot, arrange the array such that the elements smaller than pivot are on its left and others are on its right, sort the two halves recursively.'],\r\n            unsortedPiles: [],\r\n            speed: \"median\",\r\n            size: \"median\",\r\n            algorithms: ['Selection Sort', 'Bubble Sort', 'Insertion Sort', 'Merge Sort', 'Quick Sort'],\r\n            sortingAlgorithms: [selectionSort, bubbleSort, insertionSort, mergeSort, quickSort]\r\n        };\r\n        this.randomizePiles = this.randomizePiles.bind(this);\r\n        this.visualizeSorting = this.visualizeSorting.bind(this);\r\n        this.setAlgorithm = this.setAlgorithm.bind(this);\r\n        this.props.getFunctions(this.visualizeSorting, this.randomizePiles, this.setAlgorithm, this.state.algorithms);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const piles = this.initializePiles();\r\n        this.setState({\r\n            piles: piles,\r\n        });\r\n        this.setState({ piles: piles, unsortedPiles: piles.slice() });\r\n    }\r\n\r\n    setAlgorithm(algoId) {\r\n        if (this.state.unsortedPiles !== []) {\r\n            this.setState({ finished: false, changingPiles: [], piles: this.state.unsortedPiles, pivot: -1 });\r\n        }\r\n        this.setState({ currentAlgorithm: algoId });\r\n    }\r\n\r\n    initializePiles() {\r\n        let piles = [];\r\n        for (let i = 0; i < this.state.numPiles; i++) {\r\n            piles.push(i + 5);\r\n        }\r\n\r\n        for (let i = 0; i < this.state.numPiles; i++) {\r\n            //swap i and j\r\n            let j = getRandomInt(0, i);\r\n            let temp = piles[i];\r\n            piles[i] = piles[j];\r\n            piles[j] = temp;\r\n        }\r\n        piles.push(this.state.numPiles + 5);\r\n        return piles;\r\n    }\r\n\r\n    visualizeSorting() {\r\n        if (this.state.currentAlgorithm === -1) {\r\n            return;\r\n        }\r\n        if (this.state.rendering) return;\r\n        if (this.state.finished) {\r\n            this.state.finished = false;\r\n            this.state.changingPiles = [];\r\n            this.state.piles = this.state.unsortedPiles;\r\n        }\r\n        this.setState({ rendering: true });\r\n        this.props.setVisualizerRendering(true);\r\n        const piles = this.state.piles.slice();\r\n\r\n        const statesInOrder = this.state.sortingAlgorithms[this.state.currentAlgorithm](piles);\r\n        for (let i = 0; i < statesInOrder.length; i++) {\r\n            const { piles: state, changing: changingPiles, pivot: pivot } = statesInOrder[i];\r\n            setTimeout(() => {\r\n                this.setState({ piles: state, changingPiles: changingPiles, pivot: pivot });\r\n            }, this.state.pileDelayTimes[this.state.currentAlgorithm] * i);\r\n\r\n        }\r\n        setTimeout(() => {\r\n            this.setState({ rendering: false, finished: true });\r\n            this.props.setVisualizerRendering(false);\r\n        }, this.state.pileDelayTimes[this.state.currentAlgorithm] * statesInOrder.length);\r\n    }\r\n\r\n    randomizePiles() {\r\n        if (this.state.rendering) return;\r\n        this.setState({ finished: false, changingPiles: [], colorSetIndex: getRandomInt(0, 3) });\r\n        const piles = this.initializePiles();\r\n        this.setState({ piles: piles, unsortedPiles: piles.slice() });\r\n    }\r\n\r\n    setSpeed(speed) {\r\n        this.setState({ speed: speed, pileDelayTimes: this.state.DelayTimesSizeBased[speed] });\r\n    }\r\n\r\n    setSize(s) {\r\n        if(this.state.size === s) return;\r\n        let sizes = {\"small\": 20, \"median\": 30, \"large\": 40};\r\n        this.setState({ size: s, numPiles: sizes[s] });\r\n        this.state.numPiles = sizes[s];\r\n        const piles = this.initializePiles();\r\n        this.setState({ finished: false, changingPiles: [], piles: piles, unsortedPiles: piles.slice() });\r\n    }\r\n\r\n    render() {\r\n        const piles = this.state.piles;\r\n\r\n        return (\r\n            <>\r\n\r\n                <div className='piles' class=\"container\">\r\n                    {\r\n\r\n                        piles.map((pile, pileId) => {\r\n                            return (\r\n                                <Pile\r\n                                    dummy={pileId === this.state.numPiles}\r\n                                    finished={this.state.finished}\r\n                                    className='pile'\r\n                                    key={pileId}\r\n                                    index={pileId}\r\n                                    val={pile}\r\n                                    size={this.state.size}\r\n                                    isChanging={this.state.changingPiles.indexOf(pileId) !== -1}\r\n                                    isPivot={this.state.pivot == pile}\r\n                                    colorSetIndex={this.state.colorSetIndex}\r\n                                ></Pile>\r\n                            )\r\n                        })\r\n\r\n                    }\r\n\r\n                </div>\r\n                \r\n                <div class=\"d-flex\" style={{marginLeft: \"37%\", marginTop: \"10px\"}}>\r\n                    <div class=\"dropdown 1\">\r\n                        <button class=\"btn btn-outline-dark dropdown-toggle\" type=\"button\" disabled={this.state.rendering} id=\"dropdownMenuSpeed\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" style={{ marginRight: \"5px\", height: \"30px\", width: \"150px\" }}>\r\n                            <p style={{ \"margin-top\": \"-5px\" }}>{`Speed: ${this.state.speed}`}</p>\r\n                        </button>\r\n                        <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuSpeed\">\r\n                            <li>\r\n                                <button type=\"button\" class=\"btn btn-light navbtn\" style={{ height: \"30px\" }} onClick={() => this.setSpeed('slow')}><p style={{ \"margin-top\": \"-5px\" }}>{`slow`}</p></button>\r\n                                <button type=\"button\" class=\"btn btn-light navbtn\" style={{ height: \"30px\" }} onClick={() => this.setSpeed('median')}><p style={{ \"margin-top\": \"-5px\" }}>{`median`}</p></button>\r\n                                <button type=\"button\" class=\"btn btn-light navbtn\" style={{ height: \"30px\" }} onClick={() => this.setSpeed('fast')}><p style={{ \"margin-top\": \"-5px\" }}>{`fast`}</p></button>\r\n                            </li>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"dropdown 1\">\r\n                        <button class=\"btn btn-outline-dark dropdown-toggle\" type=\"button\" disabled={this.state.rendering} id=\"dropdownMenuSize\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" style={{ marginLeft: \"5px\", height: \"30px\", width: \"150px\" }}>\r\n                            <p style={{ \"margin-top\": \"-5px\" }}>{`Size: ${this.state.size}`}</p>\r\n                        </button>\r\n                        <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuSize\">\r\n                            <li>\r\n                                <button type=\"button\" class=\"btn btn-light navbtn\" style={{ height: \"30px\" }} onClick={() => this.setSize('small')}><p style={{ \"margin-top\": \"-5px\" }}>{`small`}</p></button>\r\n                                <button type=\"button\" class=\"btn btn-light navbtn\" style={{ height: \"30px\" }} onClick={() => this.setSize('median')}><p style={{ \"margin-top\": \"-5px\" }}>{`median`}</p></button>\r\n                                <button type=\"button\" class=\"btn btn-light navbtn\" style={{ height: \"30px\" }} onClick={() => this.setSize('large')}><p style={{ \"margin-top\": \"-5px\" }}>{`large`}</p></button>\r\n                            </li>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <h6 class='algoDescription'>{this.state.currentAlgorithm === -1 ? \"Welcome to Sorting. Select an algorithm first.\" : this.state.descriptions[this.state.currentAlgorithm]}</h6>\r\n\r\n            </>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nfunction getRandomInt(min, range) {\r\n    return Math.floor(Math.random() * range) + min;\r\n}","class Perceptron {\r\n    constructor(n, c) {\r\n        // Array of weights for inputs\r\n        this.weights = new Array(n);\r\n        // Start with random weights\r\n        for (let i = 0; i < this.weights.length; i++) {\r\n            this.weights[i] = random(-1, 1);\r\n        }\r\n        this.c = c; // learning rate/constant\r\n    }\r\n\r\n    // Function to train the Perceptron\r\n    // Weights are adjusted based on \"desired\" answer\r\n    train(inputs, desired) {\r\n        // Guess the result\r\n        let guess = this.feedforward(inputs);\r\n        // Compute the factor for changing the weight based on the error\r\n        // Error = desired output - guessed output\r\n        // Note this can only be 0, -2, or 2\r\n        // Multiply by learning constant\r\n        let error = desired - guess;\r\n        // Adjust weights based on weightChange * input\r\n        for (let i = 0; i < this.weights.length; i++) {\r\n            this.weights[i] += this.c * error * inputs[i];\r\n        }\r\n    }\r\n\r\n    // Guess -1 or 1 based on input values\r\n    feedforward(inputs) {\r\n        // Sum all values\r\n        function sleep (time) {\r\n            return new Promise((resolve) => setTimeout(resolve, time));\r\n        }\r\n        let sum = 0;\r\n        for (let i = 0; i < this.weights.length; i++) {\r\n            sum += inputs[i] * this.weights[i];\r\n        }\r\n        return this.activate(sum);\r\n        \r\n    }\r\n\r\n    activate(sum) {\r\n        if (sum > 0) return 1;\r\n        else return -1;\r\n    }\r\n\r\n    // Return weights\r\n    getWeights() {\r\n        return this.weights;\r\n    }\r\n}\r\n\r\nfunction random(min, max) {\r\n    return Math.random() * (max - min) + min;\r\n}\r\n\r\nexport {Perceptron, random};","import React, { Component } from 'react';\r\nimport Konva from 'react-konva';\r\nimport { Stage, Layer, Rect, Line, Circle, Text } from 'react-konva';\r\nimport { Perceptron, random } from './Perceptron';\r\nimport './PtronVisualizer.css';\r\n\r\nexport default class PtronVisualizer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            training: new Array(1002),\r\n            rendering: false,\r\n            min: -1,\r\n            max: 1,\r\n            width: 500,\r\n            height: 500,\r\n            count: 0,\r\n            ptron: null,\r\n            xOff: 50,\r\n            yOff: 100,\r\n            M: 0.4,\r\n            B: 0.3,\r\n        }\r\n        this.resetVisualizer = this.resetVisualizer.bind(this);\r\n        this.startVisualizer = this.startVisualizer.bind(this);\r\n        this.props.getFunctions(this.startVisualizer, this.resetVisualizer);\r\n    }\r\n\r\n    f(x) {\r\n        return this.state.M * x + this.state.B;\r\n    }\r\n\r\n    map(n, as, ae, bs, be) {\r\n        return ((n - as) / (ae - as)) * (be - bs) + bs;\r\n    }\r\n\r\n    initialize() {\r\n        this.state.ptron = new Perceptron(3, 0.006);\r\n        for (let i = 0; i < this.state.training.length; i++) {\r\n            let x = random(this.state.min, this.state.max);\r\n            let y = random(this.state.min, this.state.max);\r\n            let answer = 1;\r\n            if (y < this.f(x)) answer = -1;\r\n            this.state.training[i] = {\r\n                input: [x, y, 1],\r\n                output: answer\r\n            }\r\n        }\r\n    }\r\n\r\n    resetVisualizer() {\r\n        if (this.state.rendering) {\r\n            return;\r\n        }\r\n        this.setState({ count: 0 });\r\n        this.state.count = 0;\r\n    }\r\n\r\n    startVisualizer() {\r\n        this.setState({ rendering: true });\r\n        for (let i = 0; i < this.state.training.length - 1; i++) {\r\n            setTimeout(\r\n                () => {\r\n                    this.setState({ count: i });\r\n                    this.state.count = i;\r\n                }\r\n                , 25 * i);\r\n        }\r\n        setTimeout(() => {\r\n            this.setState({ rendering: false });\r\n        }, 25 * this.state.training.length)\r\n\r\n    }\r\n\r\n    render() {\r\n        if (this.state.count === 0) {\r\n            this.initialize();\r\n        }\r\n        let min = this.state.min;\r\n        let max = this.state.max;\r\n        let ptron = this.state.ptron;\r\n        let x1 = this.map(min, min, max, 0, this.state.width);\r\n        let y1 = this.map(this.f(min), min, max, this.state.height, 0);\r\n        let x2 = this.map(max, min, max, 0, this.state.width);\r\n        let y2 = this.map(this.f(max), min, max, this.state.height, 0);\r\n\r\n        let weights = ptron.getWeights();\r\n        let xx1 = min;\r\n        let yy1 = (-weights[2] - weights[0] * xx1) / weights[1];\r\n        let xx2 = max;\r\n        let yy2 = (-weights[2] - weights[0] * xx2) / weights[1];\r\n\r\n        xx1 = this.map(xx1, min, max, 0, this.state.width);\r\n        yy1 = this.map(yy1, min, max, this.state.height, 0);\r\n        xx2 = this.map(xx2, min, max, 0, this.state.width);\r\n        yy2 = this.map(yy2, min, max, this.state.height, 0);\r\n        ptron.train(this.state.training[this.state.count].input, this.state.training[this.state.count].output);\r\n\r\n        let points = []\r\n\r\n        for (let i = 0; i < this.state.count; i++) {\r\n            let guess = ptron.feedforward(this.state.training[i].input);\r\n            let x = this.map(this.state.training[i].input[0], min, max, 0, this.state.width);\r\n            let y = this.map(this.state.training[i].input[1], min, max, this.state.height, 0);\r\n            if(i%4>0) points.push({ x: x, y: y, fill: guess < 0 });\r\n        }\r\n        let xOff = this.state.xOff;\r\n        let yOff = this.state.yOff;\r\n        let aM = -weights[0] / weights[1];\r\n        let aB = -weights[2] / weights[1];\r\n        let eM = aM - this.state.M;\r\n        let eB = aB - this.state.B;\r\n        let textComponet;\r\n        if (this.state.count != 0) {\r\n            textComponet = <><Text\r\n                x={550}\r\n                y={50}\r\n                text='Function Form: Y = M * X + B'\r\n                fontFamily='Calibri'\r\n                fill='black'\r\n                fontSize={25}\r\n            ></Text>\r\n                <Text\r\n                    x={550}\r\n                    y={80}\r\n                    text={`Original Function: M = ${this.state.M} B = ${this.state.B}`}\r\n                    fontFamily='Calibri'\r\n                    fill='black'\r\n                    fontSize={25}\r\n                ></Text>\r\n                <Text\r\n                    x={550}\r\n                    y={135}\r\n                    text={`Approximation:\\nM = ${aM}\\nB = ${aB}`}\r\n                    fontFamily='Calibri'\r\n                    fill='black'\r\n                    fontSize={25}\r\n                ></Text>\r\n                <Text\r\n                    x={550}\r\n                    y={240}\r\n                    text={`Error:\\nM: ${eM}\\nB:${eB}`}\r\n                    fontFamily='Calibri'\r\n                    fill='red'\r\n                    fontSize={25}\r\n                ></Text>\r\n                <Text\r\n                    x={550}\r\n                    y={340}\r\n                    text={`Count: ${this.state.count}`}\r\n                    fontFamily='Calibri'\r\n                    fill='grey'\r\n                    fontSize={25}\r\n                ></Text>\r\n                </>\r\n        }\r\n        else {\r\n            textComponet = <><Text\r\n                x={550}\r\n                y={50}\r\n                text=''\r\n                fontFamily='Calibri'\r\n                fill='black'\r\n                fontSize={25}\r\n            ></Text>\r\n                <Text\r\n                    x={550}\r\n                    y={80}\r\n                    text={`Original Function: M = ${this.state.M} B = ${this.state.B}`}\r\n                    fontFamily='Calibri'\r\n                    fill='black'\r\n                    fontSize={25}\r\n                ></Text>\r\n                <Text\r\n                    x={550}\r\n                    y={135}\r\n                    text={`Approximation:\\nM = ${aM}\\nB = ${aB}`}\r\n                    fontFamily='Calibri'\r\n                    fill='black'\r\n                    fontSize={25}\r\n                ></Text>\r\n                <Text\r\n                    x={550}\r\n                    y={240}\r\n                    text={`Error:\\nM: ${eM}\\nB:${eB}`}\r\n                    fontFamily='Calibri'\r\n                    fill='red'\r\n                    fontSize={25}\r\n                ></Text>\r\n                <Text\r\n                    x={550}\r\n                    y={340}\r\n                    text={`Count: ${this.state.count}`}\r\n                    fontFamily='Calibri'\r\n                    fill='grey'\r\n                    fontSize={25}\r\n                ></Text>\r\n                </>\r\n        }\r\n        let circles = points.map((point, pointId) => {\r\n            return (<Circle\r\n                key={pointId}\r\n                x={point.x + 0}\r\n                y={point.y + 0}\r\n                stroke={'black'}\r\n                radius={3}\r\n                opacity={0.7}\r\n                fill={point.fill ? 'black' : 'white'}\r\n            ></Circle>)}\r\n        )\r\n        this.state.all = (\r\n            <>\r\n                <Stage\r\n                    width={500 * 2}\r\n                    height={500 + 1}\r\n                    className='ptron-stage'\r\n                    id='stage'\r\n                >\r\n                    <Layer name=\"layer\" ref={ref => (this.state.layer = ref)}>\r\n                        <Line points={[0, 0, 500, 0]} stroke={'black'} ></Line>\r\n                        <Line points={[0, 0, 0, 0 + 500]} stroke={'black'}></Line>\r\n                        <Line points={[0, 0 + 500, 500 + 0, 0 + 500]} stroke={'black'} ></Line>\r\n                        <Line points={[500 + 0, 0, 500 + 0, 0 + 500]} stroke={'black'} strokeWidth={1}></Line>\r\n                        <Line\r\n                            points={[x1 + 0, 0 + y1, x2 + 0, 0 + y2]}\r\n                            stroke={'red'}\r\n                            strokeWidth={1}>\r\n                        </Line>\r\n                        <Line\r\n                            points={[xx1 + 0, 0 + yy1, xx2 + 0, 0 + yy2]}\r\n                            stroke={'blue'}\r\n                            strokeWidth={this.state.count > 0 ? 1 : 0}>\r\n                        </Line>\r\n                        {circles}\r\n                        {textComponet}\r\n                    </Layer>\r\n                </Stage>\r\n            </>\r\n        );\r\n        return this.state.all;\r\n    }\r\n\r\n}\r\n","\r\nfunction flipCoin(p) {\r\n    return Math.random() < p;\r\n}\r\n\r\nfunction distance(a, b) {\r\n    let { x: ax, y: ay } = a;\r\n    let { x: bx, y: by } = b;\r\n    return Math.sqrt(((ax - bx) * (ax - bx) + (ay - by) * (ay - by)));\r\n}\r\n\r\nclass PongAgent {\r\n    constructor(speed, discount, epsilon, alpha) {\r\n        this.weights = {\r\n            \"min_dis_to_dot\": 0,\r\n            \"dis_to_panel\": 0,\r\n            \"num_dots\": 0,\r\n        };\r\n        this.discount = discount;\r\n        this.epsilon = epsilon;\r\n        this.alpha = alpha;\r\n        this.speed = speed;\r\n        this.featureList = [\"min_dis_to_dot\", \"dis_to_panel\", \"num_dots\"]\r\n    }\r\n\r\n    getMove(action) {\r\n        return action * this.speed;\r\n    }\r\n\r\n    minDisToDot(x, y, dots) {\r\n        let minDis = Infinity;\r\n        for (const dot of dots) {\r\n            const d = distance({ x: x, y: y }, dot);\r\n            if (d < minDis) {\r\n                minDis = d;\r\n            }\r\n        }\r\n        return minDis;\r\n    }\r\n\r\n    getFeatures(state, action) {\r\n        let { dots: dots, x: x, y: y, px: px, vx: vx, vy: vy, terminal: terminal } = state;\r\n        //console.log(px);\r\n        px = px + this.getMove(action) + 50;\r\n        //console.log(px, this.getMove(action));\r\n        let features = {\r\n            \"min_dis_to_dot\": 0,\r\n            \"dis_to_panel\": 0,\r\n            \"num_dots\": 0,\r\n        };\r\n        features[\"min_dis_to_dot\"] = this.minDisToDot(x, y, dots) / Math.sqrt(600 * 600 + 550 * 550);\r\n        features[\"dis_to_panel\"] = Math.abs(x - px) / 600;\r\n        features[\"num_dots\"] = dots.length / 5;\r\n        return features;\r\n    }\r\n\r\n    getQ(state, action) {\r\n        if (!state) {\r\n            return 0;\r\n        }\r\n        let result = 0;\r\n        const features = this.getFeatures(state, action)\r\n        ////\r\n        for (const feature of this.featureList) {\r\n            result += this.weights[feature] * features[feature];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    update(state, action, nextState, reward) {\r\n        if (!action) {\r\n            return;\r\n        }\r\n        const features = this.getFeatures(state, action)\r\n        const diff = reward + this.discount * this.getValue(nextState) - this.getQ(state, action);\r\n        /////\r\n        //console.log(this.weights);\r\n        for (const feature of this.featureList) {\r\n            this.weights[feature] += this.alpha * diff * features[feature];\r\n        }\r\n    }\r\n\r\n    setWeights(weights) {\r\n        this.weights = weights;\r\n    }\r\n\r\n    actions() {\r\n        return [-1, 0, 1];\r\n    }\r\n\r\n    getAction(state) {\r\n        if (state[\"terminal\"] === true) return null;\r\n        const curActions = this.actions();\r\n\r\n        if (flipCoin(this.epsilon)) {\r\n            const action = curActions[randomSelect(curActions)];\r\n            return action;\r\n        }\r\n        else {\r\n            return this.getPolicy(state);\r\n        }\r\n\r\n    }\r\n\r\n    getPolicy(state) {\r\n        const curActions = this.actions();\r\n        let reAction = null;\r\n        let maxQ = -Infinity;\r\n        for (const a of curActions) {\r\n            if (this.getQ(state, a) > maxQ) {\r\n                maxQ = this.getQ(state, a);\r\n                reAction = a;\r\n            }\r\n            else if (this.getQ(state, a) === maxQ) {\r\n                reAction = randomSelect([a, reAction]);\r\n            }\r\n        }\r\n        return reAction;\r\n    }\r\n\r\n    getValue(state) {\r\n        return this.getQ(state, this.getPolicy(state));\r\n    }\r\n}\r\n\r\nfunction randomInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction randomSelect(path) {\r\n    return randomInt(0, path.length - 1);\r\n}\r\n\r\nexport default PongAgent;","import React, { Component } from 'react';\r\nimport { Stage, Layer, Rect, Line, Konva, Circle, Text } from 'react-konva';\r\nimport PongAgent from \"./PongAgent.js\";\r\nimport \"./PongVisualizer.css\";\r\n/*\r\nThis section is a simple pong game controlled by Apporximate Q Learning Agent\r\n*/\r\nexport default class PongVisualizer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dots: [],\r\n            rendering: true,\r\n            width: 600,\r\n            height: 500,\r\n            x: null,\r\n            y: null,\r\n            r: 15,\r\n            vx: 0,\r\n            vy: 0,\r\n            ballSpeed: 3,\r\n            panelx: 0,\r\n            panely: 480,\r\n            panelSpeed: 3,\r\n            ballInitialized: false,\r\n            framecount: 0,\r\n            score: 0,\r\n            pressedLeft: false,\r\n            pressedRight: false,\r\n            humanMode: false,\r\n            finished: false,\r\n            gameCount: -1,\r\n            agent: new PongAgent(3, 0.9, 0.2, 0.2),\r\n            notStarted: true,\r\n        }\r\n        this.setReleased = this.setReleased.bind(this);\r\n        this.setPressed = this.setPressed.bind(this);\r\n        this.componentDidMount = this.componentDidMount.bind(this);\r\n        if (this.state.humanMode) {\r\n            document.addEventListener('keydown', (evt) => { this.setPressed(evt) });\r\n            document.addEventListener('keyup', (evt) => { this.setReleased(evt) });\r\n        }\r\n        this.resetVisualizer = this.resetVisualizer.bind(this);\r\n        this.startVisualizer = this.startVisualizer.bind(this);\r\n\r\n        this.props.getFunctions(this.startVisualizer, this.resetVisualizer);\r\n\r\n    }\r\n\r\n    startVisualizer() {\r\n        this.setState({ notStarted: false });\r\n        this.setState({\r\n            rendering: false,\r\n            ballInitialized: false,\r\n            framecount: 0,\r\n            score: 0,\r\n            finished: false,\r\n            gameCount: 0,\r\n            agent: new PongAgent(3, 0.9, 0.2, 0.2),\r\n        });\r\n        //this.props.setVisualizerRendering(true);\r\n        this.componentDidMount();\r\n    }\r\n    resetVisualizer() {\r\n        this.setState({\r\n            rendering: false,\r\n            ballInitialized: false,\r\n            framecount: 0,\r\n            score: 0,\r\n            finished: false,\r\n            gameCount: 0,\r\n            notStarted: true,\r\n            agent: new PongAgent(3, 0.9, 0.2, 0.2),\r\n        });\r\n        this.componentDidMount();\r\n    }\r\n\r\n    setPressed(evt) {\r\n        if (evt.keyCode === 37) {\r\n            this.setState({ pressedLeft: true });\r\n            this.state.pressedLeft = true;\r\n        }\r\n        if (evt.keyCode === 39) {\r\n            this.setState({ pressedRight: true });\r\n            this.state.pressedRight = true\r\n        }\r\n    }\r\n\r\n    setReleased(evt) {\r\n        if (evt.keyCode == 37) {\r\n            this.setState({ pressedLeft: false });\r\n            this.state.pressedLeft = false;\r\n        }\r\n        if (evt.keyCode == 39) {\r\n            this.setState({ pressedRight: false });\r\n            this.state.pressedRight = false;\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.initialize();\r\n    }\r\n\r\n    initialize() {\r\n        let speed = this.state.ballSpeed;\r\n        let ox = randomInt(200, 480);\r\n        let oy = 200;\r\n        let ovx = [speed, -speed, 1.2 * speed, -1.2 * speed, 0.8 * speed, -0.8 * speed][randomInt(0, 5)];\r\n        let ovy = speed;\r\n        this.setState({\r\n            x: ox,\r\n            y: oy,\r\n            vx: ovx,\r\n            vy: ovy,\r\n            score: 0,\r\n            panelx: 0,\r\n            storedWeights: {},\r\n            dots: [{ x: 100, y: 100 }, { x: 200, y: 100 }, { x: 300, y: 100 }, { x: 400, y: 100 }, { x: 500, y: 100 }],\r\n            gameCount: this.state.gameCount + 1\r\n        });\r\n        this.state.x = ox;\r\n        this.state.y = oy;\r\n        this.state.vx = ovx;\r\n        this.state.vy = ovy;\r\n\r\n    }\r\n\r\n    getState() {\r\n        const { dots: dots, x: x, y: y, panelx: px, vx: vx, vy: vy } = this.state;\r\n        return { dots: dots, x: x, y: y, px: px, vx: vx, vy: vy, terminal: this.state.score === 500 || this.state.finished };\r\n    }\r\n\r\n    updatePanel(action) {\r\n        if (this.state.finished) return;\r\n        if (this.state.humanMode) {\r\n            if (this.state.pressedLeft && this.pressedRight) {\r\n                return;\r\n            }\r\n            if (this.state.pressedLeft) {\r\n                this.movePanel(-1);\r\n            }\r\n            else if (this.state.pressedRight) {\r\n                this.movePanel(1);\r\n            }\r\n        }\r\n        else {\r\n            //console.log(action);\r\n            this.movePanel(action);\r\n        }\r\n    }\r\n\r\n    updateBall() {\r\n        if (this.state.finished) return;\r\n        let { x: x, y: y, r: r, vx: vx, vy: vy, panelx: panelx } = this.state;\r\n        //console.log(x, y, vx, vy);\r\n        if (x == 0 && y == 0) return;\r\n        x = x + vx;\r\n        y = y + vy;\r\n        if (x > this.state.width - r - 5 || x < r + 5) {\r\n            vx = -vx;\r\n        }\r\n        if (y < r + 5) {\r\n            vy = -vy;\r\n        }\r\n        if (y > this.state.panely - r - 5 && y > this.state.panely - r + 5 && Math.abs(panelx - x + 50) < 50) {\r\n            vy = vy > 0 ? -vy : vy\r\n        }\r\n        else if (y > this.state.height - r && Math.abs(panelx - x + 50) > 50) {\r\n            this.setState({ score: this.state.score - 1000 });\r\n            this.initialize();\r\n            return false;\r\n        }\r\n        this.setState({\r\n            x: x,\r\n            y: y,\r\n            vx: vx,\r\n            vy: vy\r\n        });\r\n        this.state.x = x;\r\n        this.state.y = y;\r\n        this.state.vx = vx;\r\n        this.state.vy = vy;\r\n\r\n        return true;\r\n    }\r\n\r\n    updateDots() {\r\n        if (this.state.finished) return;\r\n        let score = this.state.score;\r\n        for (let i = 0; i < this.state.dots.length; i++) {\r\n            if (distance(this.state.dots[i], { x: this.state.x, y: this.state.y }) < this.state.r) {\r\n                this.state.dots.splice(i, 1);\r\n                score += 100;\r\n            }\r\n        }\r\n        this.setState({ score: score });\r\n    }\r\n\r\n    movePanel(action) {\r\n        if (this.state.finished) return;\r\n        let panelx = this.state.panelx;\r\n        let panelSpeed = this.state.panelSpeed;\r\n        if (action === -1) {\r\n            panelx = panelx - panelSpeed;\r\n        }\r\n        else if (action === 1) {\r\n            panelx = panelx + panelSpeed;\r\n        }\r\n        this.setState({ panelx: Math.min(this.state.width - 100, Math.max(0, panelx)) })\r\n\r\n    }\r\n\r\n    render() {\r\n        if (this.state.notStarted) {\r\n            return (\r\n                <>\r\n                <Stage\r\n                        width={this.state.width}\r\n                        height={this.state.height}\r\n                        className='pong-stage-notstarted'\r\n                        id='pong stage'\r\n                    >\r\n                        <Layer>\r\n                            <Rect width={this.state.width} height={this.state.height} stroke=\"black\" fill=\"black\"></Rect>\r\n                            <Text\r\n                                x={200}\r\n                                y={200}\r\n                                text={`Press`}\r\n                                fontFamily='Calibri'\r\n                                fill='white'\r\n                                fontSize={30}\r\n                            ></Text>\r\n                            <Text\r\n                                x={275}\r\n                                y={200}\r\n                                text={`go`}\r\n                                fontFamily='Calibri'\r\n                                fill={this.state.goMouseEnter ? 'rgb(142, 228, 213)':'white'}\r\n                                fontSize={30}\r\n                                onClick={\r\n                                    ()=>{this.setState({notStarted:false})}\r\n                                }\r\n                                onMouseEnter={\r\n                                    ()=>{this.setState({goMouseEnter:true})}\r\n                                }\r\n                                onMouseLeave={\r\n                                    ()=>{this.setState({goMouseEnter:false})}\r\n                                }\r\n                            ></Text>\r\n                            <Text\r\n                                x={315}\r\n                                y={200}\r\n                                text={`to start.`}\r\n                                fontFamily='Calibri'\r\n                                fill='white'\r\n                                fontSize={30}\r\n                            ></Text>\r\n                        </Layer>\r\n                        \r\n                    </Stage>\r\n                    <div class=\"pongDescription\">\r\n                        <h4 style={{ marginTop: \"0px\", marginLeft: \"650px\", \"text-align\": \"left\", fontFamily: \"monospace\" }}>\r\n                            <br /><br /><br /><br />\r\n                            This is a simple illustration of Reinforcement Learning, \"Apporixmate Q Learning\" specifically.<br/><br/>\r\n                            \r\n                            Our agent is given \"vision\" to current distance from the panel to the ball, distance from the\r\n                            ball to the nearest dot, and the number of dots remaining. The agent may try some random moves initially,\r\n                            and get \"rewards\"(positive score) and \"punishments\"(negative score) when eating the dots and dying.<br/><br/>\r\n\r\n                            After some trials, our agent would appear to know that bouncing the ball back would eventually lead it to \"rewards\", \r\n                            and manage to do that to finally win the game (eating all 5 dots).\r\n                        </h4>\r\n                    </div>\r\n                    </>\r\n            );\r\n        }\r\n        let { \"min_dis_to_dot\": w1,\r\n            \"dis_to_panel\": w2,\r\n            \"num_dots\": w3 } = this.state.agent.weights;\r\n        if (!this.notStarted && this.state.score !== 500 && !this.state.finished) {\r\n            setTimeout(() => {\r\n                let agent = this.state.agent;\r\n                if (this.state.gameCount > 10) agent.training = false;\r\n                const state = this.getState();\r\n                const action = agent.getAction(state);\r\n                //console.log(action, agent.weights);\r\n                const curScore = this.state.score;\r\n                const curGameCount = this.state.gameCount;\r\n\r\n                this.updateBall();\r\n                this.updateDots();\r\n                this.updatePanel(action);\r\n\r\n                const nextState = this.getState();\r\n                const reward = 10 + this.state.score - curScore + (-1000) * (this.state.gameCount - curGameCount);\r\n                agent.update(state, action, nextState, reward);\r\n\r\n                if (this.state.score === 500) {\r\n                    this.setState({ finished: true });\r\n                }\r\n                this.state.framecount += 1;\r\n\r\n            }, 10 * this.state.framecount);\r\n            if (w1 !== NaN && !this.state.finished) {\r\n                this.state.storedWeights = {\r\n                    \"min_dis_to_dot\": w1,\r\n                    \"dis_to_panel\": w2,\r\n                    \"num_dots\": w3\r\n                };\r\n            }\r\n        }\r\n        const { x: x, y: y } = this.state;\r\n        const dots = this.state.dots;\r\n\r\n\r\n        if (this.state.finished) {\r\n            let { \"min_dis_to_dot\": w1,\r\n                \"dis_to_panel\": w2,\r\n                \"num_dots\": w3 } = this.state.storedWeights;\r\n            if (this.state.rendering) {\r\n                this.props.setVisualizerRendering(false);\r\n                this.state.rendering = false;\r\n            }\r\n            return (\r\n                <>\r\n                    <Stage\r\n                        width={this.state.width}\r\n                        height={this.state.height}\r\n                        className='pong-stage'\r\n                        id='pong stage'\r\n                    >\r\n                        <Layer>\r\n                            <Rect width={this.state.width} height={this.state.height} stroke=\"black\" fill=\"black\"></Rect>\r\n                            <Text\r\n                                x={250}\r\n                                y={200}\r\n                                text={`Win!`}\r\n                                fontFamily='Calibri'\r\n                                fill='white'\r\n                                fontSize={50}\r\n                            ></Text>\r\n                        </Layer>\r\n                    </Stage>\r\n                    <div>\r\n                        <h4 style={{ marginTop: \"0px\", marginLeft: \"700px\", \"text-align\": \"left\", fontFamily: \"monospace\" }}>\r\n                            <br /><br /><br /><br />\r\n                            {\"Your agent's weights:\"}<br />\r\n                            <div class=\"w-text\">\r\n                                <p >{`w1: min distance to dot:`}<br /><p class=\"num\">{w1}</p></p>\r\n                                <p>{`w2: distance to between the ball and the panel:`}<br /><p class=\"num\">{w2}</p></p>\r\n                                <p>{`w3: number of dots remaining:`}<br /><p class=\"num\">{w3}</p></p></div>\r\n                        </h4>\r\n                    </div></>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <div>\r\n                    <Stage\r\n                        width={this.state.width}\r\n                        height={this.state.height}\r\n                        className='pong-stage'\r\n                        id='pong stage'\r\n                    >\r\n                        <Layer>\r\n                            <Rect width={this.state.width} height={this.state.height} stroke=\"black\" fill=\"black\"></Rect>\r\n\r\n                            {dots.map((dot, dotId) => {\r\n                                return (\r\n                                    <Circle\r\n                                        key={dotId}\r\n                                        x={dot[\"x\"]}\r\n                                        y={dot[\"y\"]}\r\n                                        stroke={'white'}\r\n                                        fill={\"white\"}\r\n                                        radius={5}\r\n                                    ></Circle>)\r\n                            })\r\n                            }\r\n                            <Circle\r\n                                x={x}\r\n                                y={y}\r\n                                radius={this.state.r}\r\n                                stroke={'white'}\r\n                                fill={\"white\"}>\r\n                            </Circle>\r\n                            <Rect x={this.state.panelx} y={this.state.panely} width={100} height={10} stroke={'white'}\r\n                                fill={\"white\"}></Rect>\r\n                            <Text\r\n                                x={10}\r\n                                y={15}\r\n                                text={`Score: ${this.state.score}`}\r\n                                fontFamily='Calibri'\r\n                                fill='white'\r\n                                fontSize={25}\r\n                            ></Text>\r\n                            {/*\r\n                            <Text\r\n                                x={480}\r\n                                y={15}\r\n                                text={`Game: ${this.state.gameCount}`}\r\n                                fontFamily='Calibri'\r\n                                fill='white'\r\n                                fontSize={25}\r\n                            ></Text>*/}\r\n                        </Layer>\r\n                    </Stage></div>\r\n                <div>\r\n                    <h4 style={{\r\n                        marginTop: \"0px\", marginLeft: \"700px\", \"text-align\": \"left\", fontFamily: \"monospace\", fontSize: \"25px\"\r\n                    }}>\r\n                        <br /><br /><br /><br />\r\n                        {\"Your agent's weights:\"}<br />\r\n                        <div class=\"w-text\">\r\n                            <p >{`w1: min distance to dot:`}<br /><p class=\"num\">{w1}</p></p>\r\n                            <p>{`w2: distance to between the ball and the panel:`}<br /><p class=\"num\">{w2}</p></p>\r\n                            <p>{`w3: number of dots remaining:`}<br /><p class=\"num\">{w3}</p></p></div>\r\n                    </h4>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nfunction randomInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction distance(a, b) {\r\n    let { x: ax, y: ay } = a;\r\n    let { x: bx, y: by } = b;\r\n    return Math.sqrt(((ax - bx) * (ax - bx) + (ay - by) * (ay - by)));\r\n}\r\n\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}","import {checkWinner} from './ConnectFour';\r\n\r\nclass MinimaxAgent {\r\n    constructor(depth, humanPlayer) {\r\n        this.depth = depth;\r\n        if(humanPlayer === 0){\r\n            this.aiPiece = \"p2\";\r\n            this.humanPiece = \"p1\";\r\n        }\r\n        else{\r\n            this.aiPiece = \"p1\";\r\n            this.humanPiece = \"p2\";\r\n        }\r\n        //console.log(this.depth, this.humanPiece);\r\n        //this.getAction(board);\r\n    }\r\n\r\n    getActions(board) {\r\n        let actions = [];\r\n        for (let index = 0; index < board.length; index++) {\r\n            if (board[index][1] === null) {\r\n                actions.push(index);\r\n            }\r\n        }\r\n        return actions;\r\n    }\r\n\r\n    getAction(board) {\r\n        let actions = this.getActions(board);\r\n        let maxVal = -Infinity;\r\n        let maxValAction = null;\r\n        board = board.map((a) => a.slice());\r\n        for (const action of actions) {\r\n            const boardCopy = board.map((a) => a.slice());\r\n            let val = this.minimax(this.tryMove(action, boardCopy, this.aiPiece), false, -Infinity, Infinity, this.depth);\r\n            if (maxVal < val || maxValAction === null) {\r\n                maxVal = val;\r\n                maxValAction = action;\r\n            }\r\n            if (maxVal == val && action === 3){\r\n                maxValAction = action;\r\n            }\r\n            //console.log(action, val, maxVal, maxValAction);\r\n        }\r\n        return maxValAction;\r\n    }\r\n\r\n    tryMove(colId, board, val) {\r\n        let newCol = board[colId].reverse();\r\n        newCol[newCol.indexOf(null)] = val;\r\n        newCol.reverse();\r\n        return board;\r\n    }\r\n\r\n    count(four, tar) {\r\n        let count = 0;\r\n        for (const each of four) {\r\n            if (each === tar) {\r\n                count++;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    scoreFour(a, b, c, d) {\r\n        const four = [a, b, c, d];\r\n        const count1 = this.count(four, this.humanPiece);\r\n        const countN = this.count(four, null);\r\n        const count2 = this.count(four, this.aiPiece);\r\n\r\n        if (count1 === 2 && countN === 2) {\r\n            return {sc: -500, three: 0};\r\n        }\r\n        if (count1 === 3 && countN === 1) {\r\n            return {sc: -1000, three: -1};\r\n        }\r\n        \r\n        if (count1 === 4) {\r\n            return {sc: -1000000, three: 0};\r\n        }\r\n        if (count2 === 4) {\r\n            return {sc: 900000, three: 0};\r\n        }\r\n\r\n        if(count2 === 3 && countN==0){\r\n            return {sc: 0, three: 1};\r\n        }\r\n        if(count1 === 3){\r\n            return {sc: 0, three: -1};\r\n        }\r\n        return {sc: count2, three: 0};\r\n        \r\n    }\r\n\r\n    scoreFour2(a, b, c, d) {\r\n        const four = [a, b, c, d];\r\n        const count1 = this.count(four, this.humanPiece);\r\n        const countN = this.count(four, null);\r\n        const count2 = this.count(four, this.aiPiece);\r\n        if(countN === 4 || (count1 > 0 && count2 > 0)) return {sc:0, three:0};\r\n        if(count1 === 4){\r\n            return {sc: -Infinity, three: -1};\r\n        } \r\n        if(count2 === 4){\r\n            return {sc: Infinity, three: 1};\r\n        } \r\n        if(count1 === 0){\r\n            return {sc: Math.pow(10*count2, count2), three: count2 >= 3 ? 1 : 0};\r\n        }\r\n        if(count2 === 0){\r\n            return {sc: -Math.pow(10*count1, count1), three: count1 >= 3 ? -1 : 0};\r\n        }\r\n        return {sc: 0, three: 0};\r\n    }\r\n\r\n    getScore(board) {\r\n        let score = 0;\r\n        //score += Math.pow(5 * this.count(board[3], this.aiPiece), this.count(board[3], this.aiPiece));\r\n        let threes_one = []\r\n        let threes_two = []\r\n        for (let c = 0; c < 7; c++) {\r\n            for (let r = 1; r < 4; r++) {\r\n                let {sc:sc, three:three} = this.scoreFour2(board[c][r], board[c][r + 1], board[c][r + 2], board[c][r + 3]);\r\n                score += sc;\r\n                if(three === 1){\r\n                    threes_two = threes_two.concat([{row:c, col:r}, {row: c, col:r+1}, {row:c, col:r+2}, {row: c, col:r+3}]);\r\n                }\r\n                else if(three === -1){\r\n                    threes_one = threes_one.concat([{row:c, col:r}, {row: c, col:r+1}, {row:c, col:r+2}, {row: c, col:r+3}]);\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        for (let c = 0; c < 4; c++) {\r\n            for (let r = 1; r < 7; r++) {\r\n                let {sc:sc, three:three} = this.scoreFour2(board[c][r], board[c + 1][r], board[c + 2][r], board[c + 3][r]);\r\n                score += sc;\r\n                if(three === 1){\r\n                    threes_two = threes_two.concat([{row:c, col:r}, {row: c+1, col:r}, {row:c+2, col:r}, {row: c+3, col:r}]);\r\n                }\r\n                else if(three === -1){\r\n                    threes_one = threes_one.concat([{row:c, col:r}, {row: c+1, col:r}, {row:c+2, col:r}, {row: c+3, col:r}]);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let c = 0; c < 4; c++) {\r\n            for (let r = 1; r < 4; r++) {\r\n                let {sc:sc, three:three} = this.scoreFour2(board[c][r], board[c + 1][r + 1], board[c + 2][r + 2], board[c + 3][r + 3]);\r\n                score += sc;\r\n                if(three === 1){\r\n                    threes_two = threes_two.concat([{row:c, col:r}, {row: c+1, col:r+1}, {row:c+2, col:r+2}, {row: c+3, col:r+3}]);\r\n                    //threes_two = threes_two.concat([(c, r), (c+1, r+1), (c+2, r+2), (c+3, r+3)]);\r\n                }\r\n                else if(three === -1){\r\n                    threes_one = threes_one.concat([{row:c, col:r}, {row: c+1, col:r+1}, {row:c+2, col:r+2}, {row: c+3, col:r+3}]);\r\n                    //threes_one = threes_one.concat([(c, r), (c+1, r+1), (c+2, r+2), (c+3, r+3)]);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let c = 3; c < 7; c++) {\r\n            for (let r = 1; r < 4; r++) {\r\n                let {sc:sc, three:three} = this.scoreFour2(board[c][r], board[c - 1][r + 1], board[c - 2][r + 2], board[c - 3][r + 3]);\r\n                score += sc;\r\n                if(three === 1){\r\n                    threes_two = threes_two.concat([{row:c, col:r}, {row: c-1, col:r+1}, {row:c-2, col:r+2}, {row: c-3, col:r+3}]);\r\n                    //threes_two = threes_two.concat([(c, r), (c-1, r+1), (c-2, r+2), (c-3, r+3)]);\r\n                }\r\n                else if(three === -1){\r\n                    threes_one = threes_one.concat([{row:c, col:r}, {row: c-1, col:r+1}, {row:c-2, col:r+2}, {row: c-3, col:r+3}]);\r\n                   //threes_one = threes_one.concat([(c, r), (c-1, r+1), (c-2, r+2), (c-3, r+3)]);\r\n                }\r\n            }\r\n        }\r\n        let d2 = this.numDuplicate(threes_two);\r\n        let d1 = this.numDuplicate(threes_one);\r\n        //console.log(d1, d2);\r\n        score += Math.pow(10 * d2, d2 + 2) - Math.pow(10 * d1, d1 + 2);\r\n        return score;\r\n    }\r\n\r\n    numDuplicate(arr){\r\n        //console.log(arr);\r\n        let count = new Set();\r\n        let result = 0;\r\n        for (let ele of arr){\r\n            let {row, col} = ele;\r\n            let hash = row * 10 + col;\r\n            if(count.has(hash)){\r\n                result++;\r\n            }\r\n            else{\r\n                count.add(hash);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    toHash(board) {\r\n        let re = \"\";\r\n        for (let c = 0; c < 7; c++) {\r\n            for (let r = 1; r < 7; r++) {\r\n                if (board[c][r])\r\n                    re += board[c][r];\r\n                else\r\n                    re += \"n\";\r\n            }\r\n        }\r\n        return re;\r\n    }\r\n\r\n    minimax(board, isMax, alpha, beta, depth) {\r\n        board = board.map((a) => a.slice());\r\n\r\n        if (checkWinner(board) || depth === 0) {\r\n            let score = this.getScore(board);\r\n            return score;\r\n        }\r\n\r\n        let actions = this.getActions(board);\r\n\r\n        if (isMax) {\r\n            let val = -Infinity;\r\n            for (const action of actions) {\r\n                const boardCopy = board.map((a) => a.slice());\r\n                val = Math.max(val, this.minimax(this.tryMove(action, boardCopy, this.aiPiece), false, alpha, beta, depth - 1));\r\n\r\n                if (val >= beta) {\r\n                    return val;\r\n                }\r\n                alpha = Math.max(alpha, val);\r\n            }\r\n            return val;\r\n        }\r\n        else {\r\n            let val = Infinity;\r\n            for (const action of actions) {\r\n                const boardCopy = board.map((a) => a.slice());\r\n                val = Math.min(val, this.minimax(this.tryMove(action, boardCopy, this.humanPiece), true, alpha, beta, depth - 1));\r\n                if (val <= alpha) {\r\n                    return val;\r\n                }\r\n                beta = Math.min(beta, val);\r\n            }\r\n            return val;\r\n        }\r\n    }\r\n}\r\n\r\nexport default MinimaxAgent;","import React, { Component } from 'react';\r\nimport MinimaxAgent from './MinimaxAgent';\r\nimport \"./ConnectFour.css\"\r\n\r\nfunction Piece(props) {\r\n    return (\r\n        <div className={props.id === 0 ? \"virtual-piece\" : \"piece\"}>\r\n            <div\r\n                className={(props.id === 0 ? \"v\" : \"\") + `${props.val}` + (props.finished && props.val !== null ? \"finished\" : \"\")}\r\n\r\n            ></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Col(props) {\r\n    return (\r\n        <div\r\n            className=\"col\" onClick={() => props.handleClick()} onMouseEnter={() => props.handleEnter()} onMouseLeave={() => props.handleLeave()}>\r\n            {[...Array(props.pieces.length)].map((x, y) => {\r\n                return <Piece key={y} val={props.pieces[y]} id={y} finished={props.finished}></Piece>\r\n            }\r\n            )}\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default class ConnectFour extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentPlayer: 0, // player 1 goes first\r\n            aiPlayer: 1,\r\n            humanPlayer: 0,\r\n            humanPiece: \"p1\",\r\n            board: new Array(7).fill(new Array(7).fill(null)),\r\n            lastBoards: [],\r\n            colors: [\"p1\", \"p2\"],\r\n            winner: null,\r\n            depth: 4,\r\n            minimaxAgent: new MinimaxAgent(4, 0),\r\n        };\r\n        this.reset = this.reset.bind(this);\r\n        this.props.getFunctions(() => { }, this.reset);\r\n    }\r\n\r\n    reset() {\r\n        this.setState({\r\n            currentPlayer: 0, // player 1 goes first\r\n            board: new Array(7).fill(new Array(7).fill(null)),\r\n            lastBoards: [],\r\n            colors: [\"p1\", \"p2\"],\r\n            winner: null,\r\n        });\r\n    }\r\n\r\n    undo() {\r\n        if (this.state.lastBoards.length) {\r\n            this.setState({\r\n                board: this.state.lastBoards.pop(),\r\n                currentPlayer: this.state.humanPlayer,\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    setStartingPlayer(player) {\r\n        if (player === \"human\") {\r\n            this.setState({\r\n                aiPlayer: 1,\r\n                humanPlayer: 0,\r\n                humanPiece: \"p1\",\r\n                minimaxAgent: new MinimaxAgent(this.state.depth, 0),\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                aiPlayer: 0,\r\n                humanPlayer: 1,\r\n                humanPiece: \"p2\",\r\n                minimaxAgent: new MinimaxAgent(this.state.depth, 1),\r\n            });\r\n        }\r\n        this.reset();\r\n    }\r\n\r\n    setDepth(d) {\r\n        this.setState({ depth: d, minimaxAgent: new MinimaxAgent(d, this.state.humanPlayer)});\r\n    }\r\n\r\n    handleClick(colId) {\r\n        if(this.state.currentPlayer === this.state.aiPlayer) return;\r\n        if(!this.state.winner) {\r\n            this.state.lastBoards.push(this.state.board.map((a) => a.slice()));\r\n            this.move(colId);\r\n        }\r\n    }\r\n\r\n    AITakeMove() {\r\n        \r\n        if (checkWinner(this.state.board) === null && this.state.currentPlayer == this.state.aiPlayer) {\r\n\r\n            const boardCopy = this.state.board.map((a) => a.slice());\r\n            const action = this.state.minimaxAgent.getAction(boardCopy);\r\n\r\n            this.move(action);\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n    handleEnter(colId) {\r\n        if(this.state.currentPlayer === this.state.aiPlayer) return;\r\n        const boardCopy = this.state.board.map((a) => a.slice());\r\n        boardCopy[colId][0] = this.state.colors[this.state.currentPlayer];\r\n        for (let index = 0; index < boardCopy.length; index++) {\r\n            if (index !== colId) {\r\n                boardCopy[index][0] = null;\r\n            }\r\n        }\r\n        this.setState({\r\n            board: boardCopy\r\n        });\r\n    }\r\n\r\n    handleLeave(colId) {\r\n        const boardCopy = this.state.board.map((a) => a.slice());\r\n        boardCopy[colId][0] = null;\r\n        this.setState({\r\n            board: boardCopy\r\n        });\r\n    }\r\n\r\n    move(colId) {\r\n        const boardCopy = this.state.board.map((a) => a.slice());\r\n\r\n        if (boardCopy[colId].slice(1, 7).indexOf(null) >= 0) {\r\n            let newCol = boardCopy[colId].reverse();\r\n            newCol[newCol.indexOf(null)] = this.state.colors[this.state.currentPlayer];\r\n            newCol.reverse();\r\n            \r\n            if(this.state.depth === 6) {\r\n                boardCopy[colId][0] = null;\r\n            }\r\n            else if (this.state.currentPlayer == this.state.humanPlayer) {\r\n                boardCopy[colId][0] = this.state.colors[this.state.currentPlayer];\r\n            }\r\n            this.setState({\r\n                currentPlayer: Math.abs(this.state.currentPlayer - 1),\r\n                board: boardCopy,\r\n            });\r\n        }\r\n        \r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.state.aiPlayer == 0) {\r\n            this.AITakeMove();\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        const boardCopy = this.state.board.map((a) => a.slice());\r\n        let winner = checkWinner(boardCopy);\r\n        if (this.state.winner !== winner) {\r\n\r\n            for (let index = 0; index < boardCopy.length; index++) {\r\n                boardCopy[index][0] = null;\r\n            }\r\n            this.setState({\r\n                winner: winner,\r\n                board: boardCopy,\r\n            })\r\n        }\r\n        //while(true){let a=1}\r\n        setTimeout(()=> this.AITakeMove(), 200);\r\n    }\r\n\r\n    render() {\r\n        //console.log(1, this.state.currentPlayer, this.state.board.map((a) => a.slice()));\r\n        let buttons =\r\n            <><button\r\n                style={{ position: \"absolute\", marginTop: \"460px\", marginLeft: \"100px\", height: \"30px\", width: \"130px\" }}\r\n                onClick={() => this.setStartingPlayer(this.state.aiPlayer === 1 ? \"ai\" : \"human\")}\r\n                type=\"button\"\r\n                class=\"btn btn-outline-dark\">\r\n                <p style={{ \"margin-top\": \"-5px\" }}>{`offensive: ${this.state.aiPlayer === 1 ? \"you\" : \"ai\"}`}</p>\r\n            </button>\r\n\r\n                <button\r\n                    style={{ position: \"absolute\", marginTop: \"460px\", marginLeft: \"240px\", height: \"30px\", width: \"100px\" }}\r\n                    onClick={() => this.undo()}\r\n                    type=\"button\"\r\n                    class=\"btn btn-outline-dark\">\r\n                    <p style={{ \"margin-top\": \"-5px\" }}>undo</p>\r\n                </button>\r\n                <div class={\"dropdown\"}>\r\n                    <button class=\"btn btn-outline-dark dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" style={{ position: \"absolute\", marginTop: \"460px\", marginLeft: \"-130px\", height: \"30px\", width: \"130px\" }}>\r\n                        <p style={{ \"margin-top\": \"-5px\" }}>{`Depth: ${this.state.depth}`}</p>\r\n                    </button>\r\n                    <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n                        <li>\r\n                            <button type=\"button\" class=\"btn btn-light navbtn\" style={{ height: \"30px\" }} onClick={() => this.setDepth(2)}><p style={{ \"margin-top\": \"-5px\" }}>{`Depth: 2`}</p></button>\r\n                            <button type=\"button\" class=\"btn btn-light navbtn\" style={{ height: \"30px\" }} onClick={() => this.setDepth(4)}><p style={{ \"margin-top\": \"-5px\" }}>{`Depth: 4`}</p></button>\r\n                            <button type=\"button\" class=\"btn btn-light navbtn\" style={{ height: \"30px\" }} onClick={() => this.setDepth(6)}><p style={{ \"margin-top\": \"-5px\" }}>{`Depth: 6`}</p></button>\r\n                        </li>\r\n                    </div>\r\n                </div></>\r\n        if (this.state.winner) {\r\n            let cols = [...Array(this.state.board.length)].map((x, y) =>\r\n                <Col\r\n                    key={y}\r\n                    pieces={this.state.board[y]}\r\n                    handleClick={() => { }}\r\n                    handleEnter={() => { }}\r\n                    handleLeave={() => { }}\r\n                    finished={true}\r\n                ></Col>\r\n            );\r\n            return (\r\n                <div>\r\n                    <div className=\"game\">\r\n                        <div className=\"board\">\r\n                            <>\r\n                                <div className=\"col\"></div>\r\n                                {cols}</>\r\n                        </div>\r\n                        {buttons}\r\n                    </div>\r\n                    <h1 style={{ position: \"relative\", marginTop: \"-170px\" }}>{this.state.winner == \"tie\" ? \"Tie\" : `Winner: ${this.state.winner === this.state.humanPiece ? \"You\" : \"AI\"}`}</h1>\r\n                </div>\r\n\r\n            );\r\n        }\r\n\r\n        let cols = [...Array(this.state.board.length)].map((x, y) =>\r\n            <Col\r\n                key={y}\r\n                pieces={this.state.board[y]}\r\n                handleClick={() => this.handleClick(y)}\r\n                handleEnter={() => this.handleEnter(y)}\r\n                handleLeave={() => this.handleLeave(y)}\r\n                finished={false}\r\n            ></Col>\r\n        );\r\n        \r\n        if(this.state.currentPlayer === this.state.aiPlayer){\r\n            let loadingImg = document.getElementById(\"loadingImgT\");\r\n            if(loadingImg) loadingImg.className = 'loadingImgN';\r\n        }\r\n        else{\r\n            let loadingImg = document.getElementById(\"loadingImgT\");\r\n            if(loadingImg) loadingImg.className = 'loadingImgT';\r\n            \r\n        }\r\n        return (\r\n            <div>\r\n                <div className=\"game\">\r\n                    <div className=\"board\">\r\n                        {cols}\r\n                    </div>\r\n\r\n                    {buttons}\r\n                    <img id=\"loadingImgT\" className=\"loadingImgT\" src=\"https://linkpicture.com/q/Double-Ring-1s-200px-2.gif\" height=\"100px\" width=\"100px\" style={{marginLeft: \"10px\", position: \"absolute\", zIndex:0}}></img>;\r\n                    <div>\r\n                        <h5 class=\"connectFourDes\" style={{ position: \"absolute\", marginTop: \"160px\", marginLeft: \"30px\", textAlign: \"left\" }}>\r\n                            This is a chess game known as \"Connect Four\", which you<br />\r\n                            will need to connect four pieces to win (accept diagonals). <br />\r\n                            The game has \"gravity\", so wherever you put the pieces, <br />\r\n                            they would \"drop\" down to the bottom.<br /><br />\r\n                            You are competing with a \"Minimax\" AI with alpha-beta pruning.<br />\r\n                            Basically, it will search possible future states of the game<br />\r\n                            and choose the action that it think is best at the current state<br />\r\n                            each time. <br /><br />\r\n                            It is not a perfect player for this game, so try your best to<br />\r\n                            beat it by your \"humanity\"!\r\n                    </h5>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction checkFour(a, b, c, d) {\r\n    return ((a !== null) && (a === b) && (a === c) && (a === d));\r\n}\r\n\r\nfunction checkWinner(board) {\r\n    for (let c = 0; c < 7; c++) {\r\n        for (let r = 1; r < 5; r++) {\r\n            if (checkFour(board[c][r], board[c][r + 1], board[c][r + 2], board[c][r + 3])) {\r\n                return board[c][r];\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    for (let c = 0; c < 4; c++) {\r\n        for (let r = 1; r < 7; r++) {\r\n            if (checkFour(board[c][r], board[c + 1][r], board[c + 2][r], board[c + 3][r])) {\r\n                return board[c][r];\r\n            }\r\n        }\r\n    }\r\n\r\n    for (let c = 0; c < 4; c++) {\r\n        for (let r = 1; r < 5; r++) {\r\n            if (checkFour(board[c][r], board[c + 1][r + 1], board[c + 2][r + 2], board[c + 3][r + 3]))\r\n                return board[c][r];\r\n        }\r\n    }\r\n\r\n    for (let c = 3; c < 7; c++) {\r\n        for (let r = 1; r < 5; r++) {\r\n            if (checkFour(board[c][r], board[c - 1][r + 1], board[c - 2][r + 2], board[c - 3][r + 3]))\r\n                return board[c][r];\r\n        }\r\n    }\r\n\r\n    for (let c = 0; c < 7; c++) {\r\n        if (board[c].slice(1, 7).indexOf(null) >= 0) {\r\n            return null;\r\n        }\r\n\r\n    }\r\n    return \"tie\";\r\n}\r\n\r\nexport { checkWinner };","import React, { Component } from 'react';\r\nimport \"./SnakeNode.css\";\r\n\r\nexport default class SnakeNode extends Component {\r\n    render() {\r\n        const {\r\n            row,\r\n            col,\r\n            type,\r\n        } = this.props;\r\n        return (\r\n            <div\r\n                id={`snakeNode-${row}-${col}`}\r\n                className={`snakeNode-${this.props.type}`}\r\n            >\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport SnakeNode from './SnakeNode/SnakeNode';\r\n\r\nexport default class NNSnakeVisualizer extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            grid: [],\r\n            numRows: 30,\r\n            numCols: 30,\r\n            snake: [{row: 15, col: 15, type: \"snake\"}, {row: 16, col: 15, type: \"snake\"}, {row: 17, col: 15, type: \"snake\"}],\r\n            direction: {dr: 1, dc: 0},\r\n            foodPos: null,\r\n            foodScore: 0,\r\n        }\r\n    }\r\n\r\n    randomFood(){\r\n        let randomRow = randomInt(this.state.numRows);\r\n        let randomCol = randomInt(this.state.numCols);\r\n        return {randomRow, randomCol};\r\n    }\r\n\r\n    setFoodClassName(row, col){\r\n        let nextFood = document.getElementById(`snakeNode-${row}-${col}`);\r\n        if(nextFood) nextFood.className = `snakeNode-food`;\r\n    }\r\n\r\n    componentDidMount(){\r\n        // node: null, snake, food\r\n        let grid = [];\r\n        \r\n        for(let row = 0; row < this.state.numRows; row++){\r\n            let line = [];\r\n            for(let col = 0; col < this.state.numCols; col++){\r\n                let n = {row: row, col: col, type: \"null\"};\r\n                line.push(n);\r\n            }\r\n            grid.push(line);\r\n        }\r\n        this.showSnake(grid, this.state.snake);\r\n        this.setState({grid: grid});\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        let grid = this.state.grid.map((a) => a.slice());\r\n        let {snake, lastNode} = this.updateSnake();\r\n        let food;\r\n        let score = this.state.foodScore;\r\n        if(this.checkFoodEaten(snake)){\r\n            food = this.randomFood();\r\n            score++;\r\n            snake.push(lastNode);\r\n        }\r\n        this.update(grid, snake, food, score);\r\n    }\r\n\r\n    render(){\r\n        let grid = this.state.grid;\r\n        return(\r\n            <div className=\"snakeGrid\" style={{marginTop: \"5%\", marginLeft: \"-65%\"}}>\r\n                    {grid.map((row, rowId) => {\r\n                        return (\r\n                            <div key={rowId}>\r\n                                {row.map((node, nodeId) => {\r\n                                    \r\n                                    const { row, col, type } = node;\r\n                                    \r\n                                    return (\r\n                                        <SnakeNode\r\n                                            key={nodeId}\r\n                                            row={row}\r\n                                            col={col}\r\n                                            type={type}\r\n                                        ></SnakeNode>\r\n                                    )\r\n                                })\r\n                                }\r\n                            </div>\r\n                        );\r\n                    })\r\n                    }\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction randomInt(num) {\r\n    return Math.floor(Math.random() * num);\r\n}","import React, { Component } from 'react';\r\nimport PtronVisualizer from './Perceptron/PtronVisualizer';\r\nimport PongVisualizer from './PongVisualizer/PongVisualizer';\r\nimport ConnectFour from './ConnectFourVisualizer/ConnectFour';\r\nimport NNSnakeVisualizer from './NNSnakeVisualizer/NNSnakeVisualizer';\r\nimport './AIVisualizer.css';\r\n\r\nexport default class AIVisualizer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentAlgorithm: -1,\r\n            algorithms: ['Perceptron', 'Approximate Q', 'Minimax'],\r\n            visualizeAI: () => { },\r\n            reset: () => { },\r\n        };\r\n        \r\n        this.state.reset = this.state.reset.bind(this.state);\r\n        this.state.visualizeAI = this.state.visualizeAI.bind(this.state);\r\n        this.getAIFunctions = this.getAIFunctions.bind(this);\r\n        this.setAlgorithm = this.setAlgorithm.bind(this);\r\n        this.props.getFunctions(() => { this.state.visualizeAI() }, () => { this.state.reset() }, this.setAlgorithm, this.state.algorithms);\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.newScript(\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/499416/TweenLite.min.js\");\r\n        this.newScript(\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/499416/EasePack.min.js\");\r\n        this.newScript(\"https://drive.google.com/uc?export=view&id=1mvQtt6H9xa1k3Iwsw5PoYFDq8zEmg_SO\");\r\n    }\r\n\r\n    getAIFunctions(run, reset) {\r\n        this.state.visualizeAI = () => {\r\n            run()\r\n        };\r\n        this.state.reset = () => {\r\n            reset();\r\n        }\r\n        this.setState({ visualizeAI: run });\r\n    }\r\n    setAlgorithm(algoId) {\r\n        this.setState({ currentAlgorithm: algoId });\r\n    }\r\n\r\n    newScript(url){\r\n        var script = document.createElement('script');\r\n        script.src = url;\r\n        document.body.appendChild(script);\r\n    }\r\n\r\n    render() {\r\n        let renderObj;\r\n        switch (this.state.currentAlgorithm) {\r\n            case -1:\r\n                renderObj = <div>\r\n                <div class=\"textcontainer\">\r\n                    <div class=\"typewriter\"><h1>Welcome to the Future.</h1></div>\r\n                </div>\r\n                <div id=\"large-header\" class=\"large-header\" style={{marginTop: \"-18em\"}}>\r\n                    <canvas id=\"demo-canvas\"></canvas>\r\n                </div>\r\n                {/*\r\n                <div id=\"space\">\r\n                  <div class=\"stars\"></div>\r\n                  <div class=\"stars\"></div>\r\n                  <div class=\"stars\"></div>\r\n                  <div class=\"stars\"></div>\r\n                  <div class=\"stars\"></div>\r\n                </div>*/}\r\n                </div>\r\n                break;\r\n            case 0:\r\n                renderObj = <PtronVisualizer setVisualizerRendering={this.props.setVisualizerRendering} getFunctions={this.getAIFunctions}></PtronVisualizer>\r\n                break;\r\n            case 1:\r\n                renderObj = <PongVisualizer setVisualizerRendering={this.props.setVisualizerRendering} getFunctions={this.getAIFunctions}></PongVisualizer>\r\n                break;\r\n            case 2:\r\n                renderObj = <ConnectFour setVisualizerRendering={this.props.setVisualizerRendering} getFunctions={this.getAIFunctions}></ConnectFour>\r\n                break;\r\n            case 3:\r\n                renderObj = <NNSnakeVisualizer setVisualizerRendering={this.props.setVisualizerRendering} getFunctions={this.getAIFunctions}></NNSnakeVisualizer>\r\n                break;\r\n        }\r\n        return (\r\n            <div>{renderObj}</div>\r\n        );\r\n\r\n    }\r\n}","import React, { Component, Text } from 'react';\r\nimport TextLoop from \"react-text-loop\";\r\nimport PathFindingVisualizer from './PathFindingVisualizer/PathFindingVisualizer';\r\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\r\nimport './Visualizer.css'\r\nimport AIVisualizer from './AIVisualizer/AIVisualizer';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default class Visualizer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            mode: 'main',\r\n            rendering: false,\r\n            algorithms: [],\r\n            currentAlgorithm: null,\r\n            goFunction: () => { },\r\n            resetFunction: () => { },\r\n            setAlgorithm: () => { },\r\n            sortingClicked: false,\r\n            pathClicked: false,\r\n            AIClicked: false,\r\n            aicount: 0,\r\n        };\r\n        this.getFunctions = this.getFunctions.bind(this);\r\n        this.changeRenderingState = this.changeRenderingState.bind(this);\r\n    }\r\n\r\n    changeRenderingState(rendering) {\r\n        this.setState({ rendering: rendering });\r\n    }\r\n\r\n    getFunctions(go, reset, setAlgo, algorithms) {\r\n        //console.log(go);\r\n        this.state.goFunction = go;\r\n        this.state.resetFunction = reset;\r\n        this.state.setAlgorithm = setAlgo;\r\n        this.state.algorithms = algorithms;\r\n        this.setState({ algorithms: algorithms });\r\n        //this.state.goFunction();\r\n    }\r\n\r\n    render() {\r\n        let renderObj = null;\r\n        if (this.state.mode === 'pathfinding') {\r\n            renderObj = <PathFindingVisualizer setVisualizerRendering={this.changeRenderingState} getFunctions={this.getFunctions} />;\r\n        }\r\n        else if (this.state.mode === 'sorting') {\r\n            renderObj = <SortingVisualizer setVisualizerRendering={this.changeRenderingState} getFunctions={this.getFunctions} />;\r\n        }\r\n        else if (this.state.mode === 'ai') {\r\n            renderObj = <AIVisualizer count={this.state.aicount} setVisualizerRendering={this.changeRenderingState} getFunctions={this.getFunctions}></AIVisualizer>\r\n        }\r\n        else {\r\n            renderObj =\r\n                <div class=\"welbotron\">\r\n                    \r\n                    <div class=\"container welc\">\r\n                        \r\n                        <h1 class='welcome'>Hello, algorithms.\r\n                            <p class=\"quote\">\r\n                                <TextLoop interval={3800} springConfig={{ stiffness: 200}} adjustingSpeed={300} >\r\n                                        <p class=\"quoteText\">\"An algorithm must be seen to be believed.\"</p>\r\n                                        <p class=\"quoteText\">\"Algorithms are central objects of study in Computer Science.\"</p>\r\n                                        <p class=\"quoteText\">\"Algorithms are apprehensible magics.\"</p>\r\n                                        <p class=\"quoteText\">\"An algorithm is like a recipe.\"</p>\r\n                                </TextLoop>\r\n                            </p>\r\n                            \r\n                            <p class=\"lead\">This website might help you understand algorithms better by visualizing them.</p>\r\n                            <p class=\"secondline lead\">Click on one of the categories below to visualize algorithms.</p>\r\n\r\n                        </h1>\r\n                        <a href='' class='mainpage-b' onClick={() => {\r\n                            if (!this.state.rendering) {\r\n                                this.setState({ mode: 'pathfinding' });\r\n                                this.setState({ currentAlgorithm: null, pathClicked: true });\r\n                            }\r\n                        }} data-toggle={this.state.pathClicked ? \"\" : \"modal\"} data-target=\"#pathIntroModal\">\r\n                            <span></span>\r\n                            PATH FINDING\r\n                        </a>\r\n                        <a href='' class='mainpage-b' onClick={() => {\r\n                            if (!this.state.rendering) {\r\n                                this.setState({ mode: 'sorting', currentAlgorithm: null, sortingClicked: true });\r\n                            }\r\n                        }} data-toggle={this.state.sortingClicked ? \"\" : \"modal\"} data-target=\"#sortingIntroModal\">\r\n                            <span></span>\r\n                            SORTING\r\n                        </a>\r\n                        <a href='' class='mainpage-b' onClick={() => {\r\n                            if (!this.state.rendering) {\r\n                                this.setState({ mode: 'ai', currentAlgorithm: null, AIClicked: true});\r\n                            }\r\n                        }} data-toggle={this.state.AIClicked ? \"\" : \"modal\"} data-target=\"#aiIntroModal\">\r\n                            <span></span>\r\n                            ARTIFICIAL INTELLIGENCE\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n        }\r\n        let invisibleOrNot = '';\r\n        if (this.state.mode === 'main') invisibleOrNot = ' invisible';\r\n        let algorithms = this.state.algorithms;\r\n        return (\r\n            <>  \r\n                    \r\n                    <nav class=\"navbar navbar-expand-lg navbar-light fixed-top bg-dark\">\r\n                    <button\r\n                        onClick={() => {\r\n                            if (!this.state.rendering) {\r\n                                this.setState({ mode: 'main' });\r\n                            }\r\n                        }}\r\n                        type=\"button\" class=\"btn btn-dark navbtn\"\r\n                        disabled={this.state.rendering}\r\n                    >Main</button>\r\n                    <button\r\n                        onClick={() => {\r\n                            if (!this.state.rendering) {\r\n                                this.setState({ mode: 'pathfinding', currentAlgorithm: null, pathClicked: true });\r\n                                this.state.setAlgorithm(-1);\r\n                            }\r\n                        }}\r\n                        type=\"button\" class=\"btn btn-dark navbtn\" \r\n                        data-toggle={this.state.pathClicked ? \"\" : \"modal\"} data-target=\"#pathIntroModal\"\r\n                        disabled={this.state.rendering}\r\n                    >Pathfinding</button>\r\n                    <button\r\n                        onClick={() => {\r\n                            if (!this.state.rendering) {\r\n                                this.setState({ mode: 'sorting', currentAlgorithm: null, sortingClicked: true });\r\n                                this.state.setAlgorithm(-1);\r\n                            }\r\n                        }}\r\n                        type=\"button\" class=\"btn btn-dark navbtn\" \r\n                        data-toggle={this.state.sortingClicked ? \"\" : \"modal\"} data-target=\"#sortingIntroModal\"\r\n                        disabled={this.state.rendering}\r\n                    >Sorting</button>\r\n                    <button\r\n                        onClick={() => {\r\n                            \r\n                            if (!this.state.rendering) {\r\n                                this.setState({ mode: 'ai', currentAlgorithm: null, AIClicked: true});\r\n                                this.state.setAlgorithm(-1);\r\n                            }\r\n                        }}\r\n                        type=\"button\" class=\"btn btn-dark navbtn\"\r\n                        data-toggle={this.state.AIClicked ? \"\" : \"modal\"} data-target=\"#aiIntroModal\"\r\n                        disabled={this.state.rendering}\r\n                    >AI</button>\r\n                    <div class={\"dropdown\" + invisibleOrNot}>\r\n                        <button class=\"btn btn-light dropdown-toggle navbtn\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" disabled={this.state.rendering}>\r\n                            Actions\r\n                        </button>\r\n                        <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n                            <li>\r\n                                <button type=\"button\" class=\"btn btn-light navbtn\" onClick={() => this.state.goFunction()} data-toggle={this.state.currentAlgorithm === null ? \"modal\" : \"\"} data-target=\"#setAlgoModal\" disabled={this.state.mode === \"ai\" && this.state.currentAlgorithm === \"Minimax\"}>Go!</button>\r\n                                <button type=\"button\" class=\"btn btn-light navbtn\" onClick={() => this.state.resetFunction()}>Reset</button>\r\n                            </li>\r\n                        </div>\r\n                    </div>\r\n                    <div class={\"dropdown\" + invisibleOrNot}>\r\n                        <button class=\"btn btn-secondary dropdown-toggle navbtn\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" disabled={this.state.rendering}>\r\n                            {this.state.currentAlgorithm == null ? 'Algorithms' : this.state.currentAlgorithm}\r\n                        </button>\r\n                        <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n                            <li>\r\n                                {algorithms.map((algorithm, algoId) => {\r\n                                    return (<button type=\"button\" class=\"btn btn-light navbtn\" onClick={() => {\r\n                                        this.state.setAlgorithm(algoId);\r\n                                        this.setState({ currentAlgorithm: this.state.algorithms[algoId] });\r\n                                    }}>{algorithm}</button>);\r\n                                }\r\n                                )\r\n                                }\r\n                            </li>\r\n                        </div>\r\n                    </div>\r\n                    <a href=\"https://github.com/JasonFengGit\" style={{marginLeft: \"32%\"}}>\r\n                        <img class=\"githubimg\" src=\"https://www.linkpicture.com/q/UIHere_1.png\" width=\"40px\" height=\"40px\" style={{opacity:\"0.7 !important\"}}></img>\r\n                    </a>\r\n                </nav>\r\n                \r\n                <div class=\"modal fade\" id=\"setAlgoModal\" role=\"dialog\">\r\n                    <div class=\"modal-dialog\">\r\n                        <div class=\"modal-content\">\r\n\r\n                            <div class=\"modal-header\">\r\n                                <h5 class=\"modal-title\">No Algorithm Selected</h5>\r\n                                <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\r\n                            </div>\r\n\r\n                            <div class=\"modal-body-alert\">\r\n                                <p>Please select an algorithm first.</p>\r\n                            </div>\r\n                            <div class=\"modal-footer\">\r\n                                <button type=\"button\" class=\"btn btn-dark\" data-dismiss=\"modal\" style={{ width: '100px' }}>OK</button>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n                <div class=\"modal fade\" id=\"pathIntroModal\" role=\"dialog\">\r\n                    <div class=\"modal-dialog\">\r\n                        <div class=\"modal-content intro\">\r\n\r\n                            <div class=\"modal-header\">\r\n                                <h5 class=\"modal-title\">Pathfinding</h5>\r\n                                <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\r\n                            </div>\r\n\r\n                            <div class=\"modal-body intro\">\r\n                                <p>\r\n                                    Pathfinding is generally the process of finding a route between two points. It is closely related to the shortest path problem in graph theory,\r\n                                    which examines how to identify the \"best\" paths valued by different criteria (Ex. distance, cost, time consumption).\r\n                                </p>\r\n                                <p>Pathfinding is also similar to Searching in some circumstances. For instance, we can use [breadth-first search] to find the shortest path in a grid world.</p>\r\n                                <p>\r\n                                    In our scenario, the paths are valued by the number of cells they passed from START:\r\n                                    <div class=\"simg\" width=\"20\" height=\"20\"></div>\r\n                                    to the TARGET:\r\n                                    <div class=\"fimg\" width=\"20\" height=\"20\"></div>\r\n                                    .\r\n                                </p>\r\n                                <p>You may drag the START and TARGET icons to change their positions, and click on the blank nodes to add Walls.</p>\r\n\r\n                                <p>Now please choose a sorting algorithm and visualize it!</p>\r\n                                <p class='tips'>(after choosing an algorithm, click on the [Actions] button.)</p><br/>\r\n                                <p class='tips'>Note: there could be multiple \"best\" paths, so paths generated by different algorithms may not be consistent.</p>\r\n                            </div>\r\n                            <div class=\"modal-footer\">\r\n                                <button type=\"button\" class=\"btn btn-dark\" data-dismiss=\"modal\" style={{ width: '100px' }}>OK</button>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n                <div class=\"modal fade\" id=\"sortingIntroModal\" role=\"dialog\">\r\n                    <div class=\"modal-dialog\">\r\n                        <div class=\"modal-content intro\">\r\n\r\n                            <div class=\"modal-header\">\r\n                                <h5 class=\"modal-title\">Sorting</h5>\r\n                                <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\r\n                            </div>\r\n\r\n                            <div class=\"modal-body intro\">\r\n                                <p>Sorting is a process of arranging an ordered sequence. It is a common operation in many applications.</p>\r\n                                <p>Common uses of sorted sequences are:\r\n                                    <div class='uses-list'>\r\n                                        <p>·lookup or search efficiently</p>\r\n                                        <p>·merge sequences efficiently</p>\r\n                                        <p>·process data in a defined order</p>\r\n                                    </div>\r\n                                Now please choose a sorting algorithm and visualize it!\r\n                                </p>\r\n                                <p class='tips'>(after choosing an algorithm, click on the [Actions] button.)</p>\r\n                            </div>\r\n                            <div class=\"modal-footer\">\r\n                                <button type=\"button\" class=\"btn btn-dark\" data-dismiss=\"modal\" style={{ width: '100px' }}>OK</button>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                    \r\n                </div>\r\n                <div class=\"modal fade\" id=\"aiIntroModal\" role=\"dialog\">\r\n                    <div class=\"modal-dialog\">\r\n                        <div class=\"modal-content intro\">\r\n\r\n                            <div class=\"modal-header\">\r\n                                <h5 class=\"modal-title\">Artificial Intelligence</h5>\r\n                                <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\r\n                            </div>\r\n\r\n                            <div class=\"modal-body intro\">\r\n                                <p>\r\n                                    Artificial intelligence (AI) is intelligence demonstrated by machines.\r\n                                    Leading textbooks define the field as the study of \"intelligent agents\": \r\n                                    any device that perceives its environment and takes actions that maximize its \r\n                                    chance of successfully achieving its goals.\r\n                                </p>\r\n                                <p>\r\n                                    In this category, you will experience with powerful AI algorithms \r\n                                    based on fundamental ideas. Please try to understand those ideas behind through the visualizations,\r\n                                    and I would try my best to demonstrate those principles.\r\n                                </p>\r\n                                <p> Now please choose an algorithm and begin your journey!</p>\r\n                            </div>\r\n                            <div class=\"modal-footer\">\r\n                                <button type=\"button\" class=\"btn btn-dark\" data-dismiss=\"modal\" style={{ width: '100px' }}>OK</button>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                    \r\n                </div>\r\n                <div>\r\n                    {renderObj}\r\n                    \r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Visualizer from './Visualizer';\r\nimport 'bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport 'bootstrap/dist/js/bootstrap.js';\r\nimport $ from 'jquery';\r\nimport { BrowserRouter, Index, Route } from 'react-router-dom';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <>\r\n      <meta charset=\"utf-8\" />\r\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\r\n\r\n      <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\" integrity=\"sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z\" crossorigin=\"anonymous\"></link>\r\n      <div className=\"App\">\r\n        <BrowserRouter basename={'JasonFengGit.github.io/'}>\r\n          <Visualizer></Visualizer>\r\n        </BrowserRouter>\r\n      </div >\r\n      <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\" integrity=\"sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj\" crossorigin=\"anonymous\"></script>\r\n      <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js\" integrity=\"sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN\" crossorigin=\"anonymous\"></script>\r\n      <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\" integrity=\"sha384-B4gt1jrGC7Jh4AgTPSdUtOBvfO8shuf57BaghqFfPlYxofvL8/KUEfYiJOMMV+rV\" crossorigin=\"anonymous\"></script>\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport Visualizer from './Visualizer';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App class='app'></App>, document.getElementById('root'));\r\nserviceWorker.unregister();"],"sourceRoot":""}