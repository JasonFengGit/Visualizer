{"version":3,"sources":["PathFindingVisualizer/Node/Node.jsx","Algorithm/pathfindingAlgorithms.js","PathFindingVisualizer/PathFindingVisualizer.jsx","SortingVisualizer/Pile/Pile.jsx","Algorithm/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","Perceptron/PtronVisualizer.jsx","Visualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","row","col","isFinish","isStart","onMouseDown","onMouseEnter","onMouseUp","isWall","extraClassName","id","className","Component","dijkstra","grid","start","finish","visitedInOrder","distance","univisited","re","node","push","allNodes","length","sort","a","b","closest","shift","Infinity","isVisited","updateUnvisitedNeighbors","randomInt","min","max","Math","floor","random","randomSelect","path","getNeighbors","visited","neighbors","points","height","width","pRe","index","validate","slice","connected","unconnected","forEach","neighbor","nr","nc","ir","ic","c","u","connect","ar","ac","makeWall","isW","newNode","DFS","finsish","BFS","AStar","previousNode","PathFindingVisualizer","state","FR","FC","mouseIsPressed","changingStart","changingFinish","visualized","rendering","numRow","numCol","SR","SC","currentAlgorithm","algorithms","pathfindingAlgorithms","visualizePathfinding","bind","clearVisualizer","setAlgorithm","getFunctions","algoId","setState","initializeGrid","clearWall","currentRow","element","document","getElementById","createNode","updateGridWithWall","newFinish","newStart","setVisualizerRendering","componentDidMount","shortedPath","cur","unshift","getShortestPath","i","setTimeout","map","rowId","key","nodeId","handleMouseDown","handleMouseEnter","handleMouseUp","onClick","j","console","log","splice","concat","rn","primMaze","type","class","style","disabled","Pile","val","isChanging","finished","colorSetIndex","changingColors","normalColors","color","background","swap","piles","tempVal","selectionSort","statesInOrder","minId","temp","changing","bubbleSort","n","newN","insertionSort","mergeSort","mergeSortHelper","end","mid","k","pilesC","merge","quickSort","quickSortHelper","pivot","partition","SortingVisualizer","numPiles","maxPile","changingPiles","pileDelayTimes","getRandomInt","unsortedPiles","sortingAlgorithms","randomizePiles","visualizeSorting","initializePiles","pile","pileId","dummy","indexOf","range","PtronVisualizer","training","Array","count","ptron","xOff","yOff","M","B","resetVisualizer","startVisualizer","x","as","ae","bs","be","Perceptron","y","answer","f","input","output","initialize","x1","y1","x2","y2","weights","getWeights","xx1","yy1","xx2","yy2","train","guess","feedforward","fill","aM","aB","eM","eB","stroke","strokeWidth","point","pointId","radius","opacity","text","fontFamily","fontSize","inputs","desired","error","sum","activate","Visualizer","mode","goFunction","resetFunction","sortingClicked","pathClicked","changeRenderingState","go","reset","setAlgo","renderObj","href","data-toggle","data-target","invisibleOrNot","aria-haspopup","aria-expanded","aria-labelledby","algorithm","role","data-dismiss","App","charset","name","content","rel","integrity","crossorigin","basename","src","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1428e2db.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n    render() {\r\n        const {\r\n            row,\r\n            col,\r\n            isFinish,\r\n            isStart,\r\n            onMouseDown,\r\n            onMouseEnter,\r\n            onMouseUp,\r\n            isWall,\r\n        } = this.props;\r\n        const extraClassName = isFinish\r\n            ? 'node-finish'\r\n            : isStart\r\n                ? 'node-start'\r\n                : isWall\r\n                    ? 'node-wall'\r\n                    : '';\r\n        return (\r\n            <div\r\n                id={`node-${row}-${col}`}\r\n                className={`node ${extraClassName}`}\r\n                onMouseDown={() => onMouseDown(row, col)}\r\n                onMouseEnter={() => onMouseEnter(row, col)}\r\n                onMouseUp={() => onMouseUp()}>\r\n            </div>\r\n        );\r\n    }\r\n}","import { createPortal } from \"react-dom\";\r\n\r\nfunction dijkstra(grid, start, finish) {\r\n    const visitedInOrder = [];\r\n    start.distance = 0;\r\n    const univisited = allNodes(grid);\r\n    while (univisited.length) {\r\n        sortNodes(univisited);\r\n        const closest = univisited.shift();\r\n        if (closest.isWall) continue;\r\n        if (closest.distance === Infinity) return visitedInOrder;\r\n        closest.isVisited = true;\r\n        visitedInOrder.push(closest);\r\n        if (closest === finish) return visitedInOrder;\r\n        updateUnvisitedNeighbors(closest, grid);\r\n    }\r\n    return visitedInOrder;\r\n}\r\n\r\nfunction randomInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction deepCopy(maze) {\r\n    let cMaze = [];\r\n    for (let row = 0; row < maze.length; row++) {\r\n        cMaze.push(maze[row].slice());\r\n    }\r\n    return cMaze;\r\n}\r\n\r\nfunction primMaze(grid) {\r\n    let sr = 7, sc = 17; // set a starting point for generating maze\r\n    let height = grid.length, width = grid[0].length;\r\n    for (let i = 0; i < height; i++) {\r\n        for (let j = 0; j < width; j++) {\r\n            makeWall(grid, i, j, false);\r\n        }\r\n\r\n    }\r\n    for (let i = 0; i < height; i++) {\r\n        for (let j = i % 2 + 1; j < width; j += i % 2 + 1) {\r\n            makeWall(grid, i, j, true);\r\n        }\r\n    }\r\n    for (let i = 0; i < height; i++) {\r\n        makeWall(grid, i, 0, true);\r\n    }\r\n    let visited = [];\r\n    let path = [{ row: sr, col: sc }];\r\n    let count = 0;\r\n    console.log(sr, sc, path.slice());\r\n    while (path.length > 0) {\r\n        const index = randomSelect(path);\r\n        const node = path[index];\r\n        path.splice(index, 1);\r\n        visited = visited.concat([node]);\r\n        const { c: connected, u: unconnected } = getNeighbors(grid, visited, node);\r\n        if (connected.length > 0) {\r\n            let rn = randomSelect(connected);\r\n            connect(grid, node, connected[rn]);\r\n            connected.splice(rn);\r\n        }\r\n        path = path.concat(unconnected);\r\n\r\n        count++;\r\n    }\r\n}\r\n\r\nfunction randomSelect(path) {\r\n    return randomInt(0, path.length - 1);\r\n}\r\n\r\nfunction validate(grid, points) {\r\n    let height = grid.length, width = grid[0].length;\r\n    let pRe = [];\r\n    for (let index = 0; index < points.length; index++) {\r\n        let { row, col } = points[index];\r\n        if ((0 <= row && row < height && 0 <= col && col < width)) {\r\n            pRe.push(points[index]);\r\n        }\r\n    }\r\n    return pRe;\r\n\r\n}\r\n\r\nfunction isVisited(visited, node) {\r\n    let { row: nr, col: nc } = node;\r\n    for (let index = 0; index < visited.length; index++) {\r\n        let { row: ir, col: ic } = visited[index];\r\n        if (nr === ir && nc === ic) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction getNeighbors(grid, visited, node) {\r\n    let { row, col } = node;\r\n    let neighbors = [{ row: row + 2, col: col }, { row: row - 2, col: col }, { row: row, col: col + 2 }, { row: row, col: col - 2 }];\r\n    neighbors = validate(grid, neighbors.slice());\r\n    let connected = [];\r\n    let unconnected = [];\r\n    neighbors.forEach(neighbor => {\r\n        if (isVisited(visited, neighbor)) {\r\n            connected.push(neighbor);\r\n        }\r\n        else {\r\n            unconnected.push(neighbor);\r\n        }\r\n    });\r\n    return { c: connected, u: unconnected };\r\n}\r\n\r\nfunction connect(grid, a, b) {\r\n    let { row: ar, col: ac } = a;\r\n    let { row: br, col: bc } = b;\r\n    let row = (ar + br) / 2;\r\n    let col = (ac + bc) / 2;\r\n    makeWall(grid, row, col, false);\r\n}\r\n\r\nfunction recursiveDivisionMaze(grid) {\r\n    let height = grid.length, width = grid[0].length;\r\n\r\n    recursiveDivision(grid, width, height, 0, 0, 0);\r\n\r\n}\r\n\r\n\r\nfunction makeWall(grid, row, col, isW) {\r\n    const node = grid[row][col];\r\n    const newNode = {\r\n        ...node,\r\n        isWall: isW,\r\n    }\r\n    grid[row][col] = newNode;\r\n}\r\n\r\nfunction buildWall(grid, width, height, xo, yo, wallId, horizontal) {\r\n    if (horizontal) {\r\n        for (let i = xo + 1; i < width - 1; i++) {\r\n            makeWall(grid, wallId, i, true);\r\n        }\r\n    }\r\n    else {\r\n        for (let i = yo + 1; i < height - 1; i++) {\r\n            makeWall(grid, i, wallId, true);\r\n        }\r\n    }\r\n}\r\n\r\nfunction recursiveDivision(grid, width, height, xo, yo, count) {\r\n    if (width - xo < 2 || height - yo < 2) {\r\n        return;\r\n    }\r\n    let horizontal = randomInt(0, 1) == 0;\r\n    let wallId = randomInt(horizontal ? yo : xo, horizontal ? height - 1 : width - 1);\r\n    console.log(horizontal, wallId, width, height);\r\n    buildWall(grid, width, height, xo, yo, wallId, horizontal);\r\n\r\n    let pathId = randomInt(!horizontal ? yo : xo, !horizontal ? height - 1 : width - 1);\r\n\r\n    if (horizontal) {\r\n        makeWall(grid, wallId, pathId, false);\r\n        recursiveDivision(grid, width, wallId - 1, xo, yo, count + 1);\r\n        recursiveDivision(grid, width, height, xo, wallId, count + 1);\r\n    }\r\n    else {\r\n        makeWall(grid, pathId, wallId, false);\r\n        recursiveDivision(grid, wallId - 1, height, xo, yo, count + 1);\r\n        recursiveDivision(grid, width, height, wallId, yo, count + 1);\r\n    }\r\n}\r\n\r\nfunction DFS(grid, start, finsish) {\r\n\r\n}\r\n\r\nfunction BFS(grid, start, finish) {\r\n    return;\r\n}\r\n\r\nfunction AStar(grid, start, finish) {\r\n    return;\r\n}\r\n\r\nfunction allNodes(grid) {\r\n    const re = [];\r\n    for (const row of grid) {\r\n        for (const node of row) {\r\n            re.push(node);\r\n        }\r\n    }\r\n    return re;\r\n}\r\n\r\nfunction sortNodes(nodes) {\r\n    nodes.sort((a, b) => a.distance - b.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(closest, grid) {\r\n    const neighbors = [];\r\n    const { row, col } = closest;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n\r\n    for (const neighbor of neighbors) {\r\n        if (!neighbor.isVisited) {\r\n            neighbor.distance = closest.distance + 1;\r\n            neighbor.previousNode = closest;\r\n        }\r\n    }\r\n}\r\n\r\nfunction getShortestPath(finish) {\r\n    const path = [];\r\n    let cur = finish;\r\n    while (cur !== null) {\r\n        path.unshift(cur);\r\n        cur = cur.previousNode;\r\n    }\r\n    return path;\r\n}\r\n\r\nexport { dijkstra, BFS, DFS, AStar, getShortestPath, recursiveDivisionMaze, primMaze };","import React, { Component } from 'react';\r\nimport Node from './Node/Node';\r\nimport { dijkstra, BFS, DFS, AStar, getShortestPath, recursiveDivisionMaze, primMaze } from '../Algorithm/pathfindingAlgorithms';\r\nimport './PathFindingVisualizer.css';\r\n\r\nexport default class PathFindingVisualizer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            grid: [],\r\n            FR: 7,\r\n            FC: 31,\r\n            mouseIsPressed: false,\r\n            changingStart: false,\r\n            changingFinish: false,\r\n            visualized: false,\r\n            rendering: false,\r\n            numRow: 17,\r\n            numCol: 37,\r\n            SR: 7,\r\n            SC: 5,\r\n            currentAlgorithm: -1,\r\n            algorithms: ['BFS', 'Dijkstra', 'A Star', 'DFS'],\r\n            pathfindingAlgorithms: [BFS, dijkstra, AStar, DFS]\r\n        };\r\n        this.visualizePathfinding = this.visualizePathfinding.bind(this);\r\n        this.clearVisualizer = this.clearVisualizer.bind(this);\r\n        this.setAlgorithm = this.setAlgorithm.bind(this);\r\n        this.props.getFunctions(this.visualizePathfinding, this.clearVisualizer, this.setAlgorithm, this.state.algorithms);\r\n    }\r\n\r\n    setAlgorithm(algoId) {\r\n        this.setState({ currentAlgorithm: algoId });\r\n    }\r\n\r\n    isRendering() {\r\n        return this.state.rendering;\r\n    }\r\n\r\n    componentDidMount() {\r\n        const grid = this.initializeGrid(false);\r\n        this.setState({\r\n            grid: grid,\r\n        })\r\n        this.state.grid = grid;\r\n    }\r\n\r\n    initializeGrid(clearWall) {\r\n        const grid = [];\r\n        for (let row = 0; row < this.state.numRow; row++) {\r\n            const currentRow = [];\r\n            for (let col = 0; col < this.state.numCol; col++) {\r\n                let isW = false;\r\n                const element = document.getElementById(`node-${row}-${col}`);\r\n                if (element && (element.className === 'node node-path' || element.className === 'node node-visited')) {\r\n                    element.className = 'node';\r\n                }\r\n                if (!clearWall && element && element.className === 'node node-wall') {\r\n                    isW = true;\r\n                }\r\n                currentRow.push(this.createNode(row, col, isW));\r\n            }\r\n            grid.push(currentRow);\r\n        }\r\n        return grid;\r\n    }\r\n\r\n    createNode(row, col, isW) {\r\n        return {\r\n            col,\r\n            row,\r\n            isStart: row === this.state.SR && col === this.state.SC,\r\n            isFinish: row === this.state.FR && col === this.state.FC,\r\n            distance: Infinity,\r\n            isVisited: false,\r\n            isWall: isW,\r\n            previousNode: null,\r\n        };\r\n    }\r\n\r\n    handleMouseDown(row, col) {\r\n        if (row === this.state.SR && col === this.state.SC) {\r\n            this.setState({ changingStart: true });\r\n        }\r\n        else if (row === this.state.FR && col === this.state.FC) {\r\n            this.setState({ changingFinish: true });\r\n        }\r\n        else if (!this.state.rendering) {\r\n            this.updateGridWithWall(this.state.grid, row, col);\r\n            this.setState({ mouseIsPressed: true });\r\n        }\r\n    }\r\n\r\n    handleMouseEnter(row, col) {\r\n        if (this.state.changingStart && !(row === this.state.FR && col === this.state.FC)) {\r\n            const start = document.getElementById(`node-${this.state.SR}-${this.state.SC}`);\r\n            if (start) {\r\n                start.className = 'node';\r\n                start.isStart = false;\r\n                this.state.grid[this.state.SR][this.state.SC].isStart = false;\r\n            }\r\n            const newStart = document.getElementById(`node-${row}-${col}`);\r\n            if (newStart) {\r\n                newStart.isStart = true;\r\n                newStart.className = 'node node-start';\r\n                this.state.grid[row][col].isStart = true;\r\n            }\r\n            if (start && newStart) {\r\n                this.setState({ SR: row, SC: col });\r\n                //console.log(11, row, col, this.state.SR, this.state.SC);\r\n                //this.setState({ SR: row, SC: col });\r\n                //console.log(11, row, col, this.state.SR, this.state.SC);\r\n            }\r\n\r\n        }\r\n        else if (this.state.changingFinish && !(row === this.state.SR && col === this.state.SC)) {\r\n            const finish = document.getElementById(`node-${this.state.FR}-${this.state.FC}`);\r\n            if (finish) {\r\n                finish.className = 'node';\r\n                finish.isFinish = false;\r\n                this.state.grid[this.state.FR][this.state.FC].isFinish = false;\r\n            }\r\n            const newFinish = document.getElementById(`node-${row}-${col}`);\r\n            if (newFinish) {\r\n                newFinish.isFinish = true;\r\n                newFinish.className = 'node node-finish';\r\n                this.state.grid[row][col].isFinish = true;\r\n            }\r\n            this.setState({ FR: row, FC: col });\r\n        }\r\n        else if (this.state.mouseIsPressed) {\r\n            this.updateGridWithWall(this.state.grid, row, col);\r\n            this.setState({ mouseIsPressed: true });\r\n        }\r\n    }\r\n\r\n    handleMouseUp() {\r\n        this.setState({\r\n            changingStart: false,\r\n            changingFinish: false,\r\n            mouseIsPressed: false\r\n        });\r\n    }\r\n\r\n    updateGridWithWall(grid, row, col) {\r\n        const node = grid[row][col];\r\n        const newNode = {\r\n            ...node,\r\n            isWall: !node.isWall\r\n        }\r\n        grid[row][col] = newNode;\r\n    }\r\n\r\n    visualizePathfinding() {\r\n        if (this.state.currentAlgorithm == -1) return;\r\n        if (this.state.rendering) return;\r\n        this.setState({ visualized: true, rendering: true });\r\n        this.props.setVisualizerRendering(true);\r\n        this.componentDidMount();\r\n        const grid = this.state.grid;\r\n        const start = grid[this.state.SR][this.state.SC];\r\n        const finish = grid[this.state.FR][this.state.FC];\r\n        const visitedInOrder = this.state.pathfindingAlgorithms[this.state.currentAlgorithm](grid, start, finish);\r\n        const shortedPath = getShortestPath(finish);\r\n\r\n        for (let i = 0; i < visitedInOrder.length; i++) {\r\n            setTimeout(() => {\r\n                const node = visitedInOrder[i];\r\n                if (!node.isStart && !node.isFinish)\r\n                    document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\r\n            }, 7 * i);\r\n        }\r\n\r\n        for (let i = 0; i < shortedPath.length; i++) {\r\n            setTimeout(() => {\r\n                const node = shortedPath[i];\r\n                if (!node.isStart && !node.isFinish)\r\n                    document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-path';\r\n            }, 7 * visitedInOrder.length + 50 * i);\r\n\r\n        }\r\n        setTimeout(() => {\r\n            this.setState({ rendering: false });\r\n            this.props.setVisualizerRendering(false);\r\n        }, 7 * visitedInOrder.length + 50 * shortedPath.length);\r\n\r\n    }\r\n\r\n    clearVisualizer() {\r\n        if (!this.state.rendering)\r\n            this.setState({ grid: this.initializeGrid(true), visualized: false });\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        const grid = this.state.grid;\r\n\r\n        return (\r\n            <>\r\n                {/*\r\n                <button\r\n                    onClick={() => { this.visualizePathfinding() }}\r\n                    type=\"button\" class=\"btn btn-outline-dark\"\r\n                    disabled={this.state.rendering}>\r\n                    visualize\r\n                </button>\r\n                <button\r\n                    onClick={() => this.clearVisualizer()}\r\n                    type=\"button\" class=\"btn btn-outline-dark\"\r\n                    disabled={this.state.rendering}>\r\n                    clear\r\n            </button>*/}\r\n\r\n                <div className=\"grid\">\r\n                    {grid.map((row, rowId) => {\r\n                        return (\r\n                            <div key={rowId}>\r\n                                {row.map((node, nodeId) => {\r\n                                    const { row, col, isFinish, isStart, isWall } = node;\r\n                                    return (\r\n                                        <Node\r\n                                            key={nodeId}\r\n                                            row={row}\r\n                                            col={col}\r\n                                            isStart={isStart}\r\n                                            isFinish={isFinish}\r\n                                            isWall={isWall}\r\n                                            mouseIsPressed={this.state.mouseIsPressed}\r\n                                            onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                                            onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\r\n                                            onMouseUp={() => this.handleMouseUp()}\r\n                                        ></Node>\r\n                                    )\r\n                                })\r\n                                }\r\n                            </div>\r\n                        );\r\n                    })\r\n                    }\r\n                </div>\r\n                {/*\r\n                <button\r\n                    onClick={() => { recursiveDivisionMaze(this.state.grid); this.setState({ finish: false }) }}\r\n                    type=\"button\" class=\"btn btn-outline-dark\"\r\n                    disabled={this.state.rendering}>\r\n                    recursive maze\r\n                </button>*/}\r\n                <button\r\n                    onClick={() => { primMaze(this.state.grid); this.setState({ finish: false }) }}\r\n                    type=\"button\" class=\"btn btn-outline-dark\"\r\n                    style={{ \"margin-top\": \"5px\", \"height\": \"30px\" }}\r\n                    disabled={this.state.rendering}>\r\n                    <p style={{ \"margin-top\": \"-6px\" }}>generate maze</p>\r\n                </button>\r\n            </>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './Pile.css';\r\n\r\nexport default class Pile extends Component {\r\n    render() {\r\n        const {\r\n            val,\r\n            isChanging,\r\n            finished,\r\n            colorSetIndex,\r\n            changingColors = [`rgb(228, 230, 120)`, `rgb(155, 147, 229)`, `rgb(248, 250, 140)`],\r\n            normalColors = [`rgb(200,${(1 - val / 45) * 255 + 50}, 255)`, `rgb(250,200, ${(1 - val / 80) * 255})`, `rgb( ${(1 - val / 80) * 255},200,250)`],\r\n        } = this.props;\r\n\r\n        let extraClassName = '';\r\n        if (isChanging) {\r\n            extraClassName = '-changing';\r\n        }\r\n        if (finished) {\r\n            extraClassName = '-finished';\r\n        }\r\n        let color = extraClassName === '-changing' ? changingColors[colorSetIndex] : normalColors[colorSetIndex];\r\n        return (\r\n            <>\r\n                <div\r\n                    className={'pile' + extraClassName}\r\n                    style={{ height: `${val * 10}px`, background: color }}\r\n\r\n                >\r\n                    <p className='value'>{val}</p>\r\n                </div >\r\n            </>\r\n\r\n        );\r\n    }\r\n\r\n}","function swap(piles, a, b) {\r\n    const tempVal = piles[a];\r\n    piles[a] = piles[b];\r\n    piles[b] = tempVal;\r\n}\r\n\r\nfunction selectionSort(piles) {\r\n\r\n    let statesInOrder = [];\r\n    for (let i = 0; i < piles.length - 1; i++) {\r\n        let minId = i;\r\n        for (let j = i + 1; j < piles.length; j++) {\r\n            if (piles[j] < piles[minId]) {\r\n                minId = j;\r\n            }\r\n            const temp = { piles: piles.slice(), changing: [j] };\r\n            statesInOrder.push(temp);\r\n\r\n        }\r\n        swap(piles, minId, i);\r\n        const temp = { piles: piles.slice(), changing: [minId, i] };\r\n        statesInOrder.push(temp);\r\n    }\r\n    return statesInOrder;\r\n}\r\n\r\nfunction bubbleSort(piles) {\r\n    //optimized !\r\n    let statesInOrder = [];\r\n    let n = piles.length;\r\n    while (n > 1) {\r\n        let newN = 0;\r\n        for (let i = 1; i < n; i++) {\r\n            if (piles[i - 1] > piles[i]) {\r\n                swap(piles, i - 1, i);\r\n                newN = i;\r\n                const temp = { piles: piles.slice(), changing: [i] };\r\n                statesInOrder.push(temp);\r\n            }\r\n        }\r\n        n = newN;\r\n    }\r\n    return statesInOrder;\r\n}\r\n\r\nfunction insertionSort(piles) {\r\n    let statesInOrder = [];\r\n    for (let i = 1; i < piles.length; i++) {\r\n        for (let j = i; j > 0 && piles[j - 1] > piles[j]; j--) {\r\n            swap(piles, j, j - 1);\r\n            const temp = { piles: piles.slice(), changing: [j - 1] };\r\n            statesInOrder.push(temp);\r\n        }\r\n    }\r\n    console.log(statesInOrder);\r\n    return statesInOrder;\r\n}\r\n\r\nfunction mergeSort(piles) {\r\n    let statesInOrder = [];\r\n    mergeSortHelper(piles, 0, piles.length - 1, statesInOrder);\r\n    return statesInOrder;\r\n}\r\n\r\nfunction mergeSortHelper(piles, start, end, statesInOrder) {\r\n    if (start === end) return;\r\n    const mid = Math.floor((start + end) / 2);\r\n    mergeSortHelper(piles, start, mid, statesInOrder);\r\n    mergeSortHelper(piles, mid + 1, end, statesInOrder);\r\n    merge(piles, start, mid, end, statesInOrder);\r\n}\r\n\r\nfunction merge(piles, start, mid, end, statesInOrder) {\r\n    let k = start, i = start, j = mid + 1;\r\n    let pilesC = piles.slice();\r\n    while (i <= mid && j <= end) {\r\n        //let changing = [i, j, k];\r\n        if (pilesC[i] <= pilesC[j]) {\r\n            piles[k++] = pilesC[i++];\r\n        }\r\n        else {\r\n            piles[k++] = pilesC[j++];\r\n        }\r\n        const temp = { piles: piles.slice(), changing: [i, j, k] };\r\n        statesInOrder.push(temp);\r\n\r\n    }\r\n    while (i <= mid) {\r\n        piles[k++] = pilesC[i++];\r\n        const temp = { piles: piles.slice(), changing: [i, k] };\r\n        statesInOrder.push(temp);\r\n    }\r\n    while (j <= end) {\r\n        piles[k++] = pilesC[j++];\r\n        const temp = { piles: piles.slice(), changing: [j, k] };\r\n        statesInOrder.push(temp);\r\n    }\r\n}\r\n\r\n\r\nfunction quickSort(piles) {\r\n    let statesInOrder = [];\r\n    quickSortHelper(piles, 0, piles.length - 1, statesInOrder);\r\n    return statesInOrder;\r\n}\r\n\r\nfunction quickSortHelper(piles, start, end, statesInOrder) {\r\n    if (start < end) {\r\n        let pivot = partition(piles, start, end, statesInOrder);\r\n        quickSortHelper(piles, start, pivot - 1, statesInOrder);\r\n        quickSortHelper(piles, pivot + 1, end, statesInOrder);\r\n    }\r\n}\r\n\r\nfunction partition(piles, start, end, statesInOrder) {\r\n    let pivot = piles[end];\r\n    let i = start - 1;\r\n    for (let j = start; j <= end - 1; j++) {\r\n        if (piles[j] < pivot) {\r\n            i++;\r\n            swap(piles, i, j);\r\n            const temp = { piles: piles.slice(), changing: [i, j] };\r\n            statesInOrder.push(temp);\r\n        }\r\n    }\r\n    swap(piles, i + 1, end);\r\n    const temp = { piles: piles.slice(), changing: [i + 1, end] };\r\n    statesInOrder.push(temp);\r\n    statesInOrder.push(temp);\r\n    return i + 1;\r\n}\r\n\r\nexport { selectionSort, bubbleSort, insertionSort, mergeSort, quickSort };","import React, { Component } from 'react';\r\nimport './SortingVisualizer.css';\r\nimport Pile from './Pile/Pile';\r\nimport { selectionSort, bubbleSort, insertionSort, mergeSort, quickSort } from '../Algorithm/sortingAlgorithms';\r\n\r\nexport default class SortingVisualizer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            piles: [],\r\n            numPiles: 40,\r\n            finished: false,\r\n            maxPile: 80,\r\n            changingPiles: [],\r\n            pileDelayTimes: [30, 40, 40, 80, 80],\r\n            colorSetIndex: getRandomInt(0, 3),\r\n            currentAlgorithm: -1,\r\n            unsortedPiles: [],\r\n            algorithms: ['Selection Sort', 'Bubble Sort', 'Insertion Sort', 'Merge Sort', 'Quick Sort'],\r\n            sortingAlgorithms: [selectionSort, bubbleSort, insertionSort, mergeSort, quickSort]\r\n        };\r\n        this.randomizePiles = this.randomizePiles.bind(this);\r\n        this.visualizeSorting = this.visualizeSorting.bind(this);\r\n        this.setAlgorithm = this.setAlgorithm.bind(this);\r\n        this.props.getFunctions(this.visualizeSorting, this.randomizePiles, this.setAlgorithm, this.state.algorithms);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const piles = this.initializePiles();\r\n        this.setState({\r\n            piles: piles,\r\n        });\r\n        this.setState({ piles: piles, unsortedPiles: piles.slice() });\r\n    }\r\n\r\n    setAlgorithm(algoId) {\r\n        if (this.state.unsortedPiles !== []) {\r\n            this.setState({ finished: false, changingPiles: [], piles: this.state.unsortedPiles });\r\n        }\r\n        this.setState({ currentAlgorithm: algoId });\r\n    }\r\n\r\n    initializePiles() {\r\n        let piles = [];\r\n        for (let i = 0; i < this.state.numPiles; i++) {\r\n            piles.push(i + 5);\r\n        }\r\n\r\n        for (let i = 0; i < this.state.numPiles; i++) {\r\n            //swap i and j\r\n            let j = getRandomInt(0, i);\r\n            let temp = piles[i];\r\n            piles[i] = piles[j];\r\n            piles[j] = temp;\r\n        }\r\n        piles.push(this.state.numPiles + 5);\r\n        return piles;\r\n    }\r\n\r\n    visualizeSorting() {\r\n        if (this.state.currentAlgorithm === -1) {\r\n            return;\r\n        }\r\n        if (this.state.rendering) return;\r\n        if (this.state.finished) {\r\n            console.log(1);\r\n            this.state.finished = false;\r\n            this.state.changingPiles = [];\r\n            this.state.piles = this.state.unsortedPiles;\r\n        }\r\n        this.setState({ rendering: true });\r\n        this.props.setVisualizerRendering(true);\r\n        const piles = this.state.piles.slice();\r\n\r\n        const statesInOrder = this.state.sortingAlgorithms[this.state.currentAlgorithm](piles);\r\n        for (let i = 0; i < statesInOrder.length; i++) {\r\n            const { piles: state, changing: changingPiles } = statesInOrder[i];\r\n            setTimeout(() => {\r\n                this.setState({ piles: state, changingPiles: changingPiles });\r\n            }, this.state.pileDelayTimes[this.state.currentAlgorithm] * i);\r\n\r\n        }\r\n        setTimeout(() => {\r\n            this.setState({ rendering: false, finished: true });\r\n            this.props.setVisualizerRendering(false);\r\n        }, this.state.pileDelayTimes[this.state.currentAlgorithm] * statesInOrder.length);\r\n    }\r\n\r\n    randomizePiles() {\r\n        if (this.state.rendering) return;\r\n        this.setState({ finished: false, changingPiles: [], colorSetIndex: getRandomInt(0, 3) });\r\n        const piles = this.initializePiles();\r\n        this.setState({ piles: piles, unsortedPiles: piles.slice() });\r\n    }\r\n\r\n    render() {\r\n        const piles = this.state.piles;\r\n\r\n        return (\r\n            <>\r\n                {/*\r\n                <button\r\n                    onClick={() => this.visualizeSorting()}\r\n                    type=\"button\" class=\"btn btn-outline-dark\"\r\n                    disabled={this.state.rendering}>\r\n                    Sort!\r\n                </button>\r\n                <button\r\n                    onClick={() => this.randomizePiles()}\r\n                    type=\"button\" class=\"btn btn-outline-dark\"\r\n                    disabled={this.state.rendering}>\r\n                    Randomize!\r\n                </button>*/}\r\n                <div className='piles' class=\"container\">\r\n                    {\r\n\r\n                        piles.map((pile, pileId) => {\r\n                            return (\r\n                                <Pile\r\n                                    dummy={pileId === this.state.numPiles}\r\n                                    finished={this.state.finished}\r\n                                    className='pile'\r\n                                    key={pileId}\r\n                                    val={pile}\r\n                                    isChanging={this.state.changingPiles.indexOf(pileId) !== -1}\r\n\r\n                                    colorSetIndex={this.state.colorSetIndex}\r\n                                ></Pile>\r\n                            )\r\n                        })\r\n                    }\r\n\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nfunction getRandomInt(min, range) {\r\n    return Math.floor(Math.random() * range) + min;\r\n}","import React, { Component } from 'react';\r\nimport { Stage, Layer, Rect, Line, Konva, Circle, Text } from 'react-konva';\r\nimport './PtronVisualizer.css';\r\nexport default class PtronVisualizer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            training: new Array(1000),\r\n            rendering: false,\r\n            min: -1,\r\n            max: 1,\r\n            width: 500,\r\n            height: 500,\r\n            count: 0,\r\n            ptron: null,\r\n            xOff: 50,\r\n            yOff: 100,\r\n            M: 0.4,\r\n            B: 0.3\r\n        }\r\n        this.resetVisualizer = this.resetVisualizer.bind(this);\r\n        this.startVisualizer = this.startVisualizer.bind(this);\r\n        this.props.getFunctions(this.startVisualizer, this.resetVisualizer);\r\n    }\r\n\r\n    f(x) {\r\n        return this.state.M * x + this.state.B;\r\n    }\r\n\r\n    map(n, as, ae, bs, be) {\r\n        return ((n - as) / (ae - as)) * (be - bs) + bs;\r\n    }\r\n\r\n    initialize() {\r\n        this.state.ptron = new Perceptron(3, 0.005);\r\n        for (let i = 0; i < this.state.training.length; i++) {\r\n            let x = random(this.state.min, this.state.max);\r\n            let y = random(this.state.min, this.state.max);\r\n            let answer = 1;\r\n            if (y < this.f(x)) answer = -1;\r\n            this.state.training[i] = {\r\n                input: [x, y, 1],\r\n                output: answer\r\n            }\r\n        }\r\n    }\r\n\r\n    resetVisualizer() {\r\n        if (this.state.rendering) {\r\n            return;\r\n        }\r\n        this.setState({ count: 0 });\r\n        this.state.count = 0;\r\n    }\r\n\r\n    startVisualizer() {\r\n        this.setState({ rendering: true });\r\n        this.props.setVisualizerRendering(true);\r\n        for (let i = 0; i < this.state.training.length - 1; i++) {\r\n            setTimeout(\r\n                () => {\r\n                    this.setState({ count: i });\r\n                    this.state.count = i;\r\n                    //console.log(this.state.count)\r\n                }\r\n                , 25 * i);\r\n        }\r\n        setTimeout(() => {\r\n            this.setState({ rendering: false });\r\n            this.props.setVisualizerRendering(false);\r\n        }, 25 * this.state.training.length)\r\n\r\n    }\r\n\r\n    render() {\r\n        if (this.state.count === 0) {\r\n            this.initialize();\r\n        }\r\n        let min = this.state.min;\r\n        let max = this.state.max;\r\n        let ptron = this.state.ptron;\r\n        let x1 = this.map(min, min, max, 0, this.state.width);\r\n        let y1 = this.map(this.f(min), min, max, this.state.height, 0);\r\n        let x2 = this.map(max, min, max, 0, this.state.width);\r\n        let y2 = this.map(this.f(max), min, max, this.state.height, 0);\r\n\r\n        let weights = ptron.getWeights();\r\n        let xx1 = min;\r\n        let yy1 = (-weights[2] - weights[0] * xx1) / weights[1];\r\n        let xx2 = max;\r\n        let yy2 = (-weights[2] - weights[0] * xx2) / weights[1];\r\n\r\n        xx1 = this.map(xx1, min, max, 0, this.state.width);\r\n        yy1 = this.map(yy1, min, max, this.state.height, 0);\r\n        xx2 = this.map(xx2, min, max, 0, this.state.width);\r\n        yy2 = this.map(yy2, min, max, this.state.height, 0);\r\n        //console.log(this.state.training[this.state.count]);\r\n        ptron.train(this.state.training[this.state.count].input, this.state.training[this.state.count].output);\r\n        // y = 0.3 x + 0.4\r\n        // y = -w0x - w2 / w1 \r\n        //console.log(weights[2], weights[1], weights[0]);\r\n        let points = []\r\n\r\n        for (let i = 0; i < this.state.count; i++) {\r\n            let guess = ptron.feedforward(this.state.training[i].input);\r\n            let x = this.map(this.state.training[i].input[0], min, max, 0, this.state.width);\r\n            let y = this.map(this.state.training[i].input[1], min, max, this.state.height, 0);\r\n            points.push({ x: x, y: y, fill: guess < 0 });\r\n        }\r\n        let xOff = this.state.xOff;\r\n        let yOff = this.state.yOff;\r\n        let aM = -weights[0] / weights[1];\r\n        let aB = -weights[2] / weights[1];\r\n        let eM = aM - this.state.M;\r\n        let eB = aB - this.state.B;\r\n        return (\r\n            <>\r\n                {/*\r\n                <button\r\n                    onClick={this.startVisualizer}\r\n                    type=\"button\" class=\"btn btn-outline-dark\"\r\n                    disabled={this.state.rendering}\r\n                >\r\n                    Apporximate\r\n                </button >\r\n                <button\r\n                    onClick={this.resetVisualizer}\r\n                    type=\"button\" class=\"btn btn-outline-dark\"\r\n                    disabled={this.state.rendering}\r\n                >\r\n                    Reset\r\n                </button>*/}\r\n\r\n                <Stage\r\n                    width={this.state.width * 2}\r\n                    height={this.state.height + 1}\r\n                    className='stage'\r\n                    id='stage'\r\n                >\r\n                    <Layer>\r\n                        <Line points={[0, 0, 500, 0]} stroke={'black'} ></Line>\r\n                        <Line points={[0, 0, 0, 0 + 500]} stroke={'black'}></Line>\r\n                        <Line points={[0, 0 + 500, 500 + 0, 0 + 500]} stroke={'black'} ></Line>\r\n                        <Line points={[500 + 0, 0, 500 + 0, 0 + 500]} stroke={'black'} strokeWidth={1}></Line>\r\n                        <Line\r\n                            points={[x1 + 0, 0 + y1, x2 + 0, 0 + y2]}\r\n                            stroke={'red'}\r\n                            strokeWidth={1}>\r\n                        </Line>\r\n                        <Line\r\n                            points={[xx1 + 0, 0 + yy1, xx2 + 0, 0 + yy2]}\r\n                            stroke={'blue'}\r\n                            strokeWidth={this.state.count > 0 ? 1 : 0}>\r\n                        </Line>\r\n                        {points.map((point, pointId) => {\r\n                            return (\r\n                                <Circle\r\n                                    x={point.x + 0}\r\n                                    y={point.y + 0}\r\n                                    stroke={'black'}\r\n                                    radius={3}\r\n                                    opacity={0.7}\r\n                                    fill={point.fill ? 'black' : 'white'}\r\n                                ></Circle>)\r\n                        })\r\n                        }\r\n                        <Text\r\n                            x={550}\r\n                            y={50}\r\n                            text='Function Form: Y = M * X + B'\r\n                            fontFamily='Calibri'\r\n                            fill='black'\r\n                            fontSize={25}\r\n                        ></Text>\r\n                        <Text\r\n                            x={550}\r\n                            y={80}\r\n                            text={`Original Function: M = ${this.state.M} B = ${this.state.B}`}\r\n                            fontFamily='Calibri'\r\n                            fill='black'\r\n                            fontSize={25}\r\n                        ></Text>\r\n                        <Text\r\n                            x={550}\r\n                            y={135}\r\n                            text={`Approximation:\\nM = ${aM}\\nB = ${aB}`}\r\n                            fontFamily='Calibri'\r\n                            fill='black'\r\n                            fontSize={25}\r\n                        ></Text>\r\n                        <Text\r\n                            x={550}\r\n                            y={240}\r\n                            text={`Error:\\nM: ${eM}\\nB:${eB}`}\r\n                            fontFamily='Calibri'\r\n                            fill='red'\r\n                            fontSize={25}\r\n                        ></Text>\r\n                    </Layer>\r\n\r\n                </Stage >\r\n            </>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nfunction random(min, max) {\r\n    return Math.random() * (max - min) + min;\r\n}\r\n\r\n\r\nclass Perceptron {\r\n    constructor(n, c) {\r\n        // Array of weights for inputs\r\n        this.weights = new Array(n);\r\n        // Start with random weights\r\n        for (let i = 0; i < this.weights.length; i++) {\r\n            this.weights[i] = random(-1, 1);\r\n        }\r\n        this.c = c; // learning rate/constant\r\n    }\r\n\r\n    // Function to train the Perceptron\r\n    // Weights are adjusted based on \"desired\" answer\r\n    train(inputs, desired) {\r\n        // Guess the result\r\n        let guess = this.feedforward(inputs);\r\n        // Compute the factor for changing the weight based on the error\r\n        // Error = desired output - guessed output\r\n        // Note this can only be 0, -2, or 2\r\n        // Multiply by learning constant\r\n        let error = desired - guess;\r\n        // Adjust weights based on weightChange * input\r\n        for (let i = 0; i < this.weights.length; i++) {\r\n            this.weights[i] += this.c * error * inputs[i];\r\n        }\r\n    }\r\n\r\n    // Guess -1 or 1 based on input values\r\n    feedforward(inputs) {\r\n        // Sum all values\r\n        let sum = 0;\r\n        for (let i = 0; i < this.weights.length; i++) {\r\n            sum += inputs[i] * this.weights[i];\r\n        }\r\n        // Result is sign of the sum, -1 or 1\r\n        return this.activate(sum);\r\n    }\r\n\r\n    activate(sum) {\r\n        if (sum > 0) return 1;\r\n        else return -1;\r\n    }\r\n\r\n    // Return weights\r\n    getWeights() {\r\n        return this.weights;\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport PathFindingVisualizer from './PathFindingVisualizer/PathFindingVisualizer';\r\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\r\nimport PtronVisualizer from './Perceptron/PtronVisualizer'\r\nimport './Visualizer.css'\r\n\r\nexport default class Visualizer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            mode: 'pathfinding',\r\n            rendering: false,\r\n            algorithms: [],\r\n            currentAlgorithm: null,\r\n            goFunction: () => { },\r\n            resetFunction: () => { },\r\n            setAlgorithm: () => { },\r\n            sortingClicked: false,\r\n            pathClicked: false,\r\n        };\r\n        this.getFunctions = this.getFunctions.bind(this);\r\n        this.changeRenderingState = this.changeRenderingState.bind(this);\r\n    }\r\n\r\n    changeRenderingState(rendering) {\r\n        this.setState({ rendering: rendering });\r\n    }\r\n\r\n    getFunctions(go, reset, setAlgo, algorithms) {\r\n        //console.log(go);\r\n        this.state.goFunction = go;\r\n        this.state.resetFunction = reset;\r\n        this.state.setAlgorithm = setAlgo;\r\n        this.state.algorithms = algorithms;\r\n        this.setState({ algorithms: algorithms });\r\n        //this.state.goFunction();\r\n    }\r\n\r\n    render() {\r\n        let renderObj = null;\r\n        if (this.state.mode === 'pathfinding') {\r\n            renderObj = <PathFindingVisualizer setVisualizerRendering={this.changeRenderingState} getFunctions={this.getFunctions} />;\r\n        }\r\n        else if (this.state.mode === 'sorting') {\r\n            renderObj = <SortingVisualizer setVisualizerRendering={this.changeRenderingState} getFunctions={this.getFunctions} />;\r\n        }\r\n        else if (this.state.mode === 'perceptron') {\r\n            renderObj = <PtronVisualizer setVisualizerRendering={this.changeRenderingState} getFunctions={this.getFunctions}></PtronVisualizer>\r\n        }\r\n        else {\r\n            renderObj =\r\n                <div class=\"welbotron\">\r\n                    <div class=\"container welc\">\r\n                        <h1 class='welcome'>Hello, algorithms.\r\n                            <p class='quote'>\"An algorithm must be seen to be believed.\"</p>\r\n                            <p class=\"lead\">This website might help you understand algorithms better by visualizing them.</p>\r\n                            <p class=\"secondline lead\">Click on one of the categories below to visualize algorithms.</p>\r\n                        </h1>\r\n                        <a href='#' className='mainpage b' onClick={() => {\r\n                            if (!this.state.rendering) {\r\n                                this.setState({ mode: 'pathfinding' });\r\n                                this.setState({ currentAlgorithm: null, pathClicked: true });\r\n                            }\r\n                        }} data-toggle={this.state.pathClicked ? \"\" : \"modal\"} data-target=\"#pathIntroModal\">\r\n                            <span></span>\r\n                            PATH-FINDING\r\n                        </a>\r\n                        <a href='#' className='mainpage b' onClick={() => {\r\n                            if (!this.state.rendering) {\r\n                                this.setState({ mode: 'sorting', currentAlgorithm: null, sortingClicked: true });\r\n                            }\r\n                        }} data-toggle={this.state.sortingClicked ? \"\" : \"modal\"} data-target=\"#sortingIntroModal\">\r\n                            <span></span>\r\n                            SORTING\r\n                        </a>\r\n                        <a href='#' className='mainpage b' onClick={() => {\r\n                            if (!this.state.rendering) {\r\n                                this.setState({ mode: 'perceptron' });\r\n                            }\r\n                        }}>\r\n                            <span></span>\r\n                            Machine-Learning\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n        }\r\n        let invisibleOrNot = '';\r\n        if (this.state.mode === 'main') invisibleOrNot = ' invisible';\r\n        let algorithms = this.state.algorithms;\r\n        return (\r\n            <>\r\n                <nav class=\"navbar navbar-expand-lg navbar-light fixed-top bg-dark\">\r\n\r\n                    <button\r\n                        onClick={() => {\r\n                            if (!this.state.rendering) {\r\n                                this.setState({ mode: 'main' });\r\n                            }\r\n                        }}\r\n                        type=\"button\" class=\"btn btn-dark navbtn\"\r\n                        disabled={this.state.rendering}\r\n                    >Main</button>\r\n                    <button\r\n                        onClick={() => {\r\n                            if (!this.state.rendering) {\r\n                                this.setState({ mode: 'pathfinding' });\r\n                                this.setState({ currentAlgorithm: null, pathClicked: true });\r\n                            }\r\n                        }}\r\n                        type=\"button\" class=\"btn btn-dark navbtn\" data-toggle={this.state.pathClicked ? \"\" : \"modal\"} data-target=\"#pathIntroModal\"\r\n                        disabled={this.state.rendering}\r\n                    >Pathfinding</button>\r\n                    <button\r\n                        onClick={() => {\r\n                            if (!this.state.rendering) {\r\n                                this.setState({ mode: 'sorting', currentAlgorithm: null, sortingClicked: true });\r\n                            }\r\n                        }}\r\n                        type=\"button\" class=\"btn btn-dark navbtn\" data-toggle={this.state.sortingClicked ? \"\" : \"modal\"} data-target=\"#sortingIntroModal\"\r\n                        disabled={this.state.rendering}\r\n                    >Sorting</button>\r\n                    <button\r\n                        onClick={() => {\r\n                            if (!this.state.rendering) {\r\n                                this.setState({ mode: 'perceptron' });\r\n                                this.setState({ currentAlgorithm: null });\r\n                            }\r\n                        }}\r\n                        type=\"button\" class=\"btn btn-dark navbtn\"\r\n                        disabled={this.state.rendering}\r\n                    >MachineLearning</button>\r\n                    <div class={\"dropdown\" + invisibleOrNot}>\r\n                        <button class=\"btn btn-light dropdown-toggle navbtn\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" disabled={this.state.rendering}>\r\n                            Actions\r\n                        </button>\r\n                        <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n                            <li>\r\n                                <button type=\"button\" class=\"btn btn-light navbtn\" onClick={() => this.state.goFunction()} data-toggle={this.state.currentAlgorithm === null ? \"modal\" : \"\"} data-target=\"#setAlgoModal\">Go!</button>\r\n                                <button type=\"button\" class=\"btn btn-light navbtn\" onClick={() => this.state.resetFunction()}>Reset</button>\r\n                            </li>\r\n                        </div>\r\n                    </div>\r\n                    <div class={\"dropdown\" + invisibleOrNot}>\r\n                        <button class=\"btn btn-secondary dropdown-toggle navbtn\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" disabled={this.state.rendering}>\r\n                            {this.state.currentAlgorithm == null ? 'Algorithms' : this.state.currentAlgorithm}\r\n                        </button>\r\n                        <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n                            <li>\r\n                                {algorithms.map((algorithm, algoId) => {\r\n                                    return (<button type=\"button\" class=\"btn btn-light navbtn\" onClick={() => {\r\n                                        this.state.setAlgorithm(algoId);\r\n                                        this.setState({ currentAlgorithm: this.state.algorithms[algoId] });\r\n                                    }}>{algorithm}</button>);\r\n                                }\r\n                                )\r\n                                }\r\n                            </li>\r\n                        </div>\r\n                    </div>\r\n                </nav>\r\n                <div class=\"modal fade\" id=\"setAlgoModal\" role=\"dialog\">\r\n                    <div class=\"modal-dialog\">\r\n                        <div class=\"modal-content\">\r\n\r\n                            <div class=\"modal-header\">\r\n                                <h5 class=\"modal-title\">No Algorithm Selected</h5>\r\n                                <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\r\n                            </div>\r\n\r\n                            <div class=\"modal-body-alert\">\r\n                                <p>Please select an algorithm first.</p>\r\n                            </div>\r\n                            <div class=\"modal-footer\">\r\n                                <button type=\"button\" class=\"btn btn-dark\" data-dismiss=\"modal\" style={{ width: '100px' }}>OK</button>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n                <div class=\"modal fade\" id=\"pathIntroModal\" role=\"dialog\">\r\n                    <div class=\"modal-dialog\">\r\n                        <div class=\"modal-content intro\">\r\n\r\n                            <div class=\"modal-header\">\r\n                                <h5 class=\"modal-title\">Pathfinding</h5>\r\n                                <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\r\n                            </div>\r\n\r\n                            <div class=\"modal-body intro\">\r\n                                <p>\r\n                                    Pathfinding is generally the process of finding a route between two points. It is closely related to the shortest path problem in graph theory,\r\n                                    which examines how to identify the \"best\" paths valued by different criteria (Ex. distance, cost, time consumption).\r\n                                </p>\r\n                                <p>Pathfinding is also similar to Searching in some circumstances. For instance, we can use [breadth-first search] to find the shortest path in a grid world.</p>\r\n                                <p>\r\n                                    In our scenario, the paths are valued by the number of cells they passed from START:\r\n                                    <div class=\"simg\" width=\"20\" height=\"20\"></div>\r\n                                    to the TARGET:\r\n                                    <div class=\"fimg\" width=\"20\" height=\"20\"></div>\r\n                                    .\r\n                                </p>\r\n                                <p>You may drag the START and TARGET icons to change their positions, and click on the blank nodes to add Walls.</p>\r\n\r\n                                <p>Now please choose a sorting algorithm and visualize it!</p>\r\n                                <p class='tips'>(after choosing an algorithm, click on the [Actions] button.)</p>\r\n                            </div>\r\n                            <div class=\"modal-footer\">\r\n                                <button type=\"button\" class=\"btn btn-dark\" data-dismiss=\"modal\" style={{ width: '100px' }}>OK</button>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n                <div class=\"modal fade\" id=\"sortingIntroModal\" role=\"dialog\">\r\n                    <div class=\"modal-dialog\">\r\n                        <div class=\"modal-content intro\">\r\n\r\n                            <div class=\"modal-header\">\r\n                                <h5 class=\"modal-title\">Sorting</h5>\r\n                                <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\r\n                            </div>\r\n\r\n                            <div class=\"modal-body intro\">\r\n                                <p>Sorting is a process of arranging an ordered sequence. It is a common operation in many applications.</p>\r\n                                <p>Common uses of sorted sequences are:\r\n                                    <div class='uses-list'>\r\n                                        <p>·lookup or search efficiently</p>\r\n                                        <p>·merge sequences efficiently</p>\r\n                                        <p>·process data in a defined order</p>\r\n                                    </div>\r\n                                Now please choose a sorting algorithm and visualize it!\r\n                                </p>\r\n                                <p class='tips'>(after choosing an algorithm, click on the [Actions] button.)</p>\r\n                            </div>\r\n                            <div class=\"modal-footer\">\r\n                                <button type=\"button\" class=\"btn btn-dark\" data-dismiss=\"modal\" style={{ width: '100px' }}>OK</button>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <div>{renderObj}</div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Visualizer from './Visualizer';\r\nimport 'bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport 'bootstrap/dist/js/bootstrap.js';\r\nimport $ from 'jquery';\r\nimport { BrowserRouter, Index, Route } from 'react-router-dom';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <>\r\n      <meta charset=\"utf-8\" />\r\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\r\n\r\n      <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\" integrity=\"sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z\" crossorigin=\"anonymous\"></link>\r\n      <div className=\"App\">\r\n        <BrowserRouter basename={'JasonFengGit.github.io/'}>\r\n          <Visualizer></Visualizer>\r\n        </BrowserRouter>\r\n      </div >\r\n      <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\" integrity=\"sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj\" crossorigin=\"anonymous\"></script>\r\n      <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js\" integrity=\"sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN\" crossorigin=\"anonymous\"></script>\r\n      <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\" integrity=\"sha384-B4gt1jrGC7Jh4AgTPSdUtOBvfO8shuf57BaghqFfPlYxofvL8/KUEfYiJOMMV+rV\" crossorigin=\"anonymous\"></script>\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport Visualizer from './Visualizer';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App class='app'></App>, document.getElementById('root'));\r\nserviceWorker.unregister();"],"sourceRoot":""}