{"version":3,"sources":["PathFindingVisualizer/Node/Node.jsx","Algorithm/pathfindingAlgorithms.js","PathFindingVisualizer/PathFindingVisualizer.jsx","SortingVisualizer/Pile/Pile.jsx","Algorithm/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","AIVisualizer/Perceptron/Perceptron.js","AIVisualizer/Perceptron/PtronVisualizer.jsx","AIVisualizer/PongVisualizer/PongAgent.js","AIVisualizer/PongVisualizer/PongVisualizer.jsx","AIVisualizer/ConnectFourVisualizer/MinimaxAgent.js","AIVisualizer/ConnectFourVisualizer/ConnectFour.jsx","AIVisualizer/AIVisualizer.jsx","Visualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","row","col","isFinish","isStart","onMouseDown","onMouseEnter","onMouseUp","isWall","extraClassName","id","className","Component","dijkstra","grid","start","finish","visitedInOrder","distance","unvisited","allNodes","length","sort","a","b","closest","shift","Infinity","isVisited","push","updateUnvisitedNeighbors","DFS","node","pop","concat","getUNeighbors","BFS","neighbors","reN","index","neighbor","previousNode","AStar","heuristic","cur","updateUnvisitedNeighborsStar","manhattanDistance","ar","ac","br","bc","Math","abs","re","randomInt","min","max","floor","random","randomSelect","path","getNeighbors","visited","points","height","width","pRe","validate","slice","connected","unconnected","forEach","nr","nc","ir","ic","c","u","connect","makeWall","isW","newNode","PathFindingVisualizer","state","FR","FC","mouseIsPressed","changingStart","changingFinish","visualized","rendering","numRow","numCol","SR","SC","currentAlgorithm","algorithms","pathfindingAlgorithms","visualizePathfinding","bind","clearVisualizer","setAlgorithm","getFunctions","algoId","setState","initializeGrid","clearWall","currentRow","element","document","getElementById","createNode","updateGridWithWall","newFinish","newStart","setVisualizerRendering","g","shortedPath","unshift","getShortestPath","i","setTimeout","map","rowId","key","nodeId","handleMouseDown","handleMouseEnter","handleMouseUp","onClick","j","splice","rn","primMaze","type","class","style","disabled","Pile","val","isChanging","finished","colorSetIndex","changingColors","normalColors","color","background","swap","piles","tempVal","selectionSort","statesInOrder","minId","temp","changing","bubbleSort","n","newN","insertionSort","console","log","mergeSort","mergeSortHelper","end","mid","k","pilesC","merge","quickSort","quickSortHelper","pivot","partition","SortingVisualizer","numPiles","maxPile","changingPiles","pileDelayTimes","getRandomInt","unsortedPiles","sortingAlgorithms","randomizePiles","visualizeSorting","initializePiles","pile","pileId","dummy","indexOf","range","Perceptron","weights","Array","inputs","desired","error","feedforward","sum","activate","PtronVisualizer","training","count","ptron","xOff","yOff","M","B","resetVisualizer","startVisualizer","x","as","ae","bs","be","y","answer","f","input","output","initialize","x1","y1","x2","y2","getWeights","xx1","yy1","xx2","yy2","train","guess","fill","textComponet","aM","aB","eM","eB","text","fontFamily","fontSize","circles","point","pointId","stroke","radius","opacity","all","name","ref","layer","strokeWidth","ax","ay","bx","by","sqrt","PongAgent","speed","discount","epsilon","alpha","featureList","action","dots","minDis","d","px","vx","vy","terminal","getMove","features","minDisToDot","result","getFeatures","feature","nextState","reward","diff","getValue","getQ","p","curActions","actions","getPolicy","reAction","maxQ","PongVisualizer","r","ballSpeed","panelx","panely","panelSpeed","ballInitialized","framecount","score","pressedLeft","pressedRight","humanMode","gameCount","agent","notStarted","setReleased","setPressed","componentDidMount","addEventListener","evt","keyCode","ox","ovx","ovy","storedWeights","movePanel","goMouseEnter","onMouseLeave","marginTop","marginLeft","w1","w2","w3","getState","getAction","curScore","curGameCount","updateBall","updateDots","updatePanel","update","NaN","dot","dotId","MinimaxAgent","board","depth","scores","cache","getActions","maxVal","maxValAction","boardCopy","minimax","tryMove","colId","newCol","reverse","four","tar","count1","countN","count2","scoreFour","isMax","beta","toHash","checkWinner","getScore","Piece","Col","handleClick","handleEnter","handleLeave","pieces","ConnectFour","currentPlayer","lastBoards","colors","winner","minimaxAgent","reset","setDepth","move","AITakeMove","cols","position","undo","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","textAlign","checkFour","AIVisualizer","visualizeAI","getAIFunctions","newScript","run","url","script","createElement","src","body","appendChild","renderObj","Visualizer","mode","goFunction","resetFunction","sortingClicked","pathClicked","AIClicked","aicount","changeRenderingState","go","setAlgo","interval","springConfig","stiffness","adjustingSpeed","href","data-target","invisibleOrNot","algorithm","role","data-dismiss","App","charset","content","rel","integrity","crossorigin","basename","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8a291e9e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n    render() {\r\n        const {\r\n            row,\r\n            col,\r\n            isFinish,\r\n            isStart,\r\n            onMouseDown,\r\n            onMouseEnter,\r\n            onMouseUp,\r\n            isWall,\r\n        } = this.props;\r\n        const extraClassName = isFinish\r\n            ? 'node-finish'\r\n            : isStart\r\n                ? 'node-start'\r\n                : isWall\r\n                    ? 'node-wall'\r\n                    : '';\r\n        return (\r\n            <div\r\n                id={`node-${row}-${col}`}\r\n                className={`node ${extraClassName}`}\r\n                onMouseDown={() => onMouseDown(row, col)}\r\n                onMouseEnter={() => onMouseEnter(row, col)}\r\n                onMouseUp={() => onMouseUp()}>\r\n            </div>\r\n        );\r\n    }\r\n}","import { createPortal } from \"react-dom\";\r\n\r\nfunction dijkstra(grid, start, finish) {\r\n    const visitedInOrder = [];\r\n    start.distance = 0;\r\n    const unvisited = allNodes(grid);\r\n    while (unvisited.length) {\r\n        sortNodes(unvisited);\r\n        const closest = unvisited.shift();\r\n        if (closest === finish) {\r\n            return visitedInOrder;\r\n        }\r\n        if (closest.isWall) continue;\r\n        if (closest.distance === Infinity) return visitedInOrder;\r\n        closest.isVisited = true;\r\n        visitedInOrder.push(closest);\r\n\r\n        updateUnvisitedNeighbors(closest, grid);\r\n    }\r\n    return visitedInOrder;\r\n}\r\n\r\nfunction DFS(grid, start, finish) {\r\n    const visitedInOrder = [];\r\n    let unvisited = [];\r\n    unvisited.push(start);\r\n    let count = 0;\r\n    while (unvisited.length) {\r\n        const node = unvisited.pop();\r\n        if (node === finish) {\r\n            return visitedInOrder;\r\n        }\r\n        if (node.isWall) continue;\r\n        node.isVisited = true;\r\n        visitedInOrder.push(node);\r\n\r\n        unvisited = unvisited.concat(getUNeighbors(node, grid));\r\n        count++;\r\n    }\r\n\r\n    return visitedInOrder;\r\n}\r\n\r\nfunction BFS(grid, start, finish) {\r\n    /*\r\n    let nodes = [];\r\n    start.distance = 0;\r\n    nodes.push(start);\r\n    console.log(nodes, start);\r\n    const visitedInOrder = [];\r\n    let count = 0;\r\n    let visited = [];\r\n    while (nodes.length && count < 1000) {\r\n        const cur = nodes.shift();\r\n        const { row: row, col: col } = cur;\r\n        visited.push({ row: row, col: col });\r\n        if (cur.isFinish) return visitedInOrder;\r\n        if (cur.isWall) continue;\r\n\r\n        visitedInOrder.push(cur);\r\n        const neighbors = getUnvisitedNeighbors(cur, grid, visited);\r\n        console.log(visitedInOrder, neighbors.length, count);\r\n        console.log(visited.slice());\r\n        nodes = nodes.concat(neighbors);\r\n        count += 1;\r\n    }\r\n    return visitedInOrder;*/\r\n    const visitedInOrder = [];\r\n    let unvisited = [];\r\n    unvisited.push(start);\r\n    let count = 0;\r\n    while (unvisited.length) {\r\n        const node = unvisited.shift();\r\n        if (node === finish) {\r\n            return visitedInOrder;\r\n        }\r\n        if (node.isWall) continue;\r\n        node.isVisited = true;\r\n        visitedInOrder.push(node);\r\n\r\n        unvisited = unvisited.concat(getUNeighbors(node, grid));\r\n        count++;\r\n    }\r\n\r\n    return visitedInOrder;\r\n}\r\n\r\nfunction visitedTest(visited, ele) {\r\n    const { row: row, col: col } = ele;\r\n    for (let i = 0; i < visited.length; i++) {\r\n        const { row: r, col: c } = visited[i];\r\n        if (r === row && c == col) return true;\r\n\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction getUNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const reN = [];\r\n    const { row, col } = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n\r\n    for (let index = 0; index < neighbors.length; index++) {\r\n        const neighbor = neighbors[index];\r\n        if (!neighbor.isVisited) {\r\n            neighbor.previousNode = node;\r\n            neighbor.isVisited = true;\r\n            reN.push(neighbor);\r\n        }\r\n    }\r\n    return reN;\r\n\r\n}\r\n\r\nfunction AStar(grid, start, finish) {\r\n    const visitedInOrder = [];\r\n    start.distance = 0;\r\n    start.heuristic = 0;\r\n    const unvisited = allNodes(grid);\r\n    while (unvisited.length) {\r\n        sortNodesStar(unvisited);\r\n        const cur = unvisited.shift();\r\n        if (cur === finish) {\r\n            return visitedInOrder;\r\n        }\r\n        if (cur.isWall) continue;\r\n        if (cur.distance + cur.heuristic === Infinity) return visitedInOrder;\r\n        cur.isVisited = true;\r\n        visitedInOrder.push(cur);\r\n\r\n        updateUnvisitedNeighborsStar(cur, grid, finish);\r\n    }\r\n    return visitedInOrder;\r\n}\r\n\r\nfunction updateUnvisitedNeighborsStar(cur, grid, finish) {\r\n    const neighbors = [];\r\n    const { row, col } = cur;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    for (const neighbor of neighbors) {\r\n        if (!neighbor.isVisited) {\r\n            neighbor.distance = cur.distance + 1;\r\n            neighbor.heuristic = manhattanDistance(neighbor, finish);\r\n            neighbor.previousNode = cur;\r\n        }\r\n    }\r\n}\r\n\r\nfunction manhattanDistance(a, b) {\r\n    let { row: ar, col: ac } = a;\r\n    let { row: br, col: bc } = b;\r\n    return Math.abs(ar - br) + Math.abs(ac - bc);\r\n}\r\n\r\nfunction allNodes(grid) {\r\n    const re = [];\r\n    for (const row of grid) {\r\n        for (const node of row) {\r\n            re.push(node);\r\n        }\r\n    }\r\n    return re;\r\n}\r\n\r\nfunction sortNodesStar(nodes) {\r\n    nodes.sort((a, b) => (a.distance + a.heuristic) - (b.distance + b.heuristic));\r\n}\r\n\r\n\r\nfunction sortNodes(nodes) {\r\n    nodes.sort((a, b) => a.distance - b.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(closest, grid) {\r\n    const neighbors = [];\r\n    const { row, col } = closest;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    for (const neighbor of neighbors) {\r\n        if (!neighbor.isVisited) {\r\n            neighbor.distance = closest.distance + 1;\r\n            neighbor.previousNode = closest;\r\n        }\r\n    }\r\n}\r\n\r\nfunction getShortestPath(finish) {\r\n    const path = [];\r\n    let cur = finish;\r\n    while (cur !== null) {\r\n        path.unshift(cur);\r\n        cur = cur.previousNode;\r\n    }\r\n    return path;\r\n}\r\n\r\nfunction randomInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction deepCopy(maze) {\r\n    let cMaze = [];\r\n    for (let row = 0; row < maze.length; row++) {\r\n        cMaze.push(maze[row].slice());\r\n    }\r\n    return cMaze;\r\n}\r\n\r\nfunction primMaze(grid) {\r\n    let sr = 7, sc = 17; // set a starting point for generating maze\r\n    let height = grid.length, width = grid[0].length;\r\n    for (let i = 0; i < height; i++) {\r\n        for (let j = 0; j < width; j++) {\r\n            makeWall(grid, i, j, false);\r\n        }\r\n\r\n    }\r\n    for (let i = 0; i < height; i++) {\r\n        for (let j = i % 2 + 1; j < width; j += i % 2 + 1) {\r\n            makeWall(grid, i, j, true);\r\n        }\r\n    }\r\n    for (let i = 0; i < height; i++) {\r\n        makeWall(grid, i, 0, true);\r\n    }\r\n    let visited = [];\r\n    let path = [{ row: sr, col: sc }];\r\n    let count = 0;\r\n    while (path.length > 0) {\r\n        const index = randomSelect(path);\r\n        const node = path[index];\r\n        path.splice(index, 1);\r\n        visited = visited.concat([node]);\r\n        const { c: connected, u: unconnected } = getNeighbors(grid, visited, node);\r\n        if (connected.length > 0) {\r\n            let rn = randomSelect(connected);\r\n            connect(grid, node, connected[rn]);\r\n            connected.splice(rn);\r\n        }\r\n        path = path.concat(unconnected);\r\n\r\n        count++;\r\n    }\r\n}\r\n\r\nfunction randomSelect(path) {\r\n    return randomInt(0, path.length - 1);\r\n}\r\n\r\nfunction validate(grid, points) {\r\n    let height = grid.length, width = grid[0].length;\r\n    let pRe = [];\r\n    for (let index = 0; index < points.length; index++) {\r\n        let { row, col } = points[index];\r\n        if ((0 <= row && row < height && 0 <= col && col < width)) {\r\n            pRe.push(points[index]);\r\n        }\r\n    }\r\n    return pRe;\r\n\r\n}\r\n\r\nfunction isVisited(visited, node) {\r\n    let { row: nr, col: nc } = node;\r\n    for (let index = 0; index < visited.length; index++) {\r\n        let { row: ir, col: ic } = visited[index];\r\n        if (nr === ir && nc === ic) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction getNeighbors(grid, visited, node) {\r\n    let { row, col } = node;\r\n    let neighbors = [{ row: row + 2, col: col }, { row: row - 2, col: col }, { row: row, col: col + 2 }, { row: row, col: col - 2 }];\r\n    neighbors = validate(grid, neighbors.slice());\r\n    let connected = [];\r\n    let unconnected = [];\r\n    neighbors.forEach(neighbor => {\r\n        if (isVisited(visited, neighbor)) {\r\n            connected.push(neighbor);\r\n        }\r\n        else {\r\n            unconnected.push(neighbor);\r\n        }\r\n    });\r\n    return { c: connected, u: unconnected };\r\n}\r\n\r\nfunction connect(grid, a, b) {\r\n    let { row: ar, col: ac } = a;\r\n    let { row: br, col: bc } = b;\r\n    let row = (ar + br) / 2;\r\n    let col = (ac + bc) / 2;\r\n    makeWall(grid, row, col, false);\r\n}\r\n\r\nfunction recursiveDivisionMaze(grid) {\r\n    let height = grid.length, width = grid[0].length;\r\n\r\n    recursiveDivision(grid, width, height, 0, 0, 0);\r\n\r\n}\r\n\r\n\r\nfunction makeWall(grid, row, col, isW) {\r\n    const node = grid[row][col];\r\n    const newNode = {\r\n        ...node,\r\n        isWall: isW,\r\n    }\r\n    grid[row][col] = newNode;\r\n}\r\n\r\nfunction buildWall(grid, width, height, xo, yo, wallId, horizontal) {\r\n    if (horizontal) {\r\n        for (let i = xo + 1; i < width - 1; i++) {\r\n            makeWall(grid, wallId, i, true);\r\n        }\r\n    }\r\n    else {\r\n        for (let i = yo + 1; i < height - 1; i++) {\r\n            makeWall(grid, i, wallId, true);\r\n        }\r\n    }\r\n}\r\n\r\nfunction recursiveDivision(grid, width, height, xo, yo, count) {\r\n    if (width - xo < 2 || height - yo < 2) {\r\n        return;\r\n    }\r\n    let horizontal = randomInt(0, 1) == 0;\r\n    let wallId = randomInt(horizontal ? yo : xo, horizontal ? height - 1 : width - 1);\r\n    buildWall(grid, width, height, xo, yo, wallId, horizontal);\r\n\r\n    let pathId = randomInt(!horizontal ? yo : xo, !horizontal ? height - 1 : width - 1);\r\n\r\n    if (horizontal) {\r\n        makeWall(grid, wallId, pathId, false);\r\n        recursiveDivision(grid, width, wallId - 1, xo, yo, count + 1);\r\n        recursiveDivision(grid, width, height, xo, wallId, count + 1);\r\n    }\r\n    else {\r\n        makeWall(grid, pathId, wallId, false);\r\n        recursiveDivision(grid, wallId - 1, height, xo, yo, count + 1);\r\n        recursiveDivision(grid, width, height, wallId, yo, count + 1);\r\n    }\r\n}\r\n\r\nexport { dijkstra, BFS, DFS, AStar, getShortestPath, recursiveDivisionMaze, primMaze };","import React, { Component } from 'react';\r\nimport Node from './Node/Node';\r\nimport { dijkstra, BFS, DFS, AStar, getShortestPath, recursiveDivisionMaze, primMaze } from '../Algorithm/pathfindingAlgorithms';\r\nimport './PathFindingVisualizer.css';\r\n\r\nexport default class PathFindingVisualizer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            grid: [],\r\n            FR: 7,\r\n            FC: 31,\r\n            mouseIsPressed: false,\r\n            changingStart: false,\r\n            changingFinish: false,\r\n            visualized: false,\r\n            rendering: false,\r\n            numRow: 17,\r\n            numCol: 37,\r\n            SR: 7,\r\n            SC: 5,\r\n            currentAlgorithm: -1,\r\n            algorithms: ['BFS', 'Dijkstra', 'A Star', 'DFS'],\r\n            pathfindingAlgorithms: [BFS, dijkstra, AStar, DFS]\r\n        };\r\n        this.visualizePathfinding = this.visualizePathfinding.bind(this);\r\n        this.clearVisualizer = this.clearVisualizer.bind(this);\r\n        this.setAlgorithm = this.setAlgorithm.bind(this);\r\n        this.props.getFunctions(this.visualizePathfinding, this.clearVisualizer, this.setAlgorithm, this.state.algorithms);\r\n    }\r\n\r\n    setAlgorithm(algoId) {\r\n        this.setState({ currentAlgorithm: algoId });\r\n    }\r\n\r\n    isRendering() {\r\n        return this.state.rendering;\r\n    }\r\n\r\n    componentDidMount() {\r\n        const grid = this.initializeGrid(false);\r\n        this.setState({\r\n            grid: grid,\r\n            currentAlgorithm: -1\r\n        })\r\n        this.state.grid = grid;\r\n    }\r\n\r\n    initializeGrid(clearWall) {\r\n        const grid = [];\r\n        for (let row = 0; row < this.state.numRow; row++) {\r\n            const currentRow = [];\r\n            for (let col = 0; col < this.state.numCol; col++) {\r\n                let isW = false;\r\n                const element = document.getElementById(`node-${row}-${col}`);\r\n                if (element && (element.className === 'node node-path' || element.className === 'node node-visited')) {\r\n                    element.className = 'node';\r\n                }\r\n                if (!clearWall && element && element.className === 'node node-wall') {\r\n                    isW = true;\r\n                }\r\n                currentRow.push(this.createNode(row, col, isW));\r\n            }\r\n            grid.push(currentRow);\r\n        }\r\n        return grid;\r\n    }\r\n\r\n    createNode(row, col, isW) {\r\n        return {\r\n            col,\r\n            row,\r\n            isStart: row === this.state.SR && col === this.state.SC,\r\n            isFinish: row === this.state.FR && col === this.state.FC,\r\n            distance: Infinity,\r\n            heuristic: Infinity,\r\n            isVisited: false,\r\n            isWall: isW,\r\n            previousNode: null,\r\n        };\r\n    }\r\n\r\n    handleMouseDown(row, col) {\r\n        if (row === this.state.SR && col === this.state.SC) {\r\n            this.setState({ changingStart: true });\r\n        }\r\n        else if (row === this.state.FR && col === this.state.FC) {\r\n            this.setState({ changingFinish: true });\r\n        }\r\n        else if (!this.state.rendering) {\r\n            this.updateGridWithWall(this.state.grid, row, col);\r\n            this.setState({ mouseIsPressed: true });\r\n        }\r\n    }\r\n\r\n    handleMouseEnter(row, col) {\r\n        if (this.state.mouseIsPressed) {\r\n            this.updateGridWithWall(this.state.grid, row, col);\r\n            this.setState({ mouseIsPressed: true });\r\n        }\r\n\r\n        else if (this.state.changingStart && !(row === this.state.FR && col === this.state.FC)) {\r\n            const start = document.getElementById(`node-${this.state.SR}-${this.state.SC}`);\r\n            if (start) {\r\n                start.className = 'node';\r\n                start.isStart = false;\r\n                this.state.grid[this.state.SR][this.state.SC].isStart = false;\r\n            }\r\n            const newStart = document.getElementById(`node-${row}-${col}`);\r\n            if (newStart) {\r\n                newStart.isStart = true;\r\n                newStart.className = 'node node-start';\r\n                this.state.grid[row][col].isStart = true;\r\n            }\r\n            this.setState({ SR: row, SC: col });\r\n            //console.log(11, row, col, this.state.SR, this.state.SC);\r\n            //this.setState({ SR: row, SC: col });\r\n            //console.log(11, row, col, this.state.SR, this.state.SC);\r\n\r\n        }\r\n        else if (this.state.changingFinish && !(row === this.state.SR && col === this.state.SC)) {\r\n            const finish = document.getElementById(`node-${this.state.FR}-${this.state.FC}`);\r\n            if (finish) {\r\n                finish.className = 'node';\r\n                finish.isFinish = false;\r\n                this.state.grid[this.state.FR][this.state.FC].isFinish = false;\r\n            }\r\n            const newFinish = document.getElementById(`node-${row}-${col}`);\r\n            if (newFinish) {\r\n                newFinish.isFinish = true;\r\n                newFinish.className = 'node node-finish';\r\n                this.state.grid[row][col].isFinish = true;\r\n            }\r\n            this.setState({ FR: row, FC: col });\r\n        }\r\n\r\n    }\r\n\r\n    handleMouseUp() {\r\n        this.setState({\r\n            changingStart: false,\r\n            changingFinish: false,\r\n            mouseIsPressed: false\r\n        });\r\n    }\r\n\r\n    updateGridWithWall(grid, row, col) {\r\n        const node = grid[row][col];\r\n        const newNode = {\r\n            ...node,\r\n            isWall: !node.isWall\r\n        }\r\n        grid[row][col] = newNode;\r\n    }\r\n\r\n    visualizePathfinding() {\r\n        if (this.state.currentAlgorithm == -1) return;\r\n        if (this.state.rendering) return;\r\n\r\n        this.setState({ visualized: true, rendering: true });\r\n        this.props.setVisualizerRendering(true);\r\n        let g = this.initializeGrid(false);\r\n        this.setState({\r\n            grid: g\r\n        });\r\n        this.state.grid = g;\r\n        const grid = this.state.grid;\r\n        const start = grid[this.state.SR][this.state.SC];\r\n        const finish = grid[this.state.FR][this.state.FC];\r\n        const visitedInOrder = this.state.pathfindingAlgorithms[this.state.currentAlgorithm](grid, start, finish);\r\n        const shortedPath = getShortestPath(finish);\r\n        for (let i = 0; i < visitedInOrder.length; i++) {\r\n            setTimeout(() => {\r\n                const node = visitedInOrder[i];\r\n                if (!node.isStart && !node.isFinish)\r\n                    document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\r\n            }, 7 * i);\r\n        }\r\n\r\n        for (let i = 0; i < shortedPath.length; i++) {\r\n            setTimeout(() => {\r\n                const node = shortedPath[i];\r\n                if (!node.isStart && !node.isFinish)\r\n                    document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-path';\r\n            }, 7 * visitedInOrder.length + 50 * i);\r\n\r\n        }\r\n        setTimeout(() => {\r\n            this.setState({ rendering: false });\r\n            this.props.setVisualizerRendering(false);\r\n        }, 7 * visitedInOrder.length + 50 * shortedPath.length);\r\n\r\n    }\r\n\r\n    clearVisualizer() {\r\n        if (!this.state.rendering)\r\n            this.setState({ grid: this.initializeGrid(true), visualized: false });\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        const grid = this.state.grid;\r\n\r\n        return (\r\n            <>\r\n                {/*\r\n                <button\r\n                    onClick={() => { this.visualizePathfinding() }}\r\n                    type=\"button\" class=\"btn btn-outline-dark\"\r\n                    disabled={this.state.rendering}>\r\n                    visualize\r\n                </button>\r\n                <button\r\n                    onClick={() => this.clearVisualizer()}\r\n                    type=\"button\" class=\"btn btn-outline-dark\"\r\n                    disabled={this.state.rendering}>\r\n                    clear\r\n            </button>*/}\r\n\r\n                <div className=\"grid\">\r\n                    {grid.map((row, rowId) => {\r\n                        return (\r\n                            <div key={rowId}>\r\n                                {row.map((node, nodeId) => {\r\n                                    const { row, col, isFinish, isStart, isWall } = node;\r\n                                    return (\r\n                                        <Node\r\n                                            key={nodeId}\r\n                                            row={row}\r\n                                            col={col}\r\n                                            isStart={isStart}\r\n                                            isFinish={isFinish}\r\n                                            isWall={isWall}\r\n                                            mouseIsPressed={this.state.mouseIsPressed}\r\n                                            onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                                            onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\r\n                                            onMouseUp={() => this.handleMouseUp()}\r\n                                        ></Node>\r\n                                    )\r\n                                })\r\n                                }\r\n                            </div>\r\n                        );\r\n                    })\r\n                    }\r\n                </div>\r\n                {/*\r\n                <button\r\n                    onClick={() => { recursiveDivisionMaze(this.state.grid); this.setState({ finish: false }) }}\r\n                    type=\"button\" class=\"btn btn-outline-dark\"\r\n                    disabled={this.state.rendering}>\r\n                    recursive maze\r\n                </button>*/}\r\n                <button\r\n                    onClick={() => { primMaze(this.state.grid); this.setState({ finish: false }) }}\r\n                    type=\"button\" class=\"btn btn-outline-dark\"\r\n                    style={{ \"margin-top\": \"5px\", \"height\": \"30px\" }}\r\n                    disabled={this.state.rendering}>\r\n                    <p style={{ \"margin-top\": \"-6px\" }}>generate maze</p>\r\n                </button>\r\n            </>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './Pile.css';\r\n\r\nexport default class Pile extends Component {\r\n    render() {\r\n        const {\r\n            val,\r\n            isChanging,\r\n            finished,\r\n            colorSetIndex,\r\n            changingColors = [`rgb(228, 230, 120)`, `rgb(155, 147, 229)`, `rgb(248, 250, 140)`],\r\n            normalColors = [`rgb(200,${(1 - val / 45) * 255 + 50}, 255)`, `rgb(250,200, ${(1 - val / 80) * 255})`, `rgb( ${(1 - val / 80) * 255},200,250)`],\r\n        } = this.props;\r\n\r\n        let extraClassName = '';\r\n        if (isChanging) {\r\n            extraClassName = '-changing';\r\n        }\r\n        if (finished) {\r\n            extraClassName = '-finished';\r\n        }\r\n        let color = extraClassName === '-changing' ? changingColors[colorSetIndex] : normalColors[colorSetIndex];\r\n        return (\r\n            <>\r\n                <div\r\n                    className={'pile' + extraClassName}\r\n                    style={{ height: `${val * 8}px`, background: color }}\r\n\r\n                >\r\n                    <p className='value'>{val}</p>\r\n                </div >\r\n            </>\r\n\r\n        );\r\n    }\r\n\r\n}","function swap(piles, a, b) {\r\n    const tempVal = piles[a];\r\n    piles[a] = piles[b];\r\n    piles[b] = tempVal;\r\n}\r\n\r\nfunction selectionSort(piles) {\r\n\r\n    let statesInOrder = [];\r\n    for (let i = 0; i < piles.length - 1; i++) {\r\n        let minId = i;\r\n        for (let j = i + 1; j < piles.length; j++) {\r\n            if (piles[j] < piles[minId]) {\r\n                minId = j;\r\n            }\r\n            const temp = { piles: piles.slice(), changing: [j] };\r\n            statesInOrder.push(temp);\r\n\r\n        }\r\n        swap(piles, minId, i);\r\n        const temp = { piles: piles.slice(), changing: [minId, i] };\r\n        statesInOrder.push(temp);\r\n    }\r\n    return statesInOrder;\r\n}\r\n\r\nfunction bubbleSort(piles) {\r\n    //optimized !\r\n    let statesInOrder = [];\r\n    let n = piles.length;\r\n    while (n > 1) {\r\n        let newN = 0;\r\n        for (let i = 1; i < n; i++) {\r\n            if (piles[i - 1] > piles[i]) {\r\n                swap(piles, i - 1, i);\r\n                newN = i;\r\n                const temp = { piles: piles.slice(), changing: [i] };\r\n                statesInOrder.push(temp);\r\n            }\r\n        }\r\n        n = newN;\r\n    }\r\n    return statesInOrder;\r\n}\r\n\r\nfunction insertionSort(piles) {\r\n    let statesInOrder = [];\r\n    for (let i = 1; i < piles.length; i++) {\r\n        for (let j = i; j > 0 && piles[j - 1] > piles[j]; j--) {\r\n            swap(piles, j, j - 1);\r\n            const temp = { piles: piles.slice(), changing: [j - 1] };\r\n            statesInOrder.push(temp);\r\n        }\r\n    }\r\n    console.log(statesInOrder);\r\n    return statesInOrder;\r\n}\r\n\r\nfunction mergeSort(piles) {\r\n    let statesInOrder = [];\r\n    mergeSortHelper(piles, 0, piles.length - 1, statesInOrder);\r\n    return statesInOrder;\r\n}\r\n\r\nfunction mergeSortHelper(piles, start, end, statesInOrder) {\r\n    if (start === end) return;\r\n    const mid = Math.floor((start + end) / 2);\r\n    mergeSortHelper(piles, start, mid, statesInOrder);\r\n    mergeSortHelper(piles, mid + 1, end, statesInOrder);\r\n    merge(piles, start, mid, end, statesInOrder);\r\n}\r\n\r\nfunction merge(piles, start, mid, end, statesInOrder) {\r\n    let k = start, i = start, j = mid + 1;\r\n    let pilesC = piles.slice();\r\n    while (i <= mid && j <= end) {\r\n        //let changing = [i, j, k];\r\n        if (pilesC[i] <= pilesC[j]) {\r\n            piles[k++] = pilesC[i++];\r\n        }\r\n        else {\r\n            piles[k++] = pilesC[j++];\r\n        }\r\n        const temp = { piles: piles.slice(), changing: [i, j, k] };\r\n        statesInOrder.push(temp);\r\n\r\n    }\r\n    while (i <= mid) {\r\n        piles[k++] = pilesC[i++];\r\n        const temp = { piles: piles.slice(), changing: [i, k] };\r\n        statesInOrder.push(temp);\r\n    }\r\n    while (j <= end) {\r\n        piles[k++] = pilesC[j++];\r\n        const temp = { piles: piles.slice(), changing: [j, k] };\r\n        statesInOrder.push(temp);\r\n    }\r\n}\r\n\r\n\r\nfunction quickSort(piles) {\r\n    let statesInOrder = [];\r\n    quickSortHelper(piles, 0, piles.length - 1, statesInOrder);\r\n    return statesInOrder;\r\n}\r\n\r\nfunction quickSortHelper(piles, start, end, statesInOrder) {\r\n    if (start < end) {\r\n        let pivot = partition(piles, start, end, statesInOrder);\r\n        quickSortHelper(piles, start, pivot - 1, statesInOrder);\r\n        quickSortHelper(piles, pivot + 1, end, statesInOrder);\r\n    }\r\n}\r\n\r\nfunction partition(piles, start, end, statesInOrder) {\r\n    let pivot = piles[end];\r\n    let i = start - 1;\r\n    for (let j = start; j <= end - 1; j++) {\r\n        if (piles[j] < pivot) {\r\n            i++;\r\n            swap(piles, i, j);\r\n            const temp = { piles: piles.slice(), changing: [i, j] };\r\n            statesInOrder.push(temp);\r\n        }\r\n    }\r\n    swap(piles, i + 1, end);\r\n    const temp = { piles: piles.slice(), changing: [i + 1, end] };\r\n    statesInOrder.push(temp);\r\n    return i + 1;\r\n}\r\n\r\nexport { selectionSort, bubbleSort, insertionSort, mergeSort, quickSort };","import React, { Component } from 'react';\r\nimport './SortingVisualizer.css';\r\nimport Pile from './Pile/Pile';\r\nimport { selectionSort, bubbleSort, insertionSort, mergeSort, quickSort } from '../Algorithm/sortingAlgorithms';\r\n\r\nexport default class SortingVisualizer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            piles: [],\r\n            numPiles: 40,\r\n            finished: false,\r\n            maxPile: 80,\r\n            changingPiles: [],\r\n            pileDelayTimes: [30, 40, 40, 80, 80],\r\n            colorSetIndex: getRandomInt(0, 3),\r\n            currentAlgorithm: -1,\r\n            unsortedPiles: [],\r\n            algorithms: ['Selection Sort', 'Bubble Sort', 'Insertion Sort', 'Merge Sort', 'Quick Sort'],\r\n            sortingAlgorithms: [selectionSort, bubbleSort, insertionSort, mergeSort, quickSort]\r\n        };\r\n        this.randomizePiles = this.randomizePiles.bind(this);\r\n        this.visualizeSorting = this.visualizeSorting.bind(this);\r\n        this.setAlgorithm = this.setAlgorithm.bind(this);\r\n        this.props.getFunctions(this.visualizeSorting, this.randomizePiles, this.setAlgorithm, this.state.algorithms);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const piles = this.initializePiles();\r\n        this.setState({\r\n            piles: piles,\r\n        });\r\n        this.setState({ piles: piles, unsortedPiles: piles.slice() });\r\n    }\r\n\r\n    setAlgorithm(algoId) {\r\n        if (this.state.unsortedPiles !== []) {\r\n            this.setState({ finished: false, changingPiles: [], piles: this.state.unsortedPiles });\r\n        }\r\n        this.setState({ currentAlgorithm: algoId });\r\n    }\r\n\r\n    initializePiles() {\r\n        let piles = [];\r\n        for (let i = 0; i < this.state.numPiles; i++) {\r\n            piles.push(i + 5);\r\n        }\r\n\r\n        for (let i = 0; i < this.state.numPiles; i++) {\r\n            //swap i and j\r\n            let j = getRandomInt(0, i);\r\n            let temp = piles[i];\r\n            piles[i] = piles[j];\r\n            piles[j] = temp;\r\n        }\r\n        piles.push(this.state.numPiles + 5);\r\n        return piles;\r\n    }\r\n\r\n    visualizeSorting() {\r\n        if (this.state.currentAlgorithm === -1) {\r\n            return;\r\n        }\r\n        if (this.state.rendering) return;\r\n        if (this.state.finished) {\r\n            console.log(1);\r\n            this.state.finished = false;\r\n            this.state.changingPiles = [];\r\n            this.state.piles = this.state.unsortedPiles;\r\n        }\r\n        this.setState({ rendering: true });\r\n        this.props.setVisualizerRendering(true);\r\n        const piles = this.state.piles.slice();\r\n\r\n        const statesInOrder = this.state.sortingAlgorithms[this.state.currentAlgorithm](piles);\r\n        for (let i = 0; i < statesInOrder.length; i++) {\r\n            const { piles: state, changing: changingPiles } = statesInOrder[i];\r\n            setTimeout(() => {\r\n                this.setState({ piles: state, changingPiles: changingPiles });\r\n            }, this.state.pileDelayTimes[this.state.currentAlgorithm] * i);\r\n\r\n        }\r\n        setTimeout(() => {\r\n            this.setState({ rendering: false, finished: true });\r\n            this.props.setVisualizerRendering(false);\r\n        }, this.state.pileDelayTimes[this.state.currentAlgorithm] * statesInOrder.length);\r\n    }\r\n\r\n    randomizePiles() {\r\n        if (this.state.rendering) return;\r\n        this.setState({ finished: false, changingPiles: [], colorSetIndex: getRandomInt(0, 3) });\r\n        const piles = this.initializePiles();\r\n        this.setState({ piles: piles, unsortedPiles: piles.slice() });\r\n    }\r\n\r\n    render() {\r\n        const piles = this.state.piles;\r\n\r\n        return (\r\n            <>\r\n                {/*\r\n                <button\r\n                    onClick={() => this.visualizeSorting()}\r\n                    type=\"button\" class=\"btn btn-outline-dark\"\r\n                    disabled={this.state.rendering}>\r\n                    Sort!\r\n                </button>\r\n                <button\r\n                    onClick={() => this.randomizePiles()}\r\n                    type=\"button\" class=\"btn btn-outline-dark\"\r\n                    disabled={this.state.rendering}>\r\n                    Randomize!\r\n                </button>*/}\r\n                <div className='piles' class=\"container\">\r\n                    {\r\n\r\n                        piles.map((pile, pileId) => {\r\n                            return (\r\n                                <Pile\r\n                                    dummy={pileId === this.state.numPiles}\r\n                                    finished={this.state.finished}\r\n                                    className='pile'\r\n                                    key={pileId}\r\n                                    val={pile}\r\n                                    isChanging={this.state.changingPiles.indexOf(pileId) !== -1}\r\n\r\n                                    colorSetIndex={this.state.colorSetIndex}\r\n                                ></Pile>\r\n                            )\r\n                        })\r\n                    }\r\n\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nfunction getRandomInt(min, range) {\r\n    return Math.floor(Math.random() * range) + min;\r\n}","class Perceptron {\r\n    constructor(n, c) {\r\n        // Array of weights for inputs\r\n        this.weights = new Array(n);\r\n        // Start with random weights\r\n        for (let i = 0; i < this.weights.length; i++) {\r\n            this.weights[i] = random(-1, 1);\r\n        }\r\n        this.c = c; // learning rate/constant\r\n    }\r\n\r\n    // Function to train the Perceptron\r\n    // Weights are adjusted based on \"desired\" answer\r\n    train(inputs, desired) {\r\n        // Guess the result\r\n        let guess = this.feedforward(inputs);\r\n        // Compute the factor for changing the weight based on the error\r\n        // Error = desired output - guessed output\r\n        // Note this can only be 0, -2, or 2\r\n        // Multiply by learning constant\r\n        let error = desired - guess;\r\n        // Adjust weights based on weightChange * input\r\n        for (let i = 0; i < this.weights.length; i++) {\r\n            this.weights[i] += this.c * error * inputs[i];\r\n        }\r\n    }\r\n\r\n    // Guess -1 or 1 based on input values\r\n    feedforward(inputs) {\r\n        // Sum all values\r\n        function sleep (time) {\r\n            return new Promise((resolve) => setTimeout(resolve, time));\r\n        }\r\n        let sum = 0;\r\n        for (let i = 0; i < this.weights.length; i++) {\r\n            sum += inputs[i] * this.weights[i];\r\n        }\r\n        return this.activate(sum);\r\n        \r\n    }\r\n\r\n    activate(sum) {\r\n        if (sum > 0) return 1;\r\n        else return -1;\r\n    }\r\n\r\n    // Return weights\r\n    getWeights() {\r\n        return this.weights;\r\n    }\r\n}\r\n\r\nfunction random(min, max) {\r\n    return Math.random() * (max - min) + min;\r\n}\r\n\r\nexport {Perceptron, random};","import React, { Component } from 'react';\r\nimport Konva from 'react-konva';\r\nimport { Stage, Layer, Rect, Line, Circle, Text } from 'react-konva';\r\nimport { Perceptron, random } from './Perceptron';\r\nimport './PtronVisualizer.css';\r\n\r\nexport default class PtronVisualizer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            training: new Array(1000),\r\n            rendering: false,\r\n            min: -1,\r\n            max: 1,\r\n            width: 500,\r\n            height: 500,\r\n            count: 0,\r\n            ptron: null,\r\n            xOff: 50,\r\n            yOff: 100,\r\n            M: 0.4,\r\n            B: 0.3,\r\n        }\r\n        this.resetVisualizer = this.resetVisualizer.bind(this);\r\n        this.startVisualizer = this.startVisualizer.bind(this);\r\n        this.props.getFunctions(this.startVisualizer, this.resetVisualizer);\r\n    }\r\n\r\n    f(x) {\r\n        return this.state.M * x + this.state.B;\r\n    }\r\n\r\n    map(n, as, ae, bs, be) {\r\n        return ((n - as) / (ae - as)) * (be - bs) + bs;\r\n    }\r\n\r\n    initialize() {\r\n        this.state.ptron = new Perceptron(3, 0.006);\r\n        for (let i = 0; i < this.state.training.length; i++) {\r\n            let x = random(this.state.min, this.state.max);\r\n            let y = random(this.state.min, this.state.max);\r\n            let answer = 1;\r\n            if (y < this.f(x)) answer = -1;\r\n            this.state.training[i] = {\r\n                input: [x, y, 1],\r\n                output: answer\r\n            }\r\n        }\r\n    }\r\n\r\n    resetVisualizer() {\r\n        if (this.state.rendering) {\r\n            return;\r\n        }\r\n        this.setState({ count: 0 });\r\n        this.state.count = 0;\r\n    }\r\n\r\n    startVisualizer() {\r\n        this.setState({ rendering: true });\r\n        for (let i = 0; i < this.state.training.length - 1; i++) {\r\n            setTimeout(\r\n                () => {\r\n                    this.setState({ count: i });\r\n                    this.state.count = i;\r\n                }\r\n                , 25 * i);\r\n        }\r\n        setTimeout(() => {\r\n            this.setState({ rendering: false });\r\n        }, 25 * this.state.training.length)\r\n\r\n    }\r\n\r\n    render() {\r\n        if (this.state.count === 0) {\r\n            this.initialize();\r\n        }\r\n        let min = this.state.min;\r\n        let max = this.state.max;\r\n        let ptron = this.state.ptron;\r\n        let x1 = this.map(min, min, max, 0, this.state.width);\r\n        let y1 = this.map(this.f(min), min, max, this.state.height, 0);\r\n        let x2 = this.map(max, min, max, 0, this.state.width);\r\n        let y2 = this.map(this.f(max), min, max, this.state.height, 0);\r\n\r\n        let weights = ptron.getWeights();\r\n        let xx1 = min;\r\n        let yy1 = (-weights[2] - weights[0] * xx1) / weights[1];\r\n        let xx2 = max;\r\n        let yy2 = (-weights[2] - weights[0] * xx2) / weights[1];\r\n\r\n        xx1 = this.map(xx1, min, max, 0, this.state.width);\r\n        yy1 = this.map(yy1, min, max, this.state.height, 0);\r\n        xx2 = this.map(xx2, min, max, 0, this.state.width);\r\n        yy2 = this.map(yy2, min, max, this.state.height, 0);\r\n        ptron.train(this.state.training[this.state.count].input, this.state.training[this.state.count].output);\r\n\r\n        let points = []\r\n\r\n        for (let i = 0; i < this.state.count; i++) {\r\n            let guess = ptron.feedforward(this.state.training[i].input);\r\n            let x = this.map(this.state.training[i].input[0], min, max, 0, this.state.width);\r\n            let y = this.map(this.state.training[i].input[1], min, max, this.state.height, 0);\r\n            if(i%4>0) points.push({ x: x, y: y, fill: guess < 0 });\r\n        }\r\n        let xOff = this.state.xOff;\r\n        let yOff = this.state.yOff;\r\n        let aM = -weights[0] / weights[1];\r\n        let aB = -weights[2] / weights[1];\r\n        let eM = aM - this.state.M;\r\n        let eB = aB - this.state.B;\r\n        let textComponet;\r\n        if (this.state.count != 0) {\r\n            textComponet = <><Text\r\n                x={550}\r\n                y={50}\r\n                text='Function Form: Y = M * X + B'\r\n                fontFamily='Calibri'\r\n                fill='black'\r\n                fontSize={25}\r\n            ></Text>\r\n                <Text\r\n                    x={550}\r\n                    y={80}\r\n                    text={`Original Function: M = ${this.state.M} B = ${this.state.B}`}\r\n                    fontFamily='Calibri'\r\n                    fill='black'\r\n                    fontSize={25}\r\n                ></Text>\r\n                <Text\r\n                    x={550}\r\n                    y={135}\r\n                    text={`Approximation:\\nM = ${aM}\\nB = ${aB}`}\r\n                    fontFamily='Calibri'\r\n                    fill='black'\r\n                    fontSize={25}\r\n                ></Text>\r\n                <Text\r\n                    x={550}\r\n                    y={240}\r\n                    text={`Error:\\nM: ${eM}\\nB:${eB}`}\r\n                    fontFamily='Calibri'\r\n                    fill='red'\r\n                    fontSize={25}\r\n                ></Text></>\r\n        }\r\n        else {\r\n            textComponet = <><Text\r\n                x={550}\r\n                y={50}\r\n                text=''\r\n                fontFamily='Calibri'\r\n                fill='black'\r\n                fontSize={25}\r\n            ></Text>\r\n                <Text\r\n                    x={550}\r\n                    y={80}\r\n                    text={`Original Function: M = ${this.state.M} B = ${this.state.B}`}\r\n                    fontFamily='Calibri'\r\n                    fill='black'\r\n                    fontSize={25}\r\n                ></Text>\r\n                <Text\r\n                    x={550}\r\n                    y={135}\r\n                    text={`Approximation:\\nM = ${aM}\\nB = ${aB}`}\r\n                    fontFamily='Calibri'\r\n                    fill='black'\r\n                    fontSize={25}\r\n                ></Text>\r\n                <Text\r\n                    x={550}\r\n                    y={240}\r\n                    text={`Error:\\nM: ${eM}\\nB:${eB}`}\r\n                    fontFamily='Calibri'\r\n                    fill='red'\r\n                    fontSize={25}\r\n                ></Text></>\r\n        }\r\n        let circles = points.map((point, pointId) => {\r\n            return (<Circle\r\n                key={pointId}\r\n                x={point.x + 0}\r\n                y={point.y + 0}\r\n                stroke={'black'}\r\n                radius={3}\r\n                opacity={0.7}\r\n                fill={point.fill ? 'black' : 'white'}\r\n            ></Circle>)}\r\n        )\r\n        this.state.all = (\r\n            <>\r\n                <Stage\r\n                    width={500 * 2}\r\n                    height={500 + 1}\r\n                    className='stage'\r\n                    id='stage'\r\n                >\r\n                    <Layer name=\"layer\" ref={ref => (this.state.layer = ref)}>\r\n                        <Line points={[0, 0, 500, 0]} stroke={'black'} ></Line>\r\n                        <Line points={[0, 0, 0, 0 + 500]} stroke={'black'}></Line>\r\n                        <Line points={[0, 0 + 500, 500 + 0, 0 + 500]} stroke={'black'} ></Line>\r\n                        <Line points={[500 + 0, 0, 500 + 0, 0 + 500]} stroke={'black'} strokeWidth={1}></Line>\r\n                        <Line\r\n                            points={[x1 + 0, 0 + y1, x2 + 0, 0 + y2]}\r\n                            stroke={'red'}\r\n                            strokeWidth={1}>\r\n                        </Line>\r\n                        <Line\r\n                            points={[xx1 + 0, 0 + yy1, xx2 + 0, 0 + yy2]}\r\n                            stroke={'blue'}\r\n                            strokeWidth={this.state.count > 0 ? 1 : 0}>\r\n                        </Line>\r\n                        {circles}\r\n                        {textComponet}\r\n                    </Layer>\r\n                </Stage>\r\n            </>\r\n        );\r\n        return this.state.all;\r\n    }\r\n\r\n}\r\n","\r\nfunction flipCoin(p) {\r\n    return Math.random() < p;\r\n}\r\n\r\nfunction distance(a, b) {\r\n    let { x: ax, y: ay } = a;\r\n    let { x: bx, y: by } = b;\r\n    return Math.sqrt(((ax - bx) * (ax - bx) + (ay - by) * (ay - by)));\r\n}\r\n\r\nclass PongAgent {\r\n    constructor(speed, discount, epsilon, alpha) {\r\n        this.weights = {\r\n            \"min_dis_to_dot\": 0,\r\n            \"dis_to_panel\": 0,\r\n            \"num_dots\": 0,\r\n        };\r\n        this.discount = discount;\r\n        this.epsilon = epsilon;\r\n        this.alpha = alpha;\r\n        this.speed = speed;\r\n        this.featureList = [\"min_dis_to_dot\", \"dis_to_panel\", \"num_dots\"]\r\n    }\r\n\r\n    getMove(action) {\r\n        return action * this.speed;\r\n    }\r\n\r\n    minDisToDot(x, y, dots) {\r\n        let minDis = Infinity;\r\n        for (const dot of dots) {\r\n            const d = distance({ x: x, y: y }, dot);\r\n            if (d < minDis) {\r\n                minDis = d;\r\n            }\r\n        }\r\n        return minDis;\r\n    }\r\n\r\n    getFeatures(state, action) {\r\n        let { dots: dots, x: x, y: y, px: px, vx: vx, vy: vy, terminal: terminal } = state;\r\n        //console.log(px);\r\n        px = px + this.getMove(action) + 50;\r\n        //console.log(px, this.getMove(action));\r\n        let features = {\r\n            \"min_dis_to_dot\": 0,\r\n            \"dis_to_panel\": 0,\r\n            \"num_dots\": 0,\r\n        };\r\n        features[\"min_dis_to_dot\"] = this.minDisToDot(x, y, dots) / Math.sqrt(600 * 600 + 550 * 550);\r\n        features[\"dis_to_panel\"] = Math.abs(x - px) / 600;\r\n        features[\"num_dots\"] = dots.length / 5;\r\n        return features;\r\n    }\r\n\r\n    getQ(state, action) {\r\n        if (!state) {\r\n            return 0;\r\n        }\r\n        let result = 0;\r\n        const features = this.getFeatures(state, action)\r\n        ////\r\n        for (const feature of this.featureList) {\r\n            result += this.weights[feature] * features[feature];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    update(state, action, nextState, reward) {\r\n        if (!action) {\r\n            return;\r\n        }\r\n        const features = this.getFeatures(state, action)\r\n        const diff = reward + this.discount * this.getValue(nextState) - this.getQ(state, action);\r\n        /////\r\n        //console.log(this.weights);\r\n        for (const feature of this.featureList) {\r\n            this.weights[feature] += this.alpha * diff * features[feature];\r\n        }\r\n    }\r\n\r\n    setWeights(weights) {\r\n        this.weights = weights;\r\n    }\r\n\r\n    actions() {\r\n        return [-1, 0, 1];\r\n    }\r\n\r\n    getAction(state) {\r\n        if (state[\"terminal\"] === true) return null;\r\n        const curActions = this.actions();\r\n\r\n        if (flipCoin(this.epsilon)) {\r\n            const action = curActions[randomSelect(curActions)];\r\n            return action;\r\n        }\r\n        else {\r\n            return this.getPolicy(state);\r\n        }\r\n\r\n    }\r\n\r\n    getPolicy(state) {\r\n        const curActions = this.actions();\r\n        let reAction = null;\r\n        let maxQ = -Infinity;\r\n        for (const a of curActions) {\r\n            if (this.getQ(state, a) > maxQ) {\r\n                maxQ = this.getQ(state, a);\r\n                reAction = a;\r\n            }\r\n            else if (this.getQ(state, a) === maxQ) {\r\n                reAction = randomSelect([a, reAction]);\r\n            }\r\n        }\r\n        return reAction;\r\n    }\r\n\r\n    getValue(state) {\r\n        return this.getQ(state, this.getPolicy(state));\r\n    }\r\n}\r\n\r\nfunction randomInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction randomSelect(path) {\r\n    return randomInt(0, path.length - 1);\r\n}\r\n\r\nexport default PongAgent;","import React, { Component } from 'react';\r\nimport { Stage, Layer, Rect, Line, Konva, Circle, Text } from 'react-konva';\r\nimport PongAgent from \"./PongAgent.js\";\r\nimport \"./PongVisualizer.css\";\r\n/*\r\nThis section is a simple pong game controlled by Apporximate Q Learning Agent\r\n*/\r\nexport default class PongVisualizer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dots: [],\r\n            rendering: true,\r\n            width: 600,\r\n            height: 500,\r\n            x: null,\r\n            y: null,\r\n            r: 15,\r\n            vx: 0,\r\n            vy: 0,\r\n            ballSpeed: 3,\r\n            panelx: 0,\r\n            panely: 480,\r\n            panelSpeed: 3,\r\n            ballInitialized: false,\r\n            framecount: 0,\r\n            score: 0,\r\n            pressedLeft: false,\r\n            pressedRight: false,\r\n            humanMode: false,\r\n            finished: false,\r\n            gameCount: -1,\r\n            agent: new PongAgent(3, 0.9, 0.2, 0.2),\r\n            notStarted: true,\r\n        }\r\n        this.setReleased = this.setReleased.bind(this);\r\n        this.setPressed = this.setPressed.bind(this);\r\n        this.componentDidMount = this.componentDidMount.bind(this);\r\n        if (this.state.humanMode) {\r\n            document.addEventListener('keydown', (evt) => { this.setPressed(evt) });\r\n            document.addEventListener('keyup', (evt) => { this.setReleased(evt) });\r\n        }\r\n        this.resetVisualizer = this.resetVisualizer.bind(this);\r\n        this.startVisualizer = this.startVisualizer.bind(this);\r\n\r\n        this.props.getFunctions(this.startVisualizer, this.resetVisualizer);\r\n\r\n    }\r\n\r\n    startVisualizer() {\r\n        this.setState({ notStarted: false });\r\n        this.setState({\r\n            rendering: false,\r\n            ballInitialized: false,\r\n            framecount: 0,\r\n            score: 0,\r\n            finished: false,\r\n            gameCount: 0,\r\n            agent: new PongAgent(3, 0.9, 0.2, 0.2),\r\n        });\r\n        //this.props.setVisualizerRendering(true);\r\n        this.componentDidMount();\r\n    }\r\n    resetVisualizer() {\r\n        this.setState({\r\n            rendering: false,\r\n            ballInitialized: false,\r\n            framecount: 0,\r\n            score: 0,\r\n            finished: false,\r\n            gameCount: 0,\r\n            notStarted: true,\r\n            agent: new PongAgent(3, 0.9, 0.2, 0.2),\r\n        });\r\n        this.componentDidMount();\r\n    }\r\n\r\n    setPressed(evt) {\r\n        if (evt.keyCode === 37) {\r\n            this.setState({ pressedLeft: true });\r\n            this.state.pressedLeft = true;\r\n        }\r\n        if (evt.keyCode === 39) {\r\n            this.setState({ pressedRight: true });\r\n            this.state.pressedRight = true\r\n        }\r\n    }\r\n\r\n    setReleased(evt) {\r\n        if (evt.keyCode == 37) {\r\n            this.setState({ pressedLeft: false });\r\n            this.state.pressedLeft = false;\r\n        }\r\n        if (evt.keyCode == 39) {\r\n            this.setState({ pressedRight: false });\r\n            this.state.pressedRight = false;\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.initialize();\r\n    }\r\n\r\n    initialize() {\r\n        let speed = this.state.ballSpeed;\r\n        let ox = randomInt(200, 480);\r\n        let oy = 200;\r\n        let ovx = [speed, -speed, 1.2 * speed, -1.2 * speed, 0.8 * speed, -0.8 * speed][randomInt(0, 5)];\r\n        let ovy = speed;\r\n        this.setState({\r\n            x: ox,\r\n            y: oy,\r\n            vx: ovx,\r\n            vy: ovy,\r\n            score: 0,\r\n            panelx: 0,\r\n            storedWeights: {},\r\n            dots: [{ x: 100, y: 100 }, { x: 200, y: 100 }, { x: 300, y: 100 }, { x: 400, y: 100 }, { x: 500, y: 100 }],\r\n            gameCount: this.state.gameCount + 1\r\n        });\r\n        this.state.x = ox;\r\n        this.state.y = oy;\r\n        this.state.vx = ovx;\r\n        this.state.vy = ovy;\r\n\r\n    }\r\n\r\n    getState() {\r\n        const { dots: dots, x: x, y: y, panelx: px, vx: vx, vy: vy } = this.state;\r\n        return { dots: dots, x: x, y: y, px: px, vx: vx, vy: vy, terminal: this.state.score === 500 || this.state.finished };\r\n    }\r\n\r\n    updatePanel(action) {\r\n        if (this.state.finished) return;\r\n        if (this.state.humanMode) {\r\n            if (this.state.pressedLeft && this.pressedRight) {\r\n                return;\r\n            }\r\n            if (this.state.pressedLeft) {\r\n                this.movePanel(-1);\r\n            }\r\n            else if (this.state.pressedRight) {\r\n                this.movePanel(1);\r\n            }\r\n        }\r\n        else {\r\n            //console.log(action);\r\n            this.movePanel(action);\r\n        }\r\n    }\r\n\r\n    updateBall() {\r\n        if (this.state.finished) return;\r\n        let { x: x, y: y, r: r, vx: vx, vy: vy, panelx: panelx } = this.state;\r\n        //console.log(x, y, vx, vy);\r\n        if (x == 0 && y == 0) return;\r\n        x = x + vx;\r\n        y = y + vy;\r\n        if (x > this.state.width - r - 5 || x < r + 5) {\r\n            vx = -vx;\r\n        }\r\n        if (y < r + 5) {\r\n            vy = -vy;\r\n        }\r\n        if (y > this.state.panely - r - 5 && y > this.state.panely - r + 5 && Math.abs(panelx - x + 50) < 50) {\r\n            vy = vy > 0 ? -vy : vy\r\n        }\r\n        else if (y > this.state.height - r && Math.abs(panelx - x + 50) > 50) {\r\n            this.setState({ score: this.state.score - 1000 });\r\n            this.initialize();\r\n            return false;\r\n        }\r\n        this.setState({\r\n            x: x,\r\n            y: y,\r\n            vx: vx,\r\n            vy: vy\r\n        });\r\n        this.state.x = x;\r\n        this.state.y = y;\r\n        this.state.vx = vx;\r\n        this.state.vy = vy;\r\n\r\n        return true;\r\n    }\r\n\r\n    updateDots() {\r\n        if (this.state.finished) return;\r\n        let score = this.state.score;\r\n        for (let i = 0; i < this.state.dots.length; i++) {\r\n            if (distance(this.state.dots[i], { x: this.state.x, y: this.state.y }) < this.state.r) {\r\n                this.state.dots.splice(i, 1);\r\n                score += 100;\r\n            }\r\n        }\r\n        this.setState({ score: score });\r\n    }\r\n\r\n    movePanel(action) {\r\n        if (this.state.finished) return;\r\n        let panelx = this.state.panelx;\r\n        let panelSpeed = this.state.panelSpeed;\r\n        if (action === -1) {\r\n            panelx = panelx - panelSpeed;\r\n        }\r\n        else if (action === 1) {\r\n            panelx = panelx + panelSpeed;\r\n        }\r\n        this.setState({ panelx: Math.min(this.state.width - 100, Math.max(0, panelx)) })\r\n\r\n    }\r\n\r\n    render() {\r\n        if (this.state.notStarted) {\r\n            return (\r\n                <>\r\n                <Stage\r\n                        width={this.state.width}\r\n                        height={this.state.height}\r\n                        className='pong stage'\r\n                        id='pong stage'\r\n                    >\r\n                        <Layer>\r\n                            <Rect width={this.state.width} height={this.state.height} stroke=\"black\" fill=\"black\"></Rect>\r\n                            <Text\r\n                                x={200}\r\n                                y={200}\r\n                                text={`Press`}\r\n                                fontFamily='Calibri'\r\n                                fill='white'\r\n                                fontSize={30}\r\n                            ></Text>\r\n                            <Text\r\n                                x={275}\r\n                                y={200}\r\n                                text={`go`}\r\n                                fontFamily='Calibri'\r\n                                fill={this.state.goMouseEnter ? 'rgb(142, 228, 213)':'white'}\r\n                                fontSize={30}\r\n                                onClick={\r\n                                    ()=>{this.setState({notStarted:false})}\r\n                                }\r\n                                onMouseEnter={\r\n                                    ()=>{this.setState({goMouseEnter:true})}\r\n                                }\r\n                                onMouseLeave={\r\n                                    ()=>{this.setState({goMouseEnter:false})}\r\n                                }\r\n                            ></Text>\r\n                            <Text\r\n                                x={315}\r\n                                y={200}\r\n                                text={`to start.`}\r\n                                fontFamily='Calibri'\r\n                                fill='white'\r\n                                fontSize={30}\r\n                            ></Text>\r\n                        </Layer>\r\n                        \r\n                    </Stage>\r\n                    <div class=\"pongDescription\">\r\n                        <h4 style={{ marginTop: \"0px\", marginLeft: \"650px\", \"text-align\": \"left\", fontFamily: \"monospace\" }}>\r\n                            <br /><br /><br /><br />\r\n                            This is a simple illustration of Reinforcement Learning, \"Apporixmate Q Learning\" specifically.<br/><br/>\r\n                            \r\n                            Our agent is given \"vision\" to current distance from the panel to the ball, distance from the\r\n                            ball to the nearest dot, and the number of dots remaining. The agent may try some random moves initially,\r\n                            and get \"rewards\"(positive score) and \"punishments\"(negative score) when eating the dots and dying.<br/><br/>\r\n\r\n                            After some trials, our agent would appear to know that bouncing the ball back would eventually lead it to \"rewards\", \r\n                            and manage to do that to finally win the game (eating all 5 dots).\r\n                        </h4>\r\n                    </div>\r\n                    </>\r\n            );\r\n        }\r\n        let { \"min_dis_to_dot\": w1,\r\n            \"dis_to_panel\": w2,\r\n            \"num_dots\": w3 } = this.state.agent.weights;\r\n        if (!this.notStarted && this.state.score !== 500 && !this.state.finished) {\r\n            setTimeout(() => {\r\n                let agent = this.state.agent;\r\n                if (this.state.gameCount > 10) agent.training = false;\r\n                const state = this.getState();\r\n                const action = agent.getAction(state);\r\n                //console.log(action, agent.weights);\r\n                const curScore = this.state.score;\r\n                const curGameCount = this.state.gameCount;\r\n\r\n                this.updateBall();\r\n                this.updateDots();\r\n                this.updatePanel(action);\r\n\r\n                const nextState = this.getState();\r\n                const reward = 10 + this.state.score - curScore + (-1000) * (this.state.gameCount - curGameCount);\r\n                agent.update(state, action, nextState, reward);\r\n\r\n                if (this.state.score === 500) {\r\n                    this.setState({ finished: true });\r\n                }\r\n                this.state.framecount += 1;\r\n\r\n            }, 10 * this.state.framecount);\r\n            if (w1 !== NaN && !this.state.finished) {\r\n                this.state.storedWeights = {\r\n                    \"min_dis_to_dot\": w1,\r\n                    \"dis_to_panel\": w2,\r\n                    \"num_dots\": w3\r\n                };\r\n            }\r\n        }\r\n        const { x: x, y: y } = this.state;\r\n        const dots = this.state.dots;\r\n\r\n\r\n        if (this.state.finished) {\r\n            let { \"min_dis_to_dot\": w1,\r\n                \"dis_to_panel\": w2,\r\n                \"num_dots\": w3 } = this.state.storedWeights;\r\n            if (this.state.rendering) {\r\n                this.props.setVisualizerRendering(false);\r\n                this.state.rendering = false;\r\n            }\r\n            return (\r\n                <>\r\n                    <Stage\r\n                        width={this.state.width}\r\n                        height={this.state.height}\r\n                        className='pong stage'\r\n                        id='pong stage'\r\n                    >\r\n                        <Layer>\r\n                            <Rect width={this.state.width} height={this.state.height} stroke=\"black\" fill=\"black\"></Rect>\r\n                            <Text\r\n                                x={250}\r\n                                y={200}\r\n                                text={`Win!`}\r\n                                fontFamily='Calibri'\r\n                                fill='white'\r\n                                fontSize={50}\r\n                            ></Text>\r\n                        </Layer>\r\n                    </Stage>\r\n                    <div>\r\n                        <h4 style={{ marginTop: \"0px\", marginLeft: \"700px\", \"text-align\": \"left\", fontFamily: \"monospace\" }}>\r\n                            <br /><br /><br /><br />\r\n                            {\"Your agent's weights:\"}<br />\r\n                            <div class=\"w-text\">\r\n                                <p >{`w1: min distance to dot:`}<br /><p class=\"num\">{w1}</p></p>\r\n                                <p>{`w2: distance to between the ball and the panel:`}<br /><p class=\"num\">{w2}</p></p>\r\n                                <p>{`w3: number of dots remaining:`}<br /><p class=\"num\">{w3}</p></p></div>\r\n                        </h4>\r\n                    </div></>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <div>\r\n                    <Stage\r\n                        width={this.state.width}\r\n                        height={this.state.height}\r\n                        className='pong stage'\r\n                        id='pong stage'\r\n                    >\r\n                        <Layer>\r\n                            <Rect width={this.state.width} height={this.state.height} stroke=\"black\" fill=\"black\"></Rect>\r\n\r\n                            {dots.map((dot, dotId) => {\r\n                                return (\r\n                                    <Circle\r\n                                        key={dotId}\r\n                                        x={dot[\"x\"]}\r\n                                        y={dot[\"y\"]}\r\n                                        stroke={'white'}\r\n                                        fill={\"white\"}\r\n                                        radius={5}\r\n                                    ></Circle>)\r\n                            })\r\n                            }\r\n                            <Circle\r\n                                x={x}\r\n                                y={y}\r\n                                radius={this.state.r}\r\n                                stroke={'white'}\r\n                                fill={\"white\"}>\r\n                            </Circle>\r\n                            <Rect x={this.state.panelx} y={this.state.panely} width={100} height={10} stroke={'white'}\r\n                                fill={\"white\"}></Rect>\r\n                            <Text\r\n                                x={10}\r\n                                y={15}\r\n                                text={`Score: ${this.state.score}`}\r\n                                fontFamily='Calibri'\r\n                                fill='white'\r\n                                fontSize={25}\r\n                            ></Text>\r\n                            {/*\r\n                            <Text\r\n                                x={480}\r\n                                y={15}\r\n                                text={`Game: ${this.state.gameCount}`}\r\n                                fontFamily='Calibri'\r\n                                fill='white'\r\n                                fontSize={25}\r\n                            ></Text>*/}\r\n                        </Layer>\r\n                    </Stage></div>\r\n                <div>\r\n                    <h4 style={{\r\n                        marginTop: \"0px\", marginLeft: \"700px\", \"text-align\": \"left\", fontFamily: \"monospace\", fontSize: \"25px\"\r\n                    }}>\r\n                        <br /><br /><br /><br />\r\n                        {\"Your agent's weights:\"}<br />\r\n                        <div class=\"w-text\">\r\n                            <p >{`w1: min distance to dot:`}<br /><p class=\"num\">{w1}</p></p>\r\n                            <p>{`w2: distance to between the ball and the panel:`}<br /><p class=\"num\">{w2}</p></p>\r\n                            <p>{`w3: number of dots remaining:`}<br /><p class=\"num\">{w3}</p></p></div>\r\n                    </h4>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nfunction randomInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction distance(a, b) {\r\n    let { x: ax, y: ay } = a;\r\n    let { x: bx, y: by } = b;\r\n    return Math.sqrt(((ax - bx) * (ax - bx) + (ay - by) * (ay - by)));\r\n}\r\n\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}","import {checkWinner} from './ConnectFour';\r\n\r\nclass MinimaxAgent {\r\n    constructor(board, depth) {\r\n        this.scores = { \"p1\": -1000000, \"tie\": 0, \"p2\": -1000000 };\r\n        this.cache = {};\r\n        this.depth = depth;\r\n        this.getAction(board);\r\n    }\r\n\r\n    getActions(board) {\r\n        let actions = [];\r\n        for (let index = 0; index < board.length; index++) {\r\n            if (board[index][1] === null) {\r\n                actions.push(index);\r\n            }\r\n        }\r\n        return actions;\r\n    }\r\n\r\n    setDepth(d){\r\n        this.depth = d;\r\n    }\r\n\r\n    getAction(board) {\r\n        let actions = this.getActions(board);\r\n        let maxVal = -Infinity;\r\n        let maxValAction = null;\r\n        board = board.map((a) => a.slice());\r\n        for (const action of actions) {\r\n            const boardCopy = board.map((a) => a.slice());\r\n            console.log(this.depth);\r\n            let val = this.minimax(this.tryMove(action, boardCopy, \"p2\"), false, -Infinity, Infinity, this.depth);\r\n            //console.log(val);\r\n            //console.log(action, val, boardCopy, this.getScore(boardCopy));\r\n            if (maxVal < val) {\r\n                maxVal = val;\r\n                maxValAction = action;\r\n            }\r\n        }\r\n        //console.log(maxVal, maxValAction);\r\n        return maxValAction;\r\n    }\r\n\r\n    tryMove(colId, board, val) {\r\n        let newCol = board[colId].reverse();\r\n        newCol[newCol.indexOf(null)] = val;\r\n        newCol.reverse();\r\n        return board;\r\n    }\r\n\r\n    count(four, tar) {\r\n        let count = 0;\r\n        for (const each of four) {\r\n            if (each === tar) {\r\n                count++;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    scoreFour(a, b, c, d) {\r\n        const four = [a, b, c, d];\r\n        let score = 0;\r\n        const count1 = this.count(four, \"p1\");\r\n        const countN = this.count(four, null);\r\n        const count2 = this.count(four, \"p2\");\r\n\r\n        if (count1 === 2 && countN === 2) {\r\n            return -500;\r\n        }\r\n        if (count1 === 3 && countN === 1) {\r\n            return -1000;\r\n        }\r\n        \r\n        if (count1 === 4) {\r\n            return -100000;\r\n        }\r\n        if (count2 === 4) {\r\n            return 90000;\r\n        }\r\n        return count2;\r\n        /*\r\n        if (count1 === 2 && countN === 2) {\r\n            return -500;\r\n        }\r\n        if (count1 === 3 && countN === 1) {\r\n            return -10000;\r\n        }\r\n        if (count2 === 3 && countN === 1) {\r\n            return 300;\r\n        }\r\n        if (count1 === 4) {\r\n            return -100000;\r\n        }\r\n        if (count2 === 4) {\r\n            return 100000;\r\n        }\r\n        return count2;\r\n        */\r\n    }\r\n\r\n    getScore(board) {\r\n        let score = 0;\r\n\r\n        score += 3 * this.count(board[3], \"p2\");\r\n\r\n        for (let c = 0; c < 7; c++) {\r\n            for (let r = 1; r < 4; r++) {\r\n                score += this.scoreFour(board[c][r], board[c][r + 1], board[c][r + 2], board[c][r + 3]);\r\n            }\r\n        }\r\n\r\n\r\n        for (let c = 0; c < 4; c++) {\r\n            for (let r = 1; r < 7; r++) {\r\n                score += this.scoreFour(board[c][r], board[c + 1][r], board[c + 2][r], board[c + 3][r]);\r\n            }\r\n        }\r\n\r\n        for (let c = 0; c < 4; c++) {\r\n            for (let r = 1; r < 4; r++) {\r\n                score += this.scoreFour(board[c][r], board[c + 1][r + 1], board[c + 2][r + 2], board[c + 3][r + 3]);\r\n            }\r\n        }\r\n\r\n        for (let c = 3; c < 7; c++) {\r\n            for (let r = 1; r < 4; r++) {\r\n                score += this.scoreFour(board[c][r], board[c - 1][r + 1], board[c - 2][r + 2], board[c - 3][r + 3]);\r\n            }\r\n        }\r\n        return score;\r\n    }\r\n    toHash(board) {\r\n        let re = \"\";\r\n        for (let c = 0; c < 7; c++) {\r\n            for (let r = 1; r < 7; r++) {\r\n                if (board[c][r])\r\n                    re += board[c][r];\r\n                else\r\n                    re += \"n\";\r\n            }\r\n        }\r\n        return re;\r\n    }\r\n    minimax(board, isMax, alpha, beta, depth) {\r\n        //console.log(1);\r\n        if (this.toHash(board) in this.cache) {\r\n            return this.cache[this.toHash(board)];\r\n        }\r\n        board = board.map((a) => a.slice());\r\n\r\n        if (checkWinner(board) || depth === 0) {\r\n            let score = this.getScore(board);\r\n            //console.log(this.toHash(board), score);\r\n            this.cache[this.toHash(board)] = score;\r\n            return score;\r\n        }\r\n\r\n        let actions = this.getActions(board);\r\n\r\n        if (isMax) {\r\n            let val = -Infinity;\r\n            for (const action of actions) {\r\n                const boardCopy = board.map((a) => a.slice());\r\n                val = Math.max(val, this.minimax(this.tryMove(action, boardCopy, \"p2\"), false, alpha, beta, depth - 1));\r\n\r\n                if (val >= beta) {\r\n                    //console.log(\"maxb: \" + val);\r\n                    return val;\r\n                }\r\n                alpha = Math.max(alpha, val);\r\n            }\r\n            //console.log(\"max: \" + val);\r\n            return val;\r\n        }\r\n        else {\r\n            let val = Infinity;\r\n            for (const action of actions) {\r\n                const boardCopy = board.map((a) => a.slice());\r\n                val = Math.min(val, this.minimax(this.tryMove(action, boardCopy, \"p1\"), true, alpha, beta, depth - 1));\r\n                //console.log(action, val);\r\n                if (val <= alpha) {\r\n                    return val;\r\n                }\r\n                beta = Math.min(beta, val);\r\n            }\r\n            return val;\r\n        }\r\n    }\r\n}\r\n\r\nexport default MinimaxAgent;","import React, { Component } from 'react';\r\nimport MinimaxAgent from './MinimaxAgent';\r\nimport \"./ConnectFour.css\"\r\n\r\nfunction Piece(props) {\r\n    return (\r\n        <div className={props.id === 0 ? \"virtual-piece\" : \"piece\"}>\r\n            <div\r\n                className={(props.id === 0 ? \"v\" : \"\") + `${props.val}` + (props.finished && props.val !== null ? \"finished\" : \"\")}\r\n\r\n            ></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Col(props) {\r\n    return (\r\n        <div\r\n            className=\"col\" onClick={() => props.handleClick()} onMouseEnter={() => props.handleEnter()} onMouseLeave={() => props.handleLeave()}>\r\n            {[...Array(props.pieces.length)].map((x, y) => {\r\n                return <Piece key={y} val={props.pieces[y]} id={y} finished={props.finished}></Piece>\r\n            }\r\n            )}\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default class ConnectFour extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentPlayer: 0, // player 1 goes first\r\n            board: new Array(7).fill(new Array(7).fill(null)),\r\n            lastBoards: [],\r\n            colors: [\"p1\", \"p2\"],\r\n            winner: null,\r\n            depth: 3,\r\n            minimaxAgent: new MinimaxAgent(new Array(7).fill(new Array(7).fill(null)), 3),\r\n        };\r\n        this.reset = this.reset.bind(this);\r\n        this.props.getFunctions(() => { }, this.reset);\r\n    }\r\n\r\n    reset() {\r\n        console.log(\"reset\");\r\n        this.setState({\r\n            currentPlayer: 0, // player 1 goes first\r\n            board: new Array(7).fill(new Array(7).fill(null)),\r\n            lastBoards: [],\r\n            colors: [\"p1\", \"p2\"],\r\n            winner: null,\r\n        });\r\n        console.log(this.state);\r\n    }\r\n\r\n    undo() {\r\n        console.log(this.state);\r\n        if (this.state.lastBoards.length) {\r\n            this.setState({\r\n                board: this.state.lastBoards.pop(),\r\n                currentPlayer: 0,\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    setDepth(d){\r\n        this.setState({depth: d});\r\n        this.state.minimaxAgent.setDepth(d);\r\n    }\r\n\r\n    handleClick(colId) {\r\n        if (!this.state.winner) {\r\n            this.state.lastBoards.push(this.state.board.map((a) => a.slice()));\r\n            this.move(colId);\r\n        }\r\n    }\r\n\r\n    AITakeMove() {\r\n        if (checkWinner(this.state.board) === null && this.state.currentPlayer == 1) {\r\n            //console.log(1);\r\n            const boardCopy = this.state.board.map((a) => a.slice());\r\n            const action = this.state.minimaxAgent.getAction(boardCopy);\r\n\r\n            this.move(action);\r\n            //console.log(this.state.aiThinking);\r\n\r\n        }\r\n    }\r\n\r\n    handleEnter(colId) {\r\n        const boardCopy = this.state.board.map((a) => a.slice());\r\n        boardCopy[colId][0] = this.state.colors[this.state.currentPlayer];\r\n        for (let index = 0; index < boardCopy.length; index++) {\r\n            if (index !== colId) {\r\n                boardCopy[index][0] = null;\r\n            }\r\n        }\r\n        this.setState({\r\n            board: boardCopy\r\n        });\r\n    }\r\n\r\n    handleLeave(colId) {\r\n        const boardCopy = this.state.board.map((a) => a.slice());\r\n        boardCopy[colId][0] = null;\r\n        this.setState({\r\n            board: boardCopy\r\n        });\r\n    }\r\n\r\n    move(colId) {\r\n        const boardCopy = this.state.board.map((a) => a.slice());\r\n\r\n        if (boardCopy[colId].slice(1, 7).indexOf(null) >= 0) {\r\n            let newCol = boardCopy[colId].reverse();\r\n            newCol[newCol.indexOf(null)] = this.state.colors[this.state.currentPlayer];\r\n            newCol.reverse();\r\n            if (this.state.currentPlayer == 0) {\r\n                boardCopy[colId][0] = this.state.colors[this.state.currentPlayer];\r\n            }\r\n            this.setState({\r\n                currentPlayer: Math.abs(this.state.currentPlayer - 1),\r\n                board: boardCopy,\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        const boardCopy = this.state.board.map((a) => a.slice());\r\n        let winner = checkWinner(boardCopy);\r\n        if (this.state.winner !== winner) {\r\n\r\n            for (let index = 0; index < boardCopy.length; index++) {\r\n                boardCopy[index][0] = null;\r\n            }\r\n            this.setState({\r\n                winner: winner,\r\n                board: boardCopy,\r\n            })\r\n        }\r\n        this.AITakeMove();\r\n    }\r\n\r\n    render() {\r\n        if (this.state.winner) {\r\n            let cols = [...Array(this.state.board.length)].map((x, y) =>\r\n                <Col\r\n                    key={y}\r\n                    pieces={this.state.board[y]}\r\n                    handleClick={() => { }}\r\n                    handleEnter={() => { }}\r\n                    handleLeave={() => { }}\r\n                    finished={true}\r\n                ></Col>\r\n            );\r\n            return (\r\n                <div>\r\n                    <div className=\"game\">\r\n                        <div className=\"board\">\r\n                            <>\r\n                                <div className=\"col\"></div>\r\n                                {cols}</>\r\n                        </div>\r\n                        <button\r\n                        style={{ position: \"absolute\", marginTop: \"460px\", marginLeft: \"150px\", height: \"30px\", width: \"100px\" }}\r\n                        onClick={() => this.undo()}\r\n                        type=\"button\"\r\n                        class=\"btn btn-outline-dark\">\r\n                        <p style={{ \"margin-top\": \"-5px\" }}>undo</p>\r\n                    </button>\r\n                    <div class={\"btn-group\"}>\r\n                        <button class=\"btn btn-outline-dark dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" style={{ position: \"absolute\", marginTop: \"460px\", marginLeft: \"-200px\", height: \"30px\", width: \"150px\" }}>\r\n                            <p style={{ \"margin-top\": \"-5px\" }}>{`Depth: ${this.state.depth}`}</p>\r\n                        </button>\r\n                        <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n                            <li>\r\n                                <button type=\"button\" class=\"btn btn-light navbtn\" onClick={() => this.setDepth(3)}><p style={{ \"margin-top\": \"-5px\" }}>{`Depth: 3`}</p></button>\r\n                                <button type=\"button\" class=\"btn btn-light navbtn\" onClick={() => this.setDepth(4)}><p style={{ \"margin-top\": \"-5px\" }}>{`Depth: 4`}</p></button>\r\n                                <button type=\"button\" class=\"btn btn-light navbtn\" onClick={() => this.setDepth(5)}><p style={{ \"margin-top\": \"-5px\" }}>{`Depth: 5`}</p></button>\r\n                            </li>\r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                    <h1 style={{ position: \"relative\", marginTop: \"-170px\" }}>{this.state.winner == \"tie\" ? \"Tie\" : `Winner: ${this.state.winner === \"p1\" ? \"You\" : \"AI\"}`}</h1>\r\n                </div>\r\n\r\n            );\r\n        }\r\n\r\n        let cols = [...Array(this.state.board.length)].map((x, y) =>\r\n            <Col\r\n                key={y}\r\n                pieces={this.state.board[y]}\r\n                handleClick={() => this.handleClick(y)}\r\n                handleEnter={() => this.handleEnter(y)}\r\n                handleLeave={() => this.handleLeave(y)}\r\n                finished={false}\r\n            ></Col>\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"game\">\r\n                    <div className=\"board\">\r\n                        {cols}\r\n                    </div>\r\n                    \r\n                    <button\r\n                        style={{ position: \"absolute\", marginTop: \"460px\", marginLeft: \"150px\", height: \"30px\", width: \"100px\" }}\r\n                        onClick={() => this.undo()}\r\n                        type=\"button\"\r\n                        class=\"btn btn-outline-dark\">\r\n                        <p style={{ \"margin-top\": \"-5px\" }}>undo</p>\r\n                    </button>\r\n                    <div class={\"dropdown\"}>\r\n                        <button class=\"btn btn-outline-dark dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" style={{ position: \"absolute\", marginTop: \"460px\", marginLeft: \"-200px\", height: \"30px\", width: \"150px\" }}>\r\n                            <p style={{ \"margin-top\": \"-5px\" }}>{`Depth: ${this.state.depth}`}</p>\r\n                        </button>\r\n                        <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n                            <li>\r\n                                <button type=\"button\" class=\"btn btn-light navbtn\" onClick={() => this.setDepth(3)}><p style={{ \"margin-top\": \"-5px\" }}>{`Depth: 3`}</p></button>\r\n                                <button type=\"button\" class=\"btn btn-light navbtn\" onClick={() => this.setDepth(4)}><p style={{ \"margin-top\": \"-5px\" }}>{`Depth: 4`}</p></button>\r\n                                <button type=\"button\" class=\"btn btn-light navbtn\" onClick={() => this.setDepth(5)}><p style={{ \"margin-top\": \"-5px\" }}>{`Depth: 5`}</p></button>\r\n                            </li>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                    <h5 class=\"connectFourDes\" style={{ position: \"absolute\", marginTop: \"160px\", marginLeft: \"30px\", textAlign: \"left\" }}>\r\n                        This is a chess game known as \"Connect Four\", which you<br/>\r\n                        will need to connect four pieces to win (accept diagonals). <br/>\r\n                        The game has \"gravity\", so wherever you put the pieces, <br/>\r\n                        they would \"drop\" down to the bottom.<br/><br/>\r\n                        You are competing with a \"Minimax\" AI with alpha-beta pruning.<br/>\r\n                        Basically, it will search possible future states of the game<br/>\r\n                        and choose the action that it think is best at the current state<br/>\r\n                        each time. <br/><br/>\r\n                        It is not a perfect player for this game, so try your best to<br/>\r\n                        beat it by your \"humanity\"!\r\n                    </h5>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction checkFour(a, b, c, d) {\r\n    return ((a !== null) && (a === b) && (a === c) && (a === d));\r\n}\r\n\r\nfunction checkWinner(board) {\r\n    for (let c = 0; c < 7; c++) {\r\n        for (let r = 1; r < 5; r++) {\r\n            if (checkFour(board[c][r], board[c][r + 1], board[c][r + 2], board[c][r + 3])) {\r\n                return board[c][r];\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    for (let c = 0; c < 4; c++) {\r\n        for (let r = 1; r < 7; r++) {\r\n            if (checkFour(board[c][r], board[c + 1][r], board[c + 2][r], board[c + 3][r])) {\r\n                return board[c][r];\r\n            }\r\n        }\r\n    }\r\n\r\n    for (let c = 0; c < 4; c++) {\r\n        for (let r = 1; r < 5; r++) {\r\n            if (checkFour(board[c][r], board[c + 1][r + 1], board[c + 2][r + 2], board[c + 3][r + 3]))\r\n                return board[c][r];\r\n        }\r\n    }\r\n\r\n    for (let c = 3; c < 7; c++) {\r\n        for (let r = 1; r < 5; r++) {\r\n            if (checkFour(board[c][r], board[c - 1][r + 1], board[c - 2][r + 2], board[c - 3][r + 3]))\r\n                return board[c][r];\r\n        }\r\n    }\r\n\r\n    for (let c = 0; c < 7; c++) {\r\n        if (board[c].slice(1, 7).indexOf(null) >= 0) {\r\n            return null;\r\n        }\r\n\r\n    }\r\n    return \"tie\";\r\n}\r\n\r\nexport {checkWinner};","import React, { Component } from 'react';\r\nimport PtronVisualizer from './Perceptron/PtronVisualizer';\r\nimport PongVisualizer from './PongVisualizer/PongVisualizer';\r\nimport ConnectFour from './ConnectFourVisualizer/ConnectFour';\r\nimport './AIVisualizer.css';\r\n\r\nexport default class AIVisualizer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentAlgorithm: -1,\r\n            algorithms: ['Perceptron', 'Approximate Q', 'Minimax'],\r\n            visualizeAI: () => { },\r\n            reset: () => { },\r\n        };\r\n        \r\n        this.state.reset = this.state.reset.bind(this.state);\r\n        this.state.visualizeAI = this.state.visualizeAI.bind(this.state);\r\n        this.getAIFunctions = this.getAIFunctions.bind(this);\r\n        this.setAlgorithm = this.setAlgorithm.bind(this);\r\n        this.props.getFunctions(() => { this.state.visualizeAI() }, () => { this.state.reset() }, this.setAlgorithm, this.state.algorithms);\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.newScript(\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/499416/TweenLite.min.js\");\r\n        this.newScript(\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/499416/EasePack.min.js\");\r\n        this.newScript(\"https://drive.google.com/uc?export=view&id=1mvQtt6H9xa1k3Iwsw5PoYFDq8zEmg_SO\");\r\n    }\r\n\r\n    getAIFunctions(run, reset) {\r\n        console.log(run, reset);\r\n        this.state.visualizeAI = () => {\r\n            run()\r\n        };\r\n        this.state.reset = () => {\r\n            reset();\r\n        }\r\n        this.setState({ visualizeAI: run });\r\n    }\r\n    setAlgorithm(algoId) {\r\n        this.setState({ currentAlgorithm: algoId });\r\n    }\r\n\r\n    newScript(url){\r\n        var script = document.createElement('script');\r\n        script.src = url;\r\n        document.body.appendChild(script);\r\n    }\r\n\r\n    render() {\r\n        let renderObj;\r\n        switch (this.state.currentAlgorithm) {\r\n            case -1:\r\n                renderObj = <div>\r\n                <div class=\"textcontainer\">\r\n                    <div class=\"typewriter\"><h1>Welcome to the Future.</h1></div>\r\n                </div>\r\n                <div id=\"large-header\" class=\"large-header\" style={{marginTop: \"-18em\"}}>\r\n                    <canvas id=\"demo-canvas\"></canvas>\r\n                </div>\r\n                {/*\r\n                <div id=\"space\">\r\n                  <div class=\"stars\"></div>\r\n                  <div class=\"stars\"></div>\r\n                  <div class=\"stars\"></div>\r\n                  <div class=\"stars\"></div>\r\n                  <div class=\"stars\"></div>\r\n                </div>*/}\r\n                </div>\r\n                break;\r\n            case 0:\r\n                renderObj = <PtronVisualizer setVisualizerRendering={this.props.setVisualizerRendering} getFunctions={this.getAIFunctions}></PtronVisualizer>\r\n                break;\r\n            case 1:\r\n                renderObj = <PongVisualizer setVisualizerRendering={this.props.setVisualizerRendering} getFunctions={this.getAIFunctions}></PongVisualizer>\r\n                break;\r\n            case 2:\r\n                renderObj = <ConnectFour setVisualizerRendering={this.props.setVisualizerRendering} getFunctions={this.getAIFunctions}></ConnectFour>\r\n                break;\r\n        }\r\n        return (\r\n            <div>{renderObj}</div>\r\n        );\r\n\r\n    }\r\n}","import React, { Component, Text } from 'react';\r\nimport TextLoop from \"react-text-loop\";\r\nimport PathFindingVisualizer from './PathFindingVisualizer/PathFindingVisualizer';\r\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\r\nimport './Visualizer.css'\r\nimport AIVisualizer from './AIVisualizer/AIVisualizer';\r\n\r\nexport default class Visualizer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            mode: 'ai',\r\n            rendering: false,\r\n            algorithms: [],\r\n            currentAlgorithm: null,\r\n            goFunction: () => { },\r\n            resetFunction: () => { },\r\n            setAlgorithm: () => { },\r\n            sortingClicked: false,\r\n            pathClicked: false,\r\n            AIClicked: false,\r\n            aicount: 0,\r\n        };\r\n        this.getFunctions = this.getFunctions.bind(this);\r\n        this.changeRenderingState = this.changeRenderingState.bind(this);\r\n    }\r\n\r\n    changeRenderingState(rendering) {\r\n        this.setState({ rendering: rendering });\r\n    }\r\n\r\n    getFunctions(go, reset, setAlgo, algorithms) {\r\n        //console.log(go);\r\n        this.state.goFunction = go;\r\n        this.state.resetFunction = reset;\r\n        this.state.setAlgorithm = setAlgo;\r\n        this.state.algorithms = algorithms;\r\n        this.setState({ algorithms: algorithms });\r\n        //this.state.goFunction();\r\n    }\r\n\r\n    render() {\r\n        let renderObj = null;\r\n        if (this.state.mode === 'pathfinding') {\r\n            renderObj = <PathFindingVisualizer setVisualizerRendering={this.changeRenderingState} getFunctions={this.getFunctions} />;\r\n        }\r\n        else if (this.state.mode === 'sorting') {\r\n            renderObj = <SortingVisualizer setVisualizerRendering={this.changeRenderingState} getFunctions={this.getFunctions} />;\r\n        }\r\n        else if (this.state.mode === 'ai') {\r\n            renderObj = <AIVisualizer count={this.state.aicount} setVisualizerRendering={this.changeRenderingState} getFunctions={this.getFunctions}></AIVisualizer>\r\n        }\r\n        else {\r\n            renderObj =\r\n                <div class=\"welbotron\">\r\n                    \r\n                    <div class=\"container welc\">\r\n                        \r\n                        <h1 class='welcome'>Hello, algorithms.\r\n                            <p class=\"quote\">\r\n                                <TextLoop interval={3800} springConfig={{ stiffness: 200}} adjustingSpeed={300} >\r\n                                        <p class=\"quoteText\">\"An algorithm must be seen to be believed.\"</p>\r\n                                        <p class=\"quoteText\">\"Algorithms are central objects of study in Computer Science.\"</p>\r\n                                        <p class=\"quoteText\">\"Algorithms are apprehensible magics.\"</p>\r\n                                        <p class=\"quoteText\">\"An algorithm is like a recipe.\"</p>\r\n                                </TextLoop>\r\n                            </p>\r\n                            \r\n                            <p class=\"lead\">This website might help you understand algorithms better by visualizing them.</p>\r\n                            <p class=\"secondline lead\">Click on one of the categories below to visualize algorithms.</p>\r\n\r\n                        </h1>\r\n                        <a href='#' className='mainpage b' onClick={() => {\r\n                            if (!this.state.rendering) {\r\n                                this.setState({ mode: 'pathfinding' });\r\n                                this.setState({ currentAlgorithm: null, pathClicked: true });\r\n                            }\r\n                        }} data-toggle={this.state.pathClicked ? \"\" : \"modal\"} data-target=\"#pathIntroModal\">\r\n                            <span></span>\r\n                            PATH FINDING\r\n                        </a>\r\n                        <a href='#' className='mainpage b' onClick={() => {\r\n                            if (!this.state.rendering) {\r\n                                this.setState({ mode: 'sorting', currentAlgorithm: null, sortingClicked: true });\r\n                            }\r\n                        }} data-toggle={this.state.sortingClicked ? \"\" : \"modal\"} data-target=\"#sortingIntroModal\">\r\n                            <span></span>\r\n                            SORTING\r\n                        </a>\r\n                        <a href='#' className='mainpage b' onClick={() => {\r\n                            if (!this.state.rendering) {\r\n                                this.setState({ mode: 'ai', currentAlgorithm: null, AIClicked: true});\r\n                            }\r\n                        }} data-toggle={this.state.AIClicked ? \"\" : \"modal\"} data-target=\"#aiIntroModal\">\r\n                            <span></span>\r\n                            ARTIFICIAL INTELLIGENCE\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n        }\r\n        let invisibleOrNot = '';\r\n        if (this.state.mode === 'main') invisibleOrNot = ' invisible';\r\n        let algorithms = this.state.algorithms;\r\n        return (\r\n            <>  \r\n                    \r\n                    <nav class=\"navbar navbar-expand-lg navbar-light fixed-top bg-dark\">\r\n                    <button\r\n                        onClick={() => {\r\n                            if (!this.state.rendering) {\r\n                                this.setState({ mode: 'main' });\r\n                            }\r\n                        }}\r\n                        type=\"button\" class=\"btn btn-dark navbtn\"\r\n                        disabled={this.state.rendering}\r\n                    >Main</button>\r\n                    <button\r\n                        onClick={() => {\r\n                            if (!this.state.rendering) {\r\n                                this.setState({ mode: 'pathfinding', currentAlgorithm: null, pathClicked: true });\r\n                                this.state.setAlgorithm(-1);\r\n                            }\r\n                        }}\r\n                        type=\"button\" class=\"btn btn-dark navbtn\" \r\n                        data-toggle={this.state.pathClicked ? \"\" : \"modal\"} data-target=\"#pathIntroModal\"\r\n                        disabled={this.state.rendering}\r\n                    >Pathfinding</button>\r\n                    <button\r\n                        onClick={() => {\r\n                            if (!this.state.rendering) {\r\n                                this.setState({ mode: 'sorting', currentAlgorithm: null, sortingClicked: true });\r\n                                this.state.setAlgorithm(-1);\r\n                            }\r\n                        }}\r\n                        type=\"button\" class=\"btn btn-dark navbtn\" \r\n                        data-toggle={this.state.sortingClicked ? \"\" : \"modal\"} data-target=\"#sortingIntroModal\"\r\n                        disabled={this.state.rendering}\r\n                    >Sorting</button>\r\n                    <button\r\n                        onClick={() => {\r\n                            \r\n                            if (!this.state.rendering) {\r\n                                this.setState({ mode: 'ai', currentAlgorithm: null, AIClicked: true});\r\n                                this.state.setAlgorithm(-1);\r\n                            }\r\n                        }}\r\n                        type=\"button\" class=\"btn btn-dark navbtn\"\r\n                        data-toggle={this.state.AIClicked ? \"\" : \"modal\"} data-target=\"#aiIntroModal\"\r\n                        disabled={this.state.rendering}\r\n                    >AI</button>\r\n                    <div class={\"dropdown\" + invisibleOrNot}>\r\n                        <button class=\"btn btn-light dropdown-toggle navbtn\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" disabled={this.state.rendering}>\r\n                            Actions\r\n                        </button>\r\n                        <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n                            <li>\r\n                                <button type=\"button\" class=\"btn btn-light navbtn\" onClick={() => this.state.goFunction()} data-toggle={this.state.currentAlgorithm === null ? \"modal\" : \"\"} data-target=\"#setAlgoModal\" disabled={this.state.mode === \"ai\" && this.state.currentAlgorithm === \"Minimax\"}>Go!</button>\r\n                                <button type=\"button\" class=\"btn btn-light navbtn\" onClick={() => this.state.resetFunction()}>Reset</button>\r\n                            </li>\r\n                        </div>\r\n                    </div>\r\n                    <div class={\"dropdown\" + invisibleOrNot}>\r\n                        <button class=\"btn btn-secondary dropdown-toggle navbtn\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" disabled={this.state.rendering}>\r\n                            {this.state.currentAlgorithm == null ? 'Algorithms' : this.state.currentAlgorithm}\r\n                        </button>\r\n                        <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n                            <li>\r\n                                {algorithms.map((algorithm, algoId) => {\r\n                                    return (<button type=\"button\" class=\"btn btn-light navbtn\" onClick={() => {\r\n                                        this.state.setAlgorithm(algoId);\r\n                                        this.setState({ currentAlgorithm: this.state.algorithms[algoId] });\r\n                                    }}>{algorithm}</button>);\r\n                                }\r\n                                )\r\n                                }\r\n                            </li>\r\n                        </div>\r\n                    </div>\r\n                </nav>\r\n                <div class=\"modal fade\" id=\"setAlgoModal\" role=\"dialog\">\r\n                    <div class=\"modal-dialog\">\r\n                        <div class=\"modal-content\">\r\n\r\n                            <div class=\"modal-header\">\r\n                                <h5 class=\"modal-title\">No Algorithm Selected</h5>\r\n                                <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\r\n                            </div>\r\n\r\n                            <div class=\"modal-body-alert\">\r\n                                <p>Please select an algorithm first.</p>\r\n                            </div>\r\n                            <div class=\"modal-footer\">\r\n                                <button type=\"button\" class=\"btn btn-dark\" data-dismiss=\"modal\" style={{ width: '100px' }}>OK</button>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n                <div class=\"modal fade\" id=\"pathIntroModal\" role=\"dialog\">\r\n                    <div class=\"modal-dialog\">\r\n                        <div class=\"modal-content intro\">\r\n\r\n                            <div class=\"modal-header\">\r\n                                <h5 class=\"modal-title\">Pathfinding</h5>\r\n                                <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\r\n                            </div>\r\n\r\n                            <div class=\"modal-body intro\">\r\n                                <p>\r\n                                    Pathfinding is generally the process of finding a route between two points. It is closely related to the shortest path problem in graph theory,\r\n                                    which examines how to identify the \"best\" paths valued by different criteria (Ex. distance, cost, time consumption).\r\n                                </p>\r\n                                <p>Pathfinding is also similar to Searching in some circumstances. For instance, we can use [breadth-first search] to find the shortest path in a grid world.</p>\r\n                                <p>\r\n                                    In our scenario, the paths are valued by the number of cells they passed from START:\r\n                                    <div class=\"simg\" width=\"20\" height=\"20\"></div>\r\n                                    to the TARGET:\r\n                                    <div class=\"fimg\" width=\"20\" height=\"20\"></div>\r\n                                    .\r\n                                </p>\r\n                                <p>You may drag the START and TARGET icons to change their positions, and click on the blank nodes to add Walls.</p>\r\n\r\n                                <p>Now please choose a sorting algorithm and visualize it!</p>\r\n                                <p class='tips'>(after choosing an algorithm, click on the [Actions] button.)</p><br/>\r\n                                <p class='tips'>Note: there could be multiple \"best\" paths, so paths generated by different algorithms may not be consistent.</p>\r\n                            </div>\r\n                            <div class=\"modal-footer\">\r\n                                <button type=\"button\" class=\"btn btn-dark\" data-dismiss=\"modal\" style={{ width: '100px' }}>OK</button>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n                <div class=\"modal fade\" id=\"sortingIntroModal\" role=\"dialog\">\r\n                    <div class=\"modal-dialog\">\r\n                        <div class=\"modal-content intro\">\r\n\r\n                            <div class=\"modal-header\">\r\n                                <h5 class=\"modal-title\">Sorting</h5>\r\n                                <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\r\n                            </div>\r\n\r\n                            <div class=\"modal-body intro\">\r\n                                <p>Sorting is a process of arranging an ordered sequence. It is a common operation in many applications.</p>\r\n                                <p>Common uses of sorted sequences are:\r\n                                    <div class='uses-list'>\r\n                                        <p>·lookup or search efficiently</p>\r\n                                        <p>·merge sequences efficiently</p>\r\n                                        <p>·process data in a defined order</p>\r\n                                    </div>\r\n                                Now please choose a sorting algorithm and visualize it!\r\n                                </p>\r\n                                <p class='tips'>(after choosing an algorithm, click on the [Actions] button.)</p>\r\n                            </div>\r\n                            <div class=\"modal-footer\">\r\n                                <button type=\"button\" class=\"btn btn-dark\" data-dismiss=\"modal\" style={{ width: '100px' }}>OK</button>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                    \r\n                </div>\r\n                <div class=\"modal fade\" id=\"aiIntroModal\" role=\"dialog\">\r\n                    <div class=\"modal-dialog\">\r\n                        <div class=\"modal-content intro\">\r\n\r\n                            <div class=\"modal-header\">\r\n                                <h5 class=\"modal-title\">Artificial Intelligence</h5>\r\n                                <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\r\n                            </div>\r\n\r\n                            <div class=\"modal-body intro\">\r\n                                <p>\r\n                                    Artificial intelligence (AI) is intelligence demonstrated by machines.\r\n                                    Leading textbooks define the field as the study of \"intelligent agents\": \r\n                                    any device that perceives its environment and takes actions that maximize its \r\n                                    chance of successfully achieving its goals.\r\n                                </p>\r\n                                <p>\r\n                                    In this category, you will experience with powerful AI algorithms \r\n                                    based on fundamental ideas. Please try to understand those ideas behind through the visualizations,\r\n                                    and I would try my best to demonstrate those principles.\r\n                                </p>\r\n                                <p> Now please choose an algorithm and begin your journey!</p>\r\n                            </div>\r\n                            <div class=\"modal-footer\">\r\n                                <button type=\"button\" class=\"btn btn-dark\" data-dismiss=\"modal\" style={{ width: '100px' }}>OK</button>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                    \r\n                </div>\r\n                <div>\r\n                    {renderObj}\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Visualizer from './Visualizer';\r\nimport 'bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport 'bootstrap/dist/js/bootstrap.js';\r\nimport $ from 'jquery';\r\nimport { BrowserRouter, Index, Route } from 'react-router-dom';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <>\r\n      <meta charset=\"utf-8\" />\r\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\r\n\r\n      <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\" integrity=\"sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z\" crossorigin=\"anonymous\"></link>\r\n      <div className=\"App\">\r\n        <BrowserRouter basename={'JasonFengGit.github.io/'}>\r\n          <Visualizer></Visualizer>\r\n        </BrowserRouter>\r\n      </div >\r\n      <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\" integrity=\"sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj\" crossorigin=\"anonymous\"></script>\r\n      <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js\" integrity=\"sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN\" crossorigin=\"anonymous\"></script>\r\n      <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\" integrity=\"sha384-B4gt1jrGC7Jh4AgTPSdUtOBvfO8shuf57BaghqFfPlYxofvL8/KUEfYiJOMMV+rV\" crossorigin=\"anonymous\"></script>\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport Visualizer from './Visualizer';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App class='app'></App>, document.getElementById('root'));\r\nserviceWorker.unregister();"],"sourceRoot":""}