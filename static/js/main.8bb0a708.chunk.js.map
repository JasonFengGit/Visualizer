{"version":3,"sources":["PathFindingVisualizer/Node/Node.jsx","Algorithm/pathfindingAlgorithms.js","PathFindingVisualizer/PathFindingVisualizer.jsx","SortingVisualizer/Pile/Pile.jsx","Algorithm/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","Perceptron/PtronVisualizer.jsx","Visualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","row","col","isFinish","isStart","onMouseDown","onMouseEnter","onMouseUp","isWall","extraClassName","id","className","Component","dijkstra","grid","start","finish","visitedInOrder","distance","univisited","re","node","push","allNodes","length","sort","a","b","closest","shift","Infinity","isVisited","updateUnvisitedNeighbors","DFS","finsish","BFS","console","log","AStar","neighbors","neighbor","previousNode","PathFindingVisualizer","state","FR","FC","mouseIsPressed","changingStart","changingFinish","visualized","rendering","numRow","numCol","SR","SC","currentAlgorithm","algorithms","pathfindingAlgorithms","visualizePathfinding","bind","clearVisualizer","setAlgorithm","getFunctions","algoId","setState","initializeGrid","clearWall","currentRow","isW","element","document","getElementById","createNode","updateGridWithWall","newFinish","newStart","newNode","setVisualizerRendering","componentDidMount","shortedPath","path","cur","unshift","getShortestPath","i","setTimeout","map","rowId","key","nodeId","handleMouseDown","handleMouseEnter","handleMouseUp","Pile","val","isChanging","finished","colorSetIndex","changingColors","normalColors","color","style","height","background","selectionSort","piles","statesInOrder","minId","j","tempVal","temp","slice","changing","bubbleSort","insertionSort","mergeSort","quickSort","SortingVisualizer","numPiles","maxPile","changingPiles","getRandomInt","sortingAlgorithms","randomizePiles","visualizeSorting","initializePiles","class","pile","pileId","indexOf","min","range","Math","floor","random","PtronVisualizer","training","Array","max","width","count","ptron","xOff","yOff","M","B","resetVisualizer","startVisualizer","x","n","as","ae","bs","be","Perceptron","y","answer","f","input","output","initialize","x1","y1","x2","y2","weights","getWeights","xx1","yy1","xx2","yy2","train","points","guess","feedforward","fill","aM","aB","eM","eB","stroke","strokeWidth","point","pointId","radius","opacity","text","fontFamily","fontSize","c","inputs","desired","error","sum","activate","Visualizer","mode","goFunction","resetFunction","changeRenderingState","go","reset","setAlgo","renderObj","href","onClick","invisibleOrNot","type","disabled","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","algorithm","App","charset","name","content","rel","integrity","crossorigin","basename","src","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8bb0a708.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n    render() {\r\n        const {\r\n            row,\r\n            col,\r\n            isFinish,\r\n            isStart,\r\n            onMouseDown,\r\n            onMouseEnter,\r\n            onMouseUp,\r\n            isWall,\r\n        } = this.props;\r\n        const extraClassName = isFinish\r\n            ? 'node-finish'\r\n            : isStart\r\n                ? 'node-start'\r\n                : isWall\r\n                    ? 'node-wall'\r\n                    : '';\r\n        return (\r\n            <div\r\n                id={`node-${row}-${col}`}\r\n                className={`node ${extraClassName}`}\r\n                onMouseDown={() => onMouseDown(row, col)}\r\n                onMouseEnter={() => onMouseEnter(row, col)}\r\n                onMouseUp={() => onMouseUp()}>\r\n            </div>\r\n        );\r\n    }\r\n}","function dijkstra(grid, start, finish) {\r\n    const visitedInOrder = [];\r\n    start.distance = 0;\r\n    const univisited = allNodes(grid);\r\n    while (univisited.length) {\r\n        sortNodes(univisited);\r\n        const closest = univisited.shift();\r\n        if (closest.isWall) continue;\r\n        if (closest.distance === Infinity) return visitedInOrder;\r\n        closest.isVisited = true;\r\n        visitedInOrder.push(closest);\r\n        if (closest === finish) return visitedInOrder;\r\n        updateUnvisitedNeighbors(closest, grid);\r\n    }\r\n    return visitedInOrder;\r\n\r\n}\r\n\r\nfunction DFS(grid, start, finsish) {\r\n\r\n}\r\n\r\nfunction BFS(grid, start, finish) {\r\n    console.log(1);\r\n    return;\r\n}\r\n\r\nfunction AStar(grid, start, finish) {\r\n    return;\r\n}\r\n\r\nfunction allNodes(grid) {\r\n    const re = [];\r\n    for (const row of grid) {\r\n        for (const node of row) {\r\n            re.push(node);\r\n        }\r\n    }\r\n    return re;\r\n}\r\n\r\nfunction sortNodes(nodes) {\r\n    nodes.sort((a, b) => a.distance - b.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(closest, grid) {\r\n    const neighbors = [];\r\n    const { row, col } = closest;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n\r\n    for (const neighbor of neighbors) {\r\n        if (!neighbor.isVisited) {\r\n            neighbor.distance = closest.distance + 1;\r\n            neighbor.previousNode = closest;\r\n        }\r\n    }\r\n}\r\n\r\nfunction getShortestPath(finish) {\r\n    const path = [];\r\n    let cur = finish;\r\n    while (cur !== null) {\r\n        path.unshift(cur);\r\n        cur = cur.previousNode;\r\n    }\r\n    return path;\r\n}\r\n\r\nexport { dijkstra, BFS, DFS, AStar, getShortestPath };","import React, { Component } from 'react';\r\nimport Node from './Node/Node';\r\nimport { dijkstra, BFS, DFS, AStar, getShortestPath } from '../Algorithm/pathfindingAlgorithms';\r\nimport './PathFindingVisualizer.css';\r\n\r\nexport default class PathFindingVisualizer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            grid: [],\r\n            FR: 7,\r\n            FC: 30,\r\n            mouseIsPressed: false,\r\n            changingStart: false,\r\n            changingFinish: false,\r\n            visualized: false,\r\n            rendering: false,\r\n            numRow: 17,\r\n            numCol: 36,\r\n            SR: 7,\r\n            SC: 5,\r\n            currentAlgorithm: 0,\r\n            algorithms: ['Dijkstra', 'BFS', 'DFS', 'A Star'],\r\n            pathfindingAlgorithms: [dijkstra, BFS, DFS, AStar]\r\n        };\r\n        this.visualizePathfinding = this.visualizePathfinding.bind(this);\r\n        this.clearVisualizer = this.clearVisualizer.bind(this);\r\n        this.setAlgorithm = this.setAlgorithm.bind(this);\r\n        this.props.getFunctions(this.visualizePathfinding, this.clearVisualizer, this.setAlgorithm, this.state.algorithms);\r\n    }\r\n\r\n    setAlgorithm(algoId) {\r\n        this.setState({ currentAlgorithm: algoId });\r\n    }\r\n\r\n    isRendering() {\r\n        return this.state.rendering;\r\n    }\r\n\r\n    componentDidMount() {\r\n        const grid = this.initializeGrid(false);\r\n        this.setState({\r\n            grid: grid,\r\n        })\r\n        this.state.grid = grid;\r\n    }\r\n\r\n    initializeGrid(clearWall) {\r\n        const grid = [];\r\n        for (let row = 0; row < this.state.numRow; row++) {\r\n            const currentRow = [];\r\n            for (let col = 0; col < this.state.numCol; col++) {\r\n                let isW = false;\r\n                const element = document.getElementById(`node-${row}-${col}`);\r\n                if (element && (element.className === 'node node-path' || element.className === 'node node-visited')) {\r\n                    element.className = 'node';\r\n                }\r\n                if (!clearWall && element && element.className === 'node node-wall') {\r\n                    isW = true;\r\n                }\r\n                currentRow.push(this.createNode(row, col, isW));\r\n            }\r\n            grid.push(currentRow);\r\n        }\r\n        return grid;\r\n    }\r\n\r\n    createNode(row, col, isW) {\r\n        return {\r\n            col,\r\n            row,\r\n            isStart: row === this.state.SR && col === this.state.SC,\r\n            isFinish: row === this.state.FR && col === this.state.FC,\r\n            distance: Infinity,\r\n            isVisited: false,\r\n            isWall: isW,\r\n            previousNode: null,\r\n        };\r\n    }\r\n\r\n    handleMouseDown(row, col) {\r\n        if (!this.state.visualized && row === this.state.SR && col === this.state.SC) {\r\n            this.setState({ changingStart: true });\r\n        }\r\n        else if (!this.state.visualized && row === this.state.FR && col === this.state.FC) {\r\n            this.setState({ changingFinish: true });\r\n        }\r\n        else if (!this.state.rendering) {\r\n            this.updateGridWithWall(this.state.grid, row, col);\r\n            this.setState({ mouseIsPressed: true });\r\n        }\r\n    }\r\n\r\n    handleMouseEnter(row, col) {\r\n        if (this.state.changingStart && !(row === this.state.FR && col === this.state.FC)) {\r\n            const start = document.getElementById(`node-${this.state.SR}-${this.state.SC}`);\r\n            if (start) {\r\n                start.className = 'node';\r\n                start.isStart = false;\r\n                this.state.grid[this.state.SR][this.state.SC].isStart = false;\r\n            }\r\n            const newStart = document.getElementById(`node-${row}-${col}`);\r\n            if (newStart) {\r\n                newStart.isStart = true;\r\n                newStart.className = 'node node-start';\r\n                this.state.grid[row][col].isStart = true;\r\n            }\r\n            if (start && newStart) {\r\n                this.setState({ SR: row, SC: col });\r\n                //console.log(11, row, col, this.state.SR, this.state.SC);\r\n                //this.setState({ SR: row, SC: col });\r\n                //console.log(11, row, col, this.state.SR, this.state.SC);\r\n            }\r\n\r\n        }\r\n        else if (this.state.changingFinish && !(row === this.state.SR && col === this.state.SC)) {\r\n            const finish = document.getElementById(`node-${this.state.FR}-${this.state.FC}`);\r\n            if (finish) {\r\n                finish.className = 'node';\r\n                finish.isFinish = false;\r\n                this.state.grid[this.state.FR][this.state.FC].isFinish = false;\r\n            }\r\n            const newFinish = document.getElementById(`node-${row}-${col}`);\r\n            if (newFinish) {\r\n                newFinish.isFinish = true;\r\n                newFinish.className = 'node node-finish';\r\n                this.state.grid[row][col].isFinish = true;\r\n            }\r\n            this.setState({ FR: row, FC: col });\r\n        }\r\n        else if (this.state.mouseIsPressed) {\r\n            this.updateGridWithWall(this.state.grid, row, col);\r\n            this.setState({ mouseIsPressed: true });\r\n        }\r\n    }\r\n\r\n    handleMouseUp() {\r\n        this.setState({\r\n            changingStart: false,\r\n            changingFinish: false,\r\n            mouseIsPressed: false\r\n        });\r\n    }\r\n\r\n    updateGridWithWall(grid, row, col) {\r\n        const node = grid[row][col];\r\n        const newNode = {\r\n            ...node,\r\n            isWall: !node.isWall\r\n        }\r\n        grid[row][col] = newNode;\r\n    }\r\n\r\n    visualizePathfinding() {\r\n        if (this.state.rendering) return;\r\n        this.setState({ visualized: true, rendering: true });\r\n        this.props.setVisualizerRendering(true);\r\n        this.componentDidMount();\r\n        const grid = this.state.grid;\r\n        const start = grid[this.state.SR][this.state.SC];\r\n        const finish = grid[this.state.FR][this.state.FC];\r\n        const visitedInOrder = this.state.pathfindingAlgorithms[this.state.currentAlgorithm](grid, start, finish);\r\n        const shortedPath = getShortestPath(finish);\r\n\r\n        for (let i = 0; i < visitedInOrder.length; i++) {\r\n            setTimeout(() => {\r\n                const node = visitedInOrder[i];\r\n                if (!node.isStart && !node.isFinish)\r\n                    document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\r\n            }, 7 * i);\r\n        }\r\n\r\n        for (let i = 0; i < shortedPath.length; i++) {\r\n            setTimeout(() => {\r\n                const node = shortedPath[i];\r\n                if (!node.isStart && !node.isFinish)\r\n                    document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-path';\r\n            }, 7 * visitedInOrder.length + 50 * i);\r\n\r\n        }\r\n        setTimeout(() => {\r\n            this.setState({ rendering: false });\r\n            this.props.setVisualizerRendering(false);\r\n        }, 7 * visitedInOrder.length + 50 * shortedPath.length);\r\n\r\n    }\r\n\r\n    clearVisualizer() {\r\n        if (!this.state.rendering)\r\n            this.setState({ grid: this.initializeGrid(true), visualized: false });\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        const grid = this.state.grid;\r\n\r\n        return (\r\n            <>\r\n                {/*\r\n                <button\r\n                    onClick={() => { this.visualizePathfinding() }}\r\n                    type=\"button\" class=\"btn btn-outline-dark\"\r\n                    disabled={this.state.rendering}>\r\n                    visualize\r\n                </button>\r\n                <button\r\n                    onClick={() => this.clearVisualizer()}\r\n                    type=\"button\" class=\"btn btn-outline-dark\"\r\n                    disabled={this.state.rendering}>\r\n                    clear\r\n            </button>*/}\r\n\r\n                <div className=\"grid\">\r\n                    {grid.map((row, rowId) => {\r\n                        return (\r\n                            <div key={rowId}>\r\n                                {row.map((node, nodeId) => {\r\n                                    const { row, col, isFinish, isStart, isWall } = node;\r\n                                    return (\r\n                                        <Node\r\n                                            key={nodeId}\r\n                                            row={row}\r\n                                            col={col}\r\n                                            isStart={isStart}\r\n                                            isFinish={isFinish}\r\n                                            isWall={isWall}\r\n                                            mouseIsPressed={this.state.mouseIsPressed}\r\n                                            onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                                            onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\r\n                                            onMouseUp={() => this.handleMouseUp()}\r\n                                        ></Node>\r\n                                    )\r\n                                })\r\n                                }\r\n                            </div>\r\n                        );\r\n                    })\r\n                    }\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './Pile.css';\r\n\r\nexport default class Pile extends Component {\r\n    render() {\r\n        const {\r\n            val,\r\n            isChanging,\r\n            finished,\r\n            colorSetIndex,\r\n            changingColors = [`rgb(228, 230, 120)`, `rgb(155, 147, 229)`, `rgb(248, 250, 140)`],\r\n            normalColors = [`rgb(200,${(1 - val / 80) * 255}, 255)`, `rgb(250,200, ${(1 - val / 80) * 255})`, `rgb( ${(1 - val / 80) * 255},200,250)`],\r\n        } = this.props;\r\n\r\n        let extraClassName = '';\r\n        if (isChanging) {\r\n            extraClassName = '-changing';\r\n        }\r\n        if (finished) {\r\n            extraClassName = '-finished';\r\n        }\r\n        let color = extraClassName == '-changing' ? changingColors[colorSetIndex] : normalColors[colorSetIndex];\r\n        return (\r\n            <>\r\n                <div\r\n                    className={'pile' + extraClassName}\r\n                    style={{ height: `${val * 5}px`, background: color }}\r\n\r\n                >\r\n                    <p className='value'>{val}</p>\r\n                </div >\r\n            </>\r\n\r\n        );\r\n    }\r\n\r\n}","function selectionSort(piles) {\r\n\r\n    let statesInOrder = [];\r\n    for (let i = 0; i < piles.length - 1; i++) {\r\n        let minId = i;\r\n        for (let j = i + 1; j < piles.length; j++) {\r\n            if (piles[j] < piles[minId]) {\r\n                minId = j;\r\n            }\r\n        }\r\n        const tempVal = piles[minId];\r\n        piles[minId] = piles[i];\r\n        piles[i] = tempVal;\r\n        const temp = { piles: piles.slice(), changing: [minId, i] };\r\n        statesInOrder.push(temp);\r\n    }\r\n    return statesInOrder;\r\n}\r\n\r\nfunction bubbleSort(piles) {\r\n    return piles;\r\n}\r\n\r\nfunction insertionSort(piles) {\r\n    return piles;\r\n}\r\n\r\nfunction mergeSort(piles) {\r\n    return piles;\r\n}\r\n\r\n\r\nfunction quickSort(piles) {\r\n    return piles;\r\n}\r\n\r\nexport { selectionSort, bubbleSort, insertionSort, mergeSort, quickSort };","import React, { Component } from 'react';\r\nimport './SortingVisualizer.css';\r\nimport Pile from './Pile/Pile';\r\nimport { selectionSort, bubbleSort, insertionSort, mergeSort, quickSort } from '../Algorithm/sortingAlgorithms';\r\n\r\nexport default class SortingVisualizer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            piles: [],\r\n            numPiles: 40,\r\n            finished: false,\r\n            maxPile: 80,\r\n            changingPiles: [],\r\n            colorSetIndex: getRandomInt(0, 3),\r\n            currentAlgorithm: 0,\r\n            algorithms: ['Selection Sort', 'Bubble Sort', 'Insertion Sort', 'Merge Sort', 'Quick Sort'],\r\n            sortingAlgorithms: [selectionSort, bubbleSort, insertionSort, mergeSort, quickSort]\r\n        };\r\n        this.randomizePiles = this.randomizePiles.bind(this);\r\n        this.visualizeSorting = this.visualizeSorting.bind(this);\r\n        this.setAlgorithm = this.setAlgorithm.bind(this);\r\n        this.props.getFunctions(this.visualizeSorting, this.randomizePiles, this.setAlgorithm, this.state.algorithms);\r\n\r\n    }\r\n    componentDidMount() {\r\n        const piles = this.initializePiles();\r\n        this.setState({\r\n            piles: piles,\r\n        })\r\n    }\r\n\r\n    setAlgorithm(algoId) {\r\n        this.setState({ currentAlgorithm: algoId });\r\n    }\r\n\r\n    initializePiles() {\r\n        const piles = [];\r\n        for (let i = 0; i < this.state.numPiles; i++) {\r\n            piles.push(getRandomInt(5, this.state.maxPile - 5));\r\n        }\r\n        return piles;\r\n    }\r\n\r\n    visualizeSorting() {\r\n        if (this.state.rendering) return;\r\n        this.setState({ rendering: true });\r\n        this.props.setVisualizerRendering(true);\r\n        const piles = this.state.piles.slice();\r\n\r\n        const statesInOrder = this.state.sortingAlgorithms[this.state.currentAlgorithm](piles);\r\n        for (let i = 0; i < statesInOrder.length; i++) {\r\n            const { piles: state, changing: changingPiles } = statesInOrder[i];\r\n            setTimeout(() => {\r\n                this.setState({ piles: state, changingPiles: changingPiles });\r\n            }, 150 * i);\r\n\r\n        }\r\n        setTimeout(() => {\r\n            this.setState({ rendering: false, finished: true });\r\n            this.props.setVisualizerRendering(false);\r\n        }, 150 * statesInOrder.length);\r\n    }\r\n\r\n    randomizePiles() {\r\n        if (this.state.rendering) return;\r\n        this.setState({ finished: false, changingPiles: [], colorSetIndex: getRandomInt(0, 3) });\r\n        const piles = this.initializePiles();\r\n        this.setState({ piles: piles });\r\n    }\r\n\r\n    render() {\r\n        const piles = this.state.piles;\r\n        return (\r\n            <>\r\n                {/*\r\n                <button\r\n                    onClick={() => this.visualizeSorting()}\r\n                    type=\"button\" class=\"btn btn-outline-dark\"\r\n                    disabled={this.state.rendering}>\r\n                    Sort!\r\n                </button>\r\n                <button\r\n                    onClick={() => this.randomizePiles()}\r\n                    type=\"button\" class=\"btn btn-outline-dark\"\r\n                    disabled={this.state.rendering}>\r\n                    Randomize!\r\n                </button>*/}\r\n                <div className='piles' class=\"container\">\r\n                    {\r\n                        piles.map((pile, pileId) => {\r\n                            return (\r\n                                <Pile\r\n                                    finished={this.state.finished}\r\n                                    className='pile'\r\n                                    key={pileId}\r\n                                    val={pile}\r\n                                    isChanging={this.state.changingPiles.indexOf(pileId) !== -1}\r\n                                    colorSetIndex={this.state.colorSetIndex}\r\n                                ></Pile>\r\n                            )\r\n                        })\r\n                    }\r\n\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nfunction getRandomInt(min, range) {\r\n    return Math.floor(Math.random() * Math.floor(range)) + min;\r\n}","import React, { Component } from 'react';\r\nimport { Stage, Layer, Rect, Line, Konva, Circle, Text } from 'react-konva';\r\nimport './PtronVisualizer.css';\r\nexport default class PtronVisualizer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            training: new Array(1000),\r\n            rendering: false,\r\n            min: -1,\r\n            max: 1,\r\n            width: 500,\r\n            height: 500,\r\n            count: 0,\r\n            ptron: null,\r\n            xOff: 50,\r\n            yOff: 100,\r\n            M: 0.4,\r\n            B: 0.3\r\n        }\r\n        this.resetVisualizer = this.resetVisualizer.bind(this);\r\n        this.startVisualizer = this.startVisualizer.bind(this);\r\n        this.props.getFunctions(this.startVisualizer, this.resetVisualizer);\r\n    }\r\n\r\n    f(x) {\r\n        return this.state.M * x + this.state.B;\r\n    }\r\n\r\n    map(n, as, ae, bs, be) {\r\n        return ((n - as) / (ae - as)) * (be - bs) + bs;\r\n    }\r\n\r\n    initialize() {\r\n        this.state.ptron = new Perceptron(3, 0.005);\r\n        for (let i = 0; i < this.state.training.length; i++) {\r\n            let x = random(this.state.min, this.state.max);\r\n            let y = random(this.state.min, this.state.max);\r\n            let answer = 1;\r\n            if (y < this.f(x)) answer = -1;\r\n            this.state.training[i] = {\r\n                input: [x, y, 1],\r\n                output: answer\r\n            }\r\n        }\r\n    }\r\n\r\n    resetVisualizer() {\r\n        if (this.state.rendering) {\r\n            return;\r\n        }\r\n        this.setState({ count: 0 });\r\n        this.state.count = 0;\r\n    }\r\n\r\n    startVisualizer() {\r\n        this.setState({ rendering: true });\r\n        this.props.setVisualizerRendering(true);\r\n        for (let i = 0; i < this.state.training.length - 1; i++) {\r\n            setTimeout(\r\n                () => {\r\n                    this.setState({ count: i });\r\n                    this.state.count = i;\r\n                    //console.log(this.state.count)\r\n                }\r\n                , 25 * i);\r\n        }\r\n        setTimeout(() => {\r\n            this.setState({ rendering: false });\r\n            this.props.setVisualizerRendering(false);\r\n        }, 25 * this.state.training.length)\r\n\r\n    }\r\n\r\n    render() {\r\n        if (this.state.count === 0) {\r\n            this.initialize();\r\n        }\r\n        let min = this.state.min;\r\n        let max = this.state.max;\r\n        let ptron = this.state.ptron;\r\n        let x1 = this.map(min, min, max, 0, this.state.width);\r\n        let y1 = this.map(this.f(min), min, max, this.state.height, 0);\r\n        let x2 = this.map(max, min, max, 0, this.state.width);\r\n        let y2 = this.map(this.f(max), min, max, this.state.height, 0);\r\n\r\n        let weights = ptron.getWeights();\r\n        let xx1 = min;\r\n        let yy1 = (-weights[2] - weights[0] * xx1) / weights[1];\r\n        let xx2 = max;\r\n        let yy2 = (-weights[2] - weights[0] * xx2) / weights[1];\r\n\r\n        xx1 = this.map(xx1, min, max, 0, this.state.width);\r\n        yy1 = this.map(yy1, min, max, this.state.height, 0);\r\n        xx2 = this.map(xx2, min, max, 0, this.state.width);\r\n        yy2 = this.map(yy2, min, max, this.state.height, 0);\r\n        //console.log(this.state.training[this.state.count]);\r\n        ptron.train(this.state.training[this.state.count].input, this.state.training[this.state.count].output);\r\n        // y = 0.3 x + 0.4\r\n        // y = -w0x - w2 / w1 \r\n        //console.log(weights[2], weights[1], weights[0]);\r\n        let points = []\r\n\r\n        for (let i = 0; i < this.state.count; i++) {\r\n            let guess = ptron.feedforward(this.state.training[i].input);\r\n            let x = this.map(this.state.training[i].input[0], min, max, 0, this.state.width);\r\n            let y = this.map(this.state.training[i].input[1], min, max, this.state.height, 0);\r\n            points.push({ x: x, y: y, fill: guess < 0 });\r\n        }\r\n        let xOff = this.state.xOff;\r\n        let yOff = this.state.yOff;\r\n        let aM = -weights[0] / weights[1];\r\n        let aB = -weights[2] / weights[1];\r\n        let eM = aM - this.state.M;\r\n        let eB = aB - this.state.B;\r\n        return (\r\n            <>\r\n                {/*\r\n                <button\r\n                    onClick={this.startVisualizer}\r\n                    type=\"button\" class=\"btn btn-outline-dark\"\r\n                    disabled={this.state.rendering}\r\n                >\r\n                    Apporximate\r\n                </button >\r\n                <button\r\n                    onClick={this.resetVisualizer}\r\n                    type=\"button\" class=\"btn btn-outline-dark\"\r\n                    disabled={this.state.rendering}\r\n                >\r\n                    Reset\r\n                </button>*/}\r\n\r\n                <Stage\r\n                    width={this.state.width * 2}\r\n                    height={this.state.height + 1}\r\n                    className='stage'\r\n                    id='stage'\r\n                >\r\n                    <Layer>\r\n                        <Line points={[0, 0, 500, 0]} stroke={'black'} ></Line>\r\n                        <Line points={[0, 0, 0, 0 + 500]} stroke={'black'}></Line>\r\n                        <Line points={[0, 0 + 500, 500 + 0, 0 + 500]} stroke={'black'} ></Line>\r\n                        <Line points={[500 + 0, 0, 500 + 0, 0 + 500]} stroke={'black'} strokeWidth={1}></Line>\r\n                        <Line\r\n                            points={[x1 + 0, 0 + y1, x2 + 0, 0 + y2]}\r\n                            stroke={'red'}\r\n                            strokeWidth={1}>\r\n                        </Line>\r\n                        <Line\r\n                            points={[xx1 + 0, 0 + yy1, xx2 + 0, 0 + yy2]}\r\n                            stroke={'blue'}\r\n                            strokeWidth={this.state.count > 0 ? 1 : 0}>\r\n                        </Line>\r\n                        {points.map((point, pointId) => {\r\n                            return (\r\n                                <Circle\r\n                                    x={point.x + 0}\r\n                                    y={point.y + 0}\r\n                                    stroke={'black'}\r\n                                    radius={3}\r\n                                    opacity={0.7}\r\n                                    fill={point.fill ? 'black' : 'white'}\r\n                                ></Circle>)\r\n                        })\r\n                        }\r\n                        <Text\r\n                            x={550}\r\n                            y={50}\r\n                            text='Function Form: Y = M * X + B'\r\n                            fontFamily='Calibri'\r\n                            fill='black'\r\n                            fontSize={25}\r\n                        ></Text>\r\n                        <Text\r\n                            x={550}\r\n                            y={80}\r\n                            text={`Original Function: M = ${this.state.M} B = ${this.state.B}`}\r\n                            fontFamily='Calibri'\r\n                            fill='black'\r\n                            fontSize={25}\r\n                        ></Text>\r\n                        <Text\r\n                            x={550}\r\n                            y={135}\r\n                            text={`Approximation:\\nM = ${aM}\\nB = ${aB}`}\r\n                            fontFamily='Calibri'\r\n                            fill='black'\r\n                            fontSize={25}\r\n                        ></Text>\r\n                        <Text\r\n                            x={550}\r\n                            y={240}\r\n                            text={`Error:\\nM: ${eM}\\nB:${eB}`}\r\n                            fontFamily='Calibri'\r\n                            fill='red'\r\n                            fontSize={25}\r\n                        ></Text>\r\n                    </Layer>\r\n\r\n                </Stage >\r\n            </>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nfunction random(min, max) {\r\n    return Math.random() * (max - min) + min;\r\n}\r\n\r\n\r\nclass Perceptron {\r\n    constructor(n, c) {\r\n        // Array of weights for inputs\r\n        this.weights = new Array(n);\r\n        // Start with random weights\r\n        for (let i = 0; i < this.weights.length; i++) {\r\n            this.weights[i] = random(-1, 1);\r\n        }\r\n        this.c = c; // learning rate/constant\r\n    }\r\n\r\n    // Function to train the Perceptron\r\n    // Weights are adjusted based on \"desired\" answer\r\n    train(inputs, desired) {\r\n        // Guess the result\r\n        let guess = this.feedforward(inputs);\r\n        // Compute the factor for changing the weight based on the error\r\n        // Error = desired output - guessed output\r\n        // Note this can only be 0, -2, or 2\r\n        // Multiply by learning constant\r\n        let error = desired - guess;\r\n        // Adjust weights based on weightChange * input\r\n        for (let i = 0; i < this.weights.length; i++) {\r\n            this.weights[i] += this.c * error * inputs[i];\r\n        }\r\n    }\r\n\r\n    // Guess -1 or 1 based on input values\r\n    feedforward(inputs) {\r\n        // Sum all values\r\n        let sum = 0;\r\n        for (let i = 0; i < this.weights.length; i++) {\r\n            sum += inputs[i] * this.weights[i];\r\n        }\r\n        // Result is sign of the sum, -1 or 1\r\n        return this.activate(sum);\r\n    }\r\n\r\n    activate(sum) {\r\n        if (sum > 0) return 1;\r\n        else return -1;\r\n    }\r\n\r\n    // Return weights\r\n    getWeights() {\r\n        return this.weights;\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport PathFindingVisualizer from './PathFindingVisualizer/PathFindingVisualizer';\r\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\r\nimport PtronVisualizer from './Perceptron/PtronVisualizer'\r\nimport './Visualizer.css'\r\n\r\nexport default class Visualizer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            mode: 'sorting',\r\n            rendering: false,\r\n            algorithms: [],\r\n            currentAlgorithm: null,\r\n            goFunction: () => { },\r\n            resetFunction: () => { },\r\n            setAlgorithm: () => { },\r\n        };\r\n        this.getFunctions = this.getFunctions.bind(this);\r\n        this.changeRenderingState = this.changeRenderingState.bind(this);\r\n    }\r\n\r\n    changeRenderingState(rendering) {\r\n        this.setState({ rendering: rendering });\r\n    }\r\n\r\n    getFunctions(go, reset, setAlgo, algorithms) {\r\n        //console.log(go);\r\n        this.state.goFunction = go;\r\n        this.state.resetFunction = reset;\r\n        this.state.setAlgorithm = setAlgo;\r\n        this.state.algorithms = algorithms;\r\n        this.setState({ algorithms: algorithms });\r\n        //this.state.goFunction();\r\n    }\r\n\r\n    render() {\r\n        let renderObj = null;\r\n        if (this.state.mode === 'pathfinding') {\r\n            renderObj = <PathFindingVisualizer setVisualizerRendering={this.changeRenderingState} getFunctions={this.getFunctions} />;\r\n        }\r\n        else if (this.state.mode === 'sorting') {\r\n            renderObj = <SortingVisualizer setVisualizerRendering={this.changeRenderingState} getFunctions={this.getFunctions} />;\r\n        }\r\n        else if (this.state.mode === 'perceptron') {\r\n            renderObj = <PtronVisualizer setVisualizerRendering={this.changeRenderingState} getFunctions={this.getFunctions}></PtronVisualizer>\r\n        }\r\n        else {\r\n            renderObj =\r\n                <div class=\"welbotron\">\r\n                    <div class=\"container welc\">\r\n                        <h1 class='welcome'>Hello, algorithms.\r\n                            <p class=\"lead\">This website might help you understand algorithms better by visualizing them.</p>\r\n                            <p class=\"secondline lead\">Click on one of the categories below to visualize algorithms.</p>\r\n                        </h1>\r\n                        <a href='#' className='mainpage b' onClick={() => {\r\n                            if (!this.state.rendering) {\r\n                                this.setState({ mode: 'pathfinding' });\r\n                            }\r\n                        }}>\r\n                            <span></span>\r\n                            PATH-FINDING\r\n                        </a>\r\n                        <a href='#' className='mainpage b' onClick={() => {\r\n                            if (!this.state.rendering) {\r\n                                this.setState({ mode: 'sorting' });\r\n                            }\r\n                        }}>\r\n                            <span></span>\r\n                            SORTING\r\n                        </a>\r\n                        <a href='#' className='mainpage b' onClick={() => {\r\n                            if (!this.state.rendering) {\r\n                                this.setState({ mode: 'perceptron' });\r\n                            }\r\n                        }}>\r\n                            <span></span>\r\n                            Machine-Learning\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n        }\r\n        let invisibleOrNot = '';\r\n        if (this.state.mode === 'main') invisibleOrNot = ' invisible';\r\n        let algorithms = this.state.algorithms;\r\n        return (\r\n            <>\r\n                <nav class=\"navbar navbar-expand-lg navbar-light fixed-top bg-dark\">\r\n\r\n                    <button\r\n                        onClick={() => {\r\n                            if (!this.state.rendering) {\r\n                                this.setState({ mode: 'main' });\r\n                            }\r\n                        }}\r\n                        type=\"button\" class=\"btn btn-dark navbtn\"\r\n                        disabled={this.state.rendering}\r\n                    >Main</button>\r\n                    <button\r\n                        onClick={() => {\r\n                            if (!this.state.rendering) {\r\n                                this.setState({ mode: 'pathfinding' });\r\n                                this.setState({ currentAlgorithm: null });\r\n                            }\r\n                        }}\r\n                        type=\"button\" class=\"btn btn-dark navbtn\"\r\n                        disabled={this.state.rendering}\r\n                    >PathFinding</button>\r\n                    <button\r\n                        onClick={() => {\r\n                            if (!this.state.rendering) {\r\n                                this.setState({ mode: 'sorting' });\r\n                                this.setState({ currentAlgorithm: null });\r\n                            }\r\n                        }}\r\n                        type=\"button\" class=\"btn btn-dark navbtn\"\r\n                        disabled={this.state.rendering}\r\n                    >Sorting</button>\r\n                    <button\r\n                        onClick={() => {\r\n                            if (!this.state.rendering) {\r\n                                this.setState({ mode: 'perceptron' });\r\n                                this.setState({ currentAlgorithm: null });\r\n                            }\r\n                        }}\r\n                        type=\"button\" class=\"btn btn-dark navbtn\"\r\n                        disabled={this.state.rendering}\r\n                    >MachineLearning</button>\r\n                    <div class={\"dropdown\" + invisibleOrNot}>\r\n                        <button class=\"btn btn-light dropdown-toggle navbtn\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" disabled={this.state.rendering}>\r\n                            Actions\r\n                        </button>\r\n                        <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n                            <li>\r\n                                <button type=\"button\" class=\"btn btn-light navbtn\" onClick={() => this.state.goFunction()}>Go!</button>\r\n                                <button type=\"button\" class=\"btn btn-light navbtn\" onClick={() => this.state.resetFunction()}>Reset</button>\r\n                            </li>\r\n                        </div>\r\n                    </div>\r\n                    <div class={\"dropdown\" + invisibleOrNot}>\r\n                        <button class=\"btn btn-secondary dropdown-toggle navbtn\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" disabled={this.state.rendering}>\r\n                            {this.state.currentAlgorithm == null ? 'Algorithms' : this.state.currentAlgorithm}\r\n                        </button>\r\n                        <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n                            <li>\r\n                                {algorithms.map((algorithm, algoId) => {\r\n                                    console.log(algorithm);\r\n                                    return (<button type=\"button\" class=\"btn btn-light navbtn\" onClick={() => {\r\n                                        this.state.setAlgorithm(algoId);\r\n                                        this.setState({ currentAlgorithm: this.state.algorithms[algoId] });\r\n                                    }}>{algorithm}</button>);\r\n                                }\r\n                                )\r\n                                }\r\n                            </li>\r\n                        </div>\r\n                    </div>\r\n                </nav>\r\n                <div>\r\n                    <div>{renderObj}</div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Visualizer from './Visualizer';\r\nimport 'bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport 'bootstrap/dist/js/bootstrap.js';\r\nimport $ from 'jquery';\r\nimport { BrowserRouter, Index, Route } from 'react-router-dom';\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <meta charset=\"utf-8\" />\r\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\r\n\r\n      <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\" integrity=\"sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z\" crossorigin=\"anonymous\"></link>\r\n\r\n      <div className=\"App\">\r\n        <BrowserRouter basename={'JasonFengGit.github.io/'}>\r\n          <Visualizer></Visualizer>\r\n        </BrowserRouter>\r\n      </div >\r\n      <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\" integrity=\"sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj\" crossorigin=\"anonymous\"></script>\r\n      <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js\" integrity=\"sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN\" crossorigin=\"anonymous\"></script>\r\n      <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\" integrity=\"sha384-B4gt1jrGC7Jh4AgTPSdUtOBvfO8shuf57BaghqFfPlYxofvL8/KUEfYiJOMMV+rV\" crossorigin=\"anonymous\"></script>\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport Visualizer from './Visualizer';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App class='app'></App>, document.getElementById('root'));\r\nserviceWorker.unregister();"],"sourceRoot":""}